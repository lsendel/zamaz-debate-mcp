version: '3.8'

services:
  # MCP Sidecar
  mcp-sidecar:
    build:
      context: ./mcp-sidecar
      dockerfile: Dockerfile
    image: zamaz/mcp-sidecar:latest
    container_name: mcp-sidecar
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - JWT_SECRET=${JWT_SECRET:-mcp-sidecar-production-secret}
      - JWT_ISSUER=${JWT_ISSUER:-zamaz-mcp-sidecar}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION:-604800}
      - ORGANIZATION_SERVICE_URL=http://mcp-organization:5005
      - LLM_SERVICE_URL=http://mcp-llm:5002
      - CONTROLLER_SERVICE_URL=http://mcp-debate:5013
      - RAG_SERVICE_URL=http://mcp-rag:5004
      - RATE_LIMIT_REPLENISH_RATE=${RATE_LIMIT_REPLENISH_RATE:-10}
      - RATE_LIMIT_BURST_CAPACITY=${RATE_LIMIT_BURST_CAPACITY:-20}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - TRACING_ENABLED=${TRACING_ENABLED:-true}
      - SECURITY_SCANNING_ENABLED=${SECURITY_SCANNING_ENABLED:-true}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - redis
      - prometheus
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./logs/sidecar:/app/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-sidecar.rule=PathPrefix(`/api/v1`)"
      - "traefik.http.routers.mcp-sidecar.middlewares=auth"
      - "traefik.http.services.mcp-sidecar.loadbalancer.server.port=8080"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      - mcp-sidecar

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16