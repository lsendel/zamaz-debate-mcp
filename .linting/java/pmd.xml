<?xml version="1.0"?>
<ruleset name="MCP PMD Rules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 
         https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>PMD rules for MCP microservices</description>

    <!-- Best Practices -->
    <rule ref="category/java/bestpractices.xml">
        <!-- Exclude rules that conflict with Spring Boot patterns -->
        <exclude name="GuardLogStatement"/>
        <exclude name="JUnitTestContainsTooManyAsserts"/>
        <exclude name="JUnitAssertionsShouldIncludeMessage"/>
    </rule>

    <!-- Code Style -->
    <rule ref="category/java/codestyle.xml">
        <!-- Exclude rules that conflict with our naming conventions -->
        <exclude name="ShortVariable"/>
        <exclude name="LongVariable"/>
        <exclude name="ShortMethodName"/>
        <exclude name="ShortClassName"/>
        <exclude name="AtLeastOneConstructor"/>
        <exclude name="OnlyOneReturn"/>
        <exclude name="TooManyStaticImports"/>
    </rule>

    <!-- Design -->
    <rule ref="category/java/design.xml">
        <!-- Exclude rules that are too restrictive for microservices -->
        <exclude name="LawOfDemeter"/>
        <exclude name="LoosePackageCoupling"/>
        <exclude name="UseUtilityClass"/>
    </rule>

    <!-- Error Prone -->
    <rule ref="category/java/errorprone.xml">
        <!-- Exclude rules that conflict with Spring patterns -->
        <exclude name="BeanMembersShouldSerialize"/>
        <exclude name="DataflowAnomalyAnalysis"/>
    </rule>

    <!-- Multithreading -->
    <rule ref="category/java/multithreading.xml"/>

    <!-- Performance -->
    <rule ref="category/java/performance.xml">
        <!-- Exclude rules that are not relevant for modern JVMs -->
        <exclude name="AvoidInstantiatingObjectsInLoops"/>
    </rule>

    <!-- Security -->
    <rule ref="category/java/security.xml"/>

    <!-- Custom rules for microservices -->
    <rule ref="category/java/bestpractices.xml/UnusedPrivateField">
        <properties>
            <!-- Allow unused fields in entities (JPA may use them) -->
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@SimpleName[matches(@Image, '.*Entity$')]]"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/TooManyMethods">
        <properties>
            <!-- Allow more methods in controllers and services -->
            <property name="maxmethods" value="20"/>
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@SimpleName[matches(@Image, '.*(Controller|Service)$')]]"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/ExcessiveParameterList">
        <properties>
            <!-- Allow more parameters in configuration classes -->
            <property name="minimum" value="8"/>
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@SimpleName[matches(@Image, '.*Config$')]]"/>
        </properties>
    </rule>

    <!-- Exclude generated and test files -->
    <exclude-pattern>.*/target/.*</exclude-pattern>
    <exclude-pattern>.*/generated/.*</exclude-pattern>
    <exclude-pattern>.*Test.java</exclude-pattern>
    <exclude-pattern>.*Tests.java</exclude-pattern>
    <exclude-pattern>.*IT.java</exclude-pattern>
    <exclude-pattern>.*Application.java</exclude-pattern>

</ruleset>