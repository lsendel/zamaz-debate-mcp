services:
  # PostgreSQL for all services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password must be provided}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../scripts/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres -c shared_preload_libraries=pg_stat_statements

  # Redis for caching
  redis:
    image: redis:7.4-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant for RAG vector storage
  qdrant:
    image: qdrant/qdrant:v1.12.5
    ports:
      - "${QDRANT_PORT:-6333}:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - mcp-network

  # RabbitMQ for Spring Cloud Bus
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MGMT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Cloud Config Server
  mcp-config-server:
    build:
      context: ../..
      dockerfile: mcp-config-server/Dockerfile
    environment:
      CONFIG_GIT_REPO_URI: ${CONFIG_GIT_REPO_URI:-https://github.com/zamaz/mcp-config-repo.git}
      CONFIG_ENCRYPTION_KEY: ${CONFIG_ENCRYPTION_KEY:?Encryption key must be provided}
      CONFIG_SERVER_USERNAME: ${CONFIG_SERVER_USERNAME:-admin}
      CONFIG_SERVER_PASSWORD: ${CONFIG_SERVER_PASSWORD:-admin}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_USER:-admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASS:-admin}
      SPRING_PROFILES_ACTIVE: docker,bus
    ports:
      - "${CONFIG_SERVER_PORT:-8888}:8888"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    volumes:
      - config_server_data:/app/config-repo

  # Initialize databases
  postgres-init:
    image: postgres:17-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGHOST: postgres
      PGUSER: ${POSTGRES_USER:-postgres}
      PGPASSWORD: ${POSTGRES_PASSWORD:?Database password must be provided}
    volumes:
      - ../../scripts/init-scripts:/scripts
    networks:
      - mcp-network
    command: >
      sh -c "
        echo 'Creating databases...' &&
        psql -c 'CREATE DATABASE IF NOT EXISTS organization_db;' &&
        psql -c 'CREATE DATABASE IF NOT EXISTS debate_db;' &&
        psql -c 'CREATE DATABASE IF NOT EXISTS template_db;' &&
        psql -c 'CREATE DATABASE IF NOT EXISTS rag_db;' &&
        echo 'Databases created successfully!'
      "
    profiles:
      - setup

  # Java MCP Organization Service
  mcp-organization:
    build:
      context: ../..
      dockerfile: mcp-organization/Dockerfile
    environment:
      - CONFIG_SERVER_URI=http://mcp-config-server:8888
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=organization_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:?Database password must be provided}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET
      - SERVER_PORT=5005
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=mcp-organization
      - OTEL_TRACES_EXPORTER=otlp
    ports:
      - "${MCP_ORGANIZATION_PORT:-5005}:5005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mcp-config-server:
        condition: service_healthy
    volumes:
      - ../../mcp-organization/config:/app/config
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Java MCP LLM Service
  mcp-llm:
    build:
      context: ../..
      dockerfile: mcp-llm/Dockerfile
    environment:
      - CONFIG_SERVER_URI=http://mcp-config-server:8888
      - SPRING_PROFILES_ACTIVE=docker
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CLAUDE_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GOOGLE_API_KEY}
      - OLLAMA_BASE_URL=http://ollama:11434
      - SERVER_PORT=5002
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=mcp-llm
      - OTEL_TRACES_EXPORTER=otlp
    ports:
      - "${MCP_LLM_PORT:-5002}:5002"
    depends_on:
      redis:
        condition: service_healthy
      mcp-config-server:
        condition: service_healthy
    volumes:
      - ../../mcp-llm/config:/app/config
      - llm_cache:/app/cache
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Java MCP Controller Service (replaces debate)
  mcp-controller:
    build:
      context: ../..
      dockerfile: mcp-controller/Dockerfile
    environment:
      - CONFIG_SERVER_URI=http://mcp-config-server:8888
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=debate_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:?Database password must be provided}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ORGANIZATION_SERVICE_URL=http://mcp-organization:5005
      - LLM_SERVICE_URL=http://mcp-llm:5002
      - SERVER_PORT=5013
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=mcp-controller
      - OTEL_TRACES_EXPORTER=otlp
    ports:
      - "${MCP_DEBATE_PORT:-5013}:5013"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mcp-config-server:
        condition: service_healthy
      mcp-organization:
        condition: service_started
      mcp-llm:
        condition: service_started
    volumes:
      - ../../mcp-controller/config:/app/config
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5013/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Java MCP RAG Service
  mcp-rag:
    build:
      context: ../..
      dockerfile: mcp-rag/Dockerfile
    environment:
      - CONFIG_SERVER_URI=http://mcp-config-server:8888
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=rag_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:?Database password must be provided}
      - QDRANT_URL=http://qdrant:6333
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_PORT=5004
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=mcp-rag
      - OTEL_TRACES_EXPORTER=otlp
    ports:
      - "${MCP_RAG_PORT:-5004}:5004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
      mcp-config-server:
        condition: service_healthy
    volumes:
      - ../../mcp-rag/config:/app/config
      - rag_data:/app/data
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Java MCP Template Service
  mcp-template:
    build:
      context: ../..
      dockerfile: mcp-template/Dockerfile
    environment:
      - CONFIG_SERVER_URI=http://mcp-config-server:8888
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=template_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:?Database password must be provided}
      - SERVER_PORT=5006
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=mcp-template
      - OTEL_TRACES_EXPORTER=otlp
    ports:
      - "${MCP_TEMPLATE_PORT:-5006}:5006"
    depends_on:
      postgres:
        condition: service_healthy
      mcp-config-server:
        condition: service_healthy
      mcp-organization:
        condition: service_started
    volumes:
      - ../../mcp-template/config:/app/config
      - template-data:/app/data
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Optional: Ollama for local Llama models
  ollama:
    image: ollama/ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - mcp-network
    profiles:
      - llama

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ../../docker/otel-collector-config.yaml:/etc/otel-collector-config.yaml
      - otel_logs:/var/log/otel
    ports:
      - "${OTEL_GRPC_PORT:-4317}:4317"    # OTLP gRPC receiver
      - "${OTEL_HTTP_PORT:-4318}:4318"    # OTLP HTTP receiver
      - "${OTEL_METRICS_PORT:-8889}:8889" # Prometheus metrics
      - "${OTEL_HEALTH_PORT:-13133}:13133" # Health check
    depends_on:
      - jaeger
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.60
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"  # UI
      - "${JAEGER_COLLECTOR_PORT:-14250}:14250"  # gRPC collector
      - "${JAEGER_AGENT_PORT:-6831}:6831/udp"  # agent
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - jaeger_data:/badger
    networks:
      - mcp-network

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v3.1.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ../../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:11.5.0
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Loki for log aggregation
  loki:
    image: grafana/loki:3.3.0
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ../../docker/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:3.3.0
    volumes:
      - ../../docker/promtail-config.yaml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      loki:
        condition: service_healthy
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  rabbitmq_data:
  config_server_data:
  llm_cache:
  rag_data:
  template-data:
  ollama_data:
  prometheus_data:
  grafana_data:
  jaeger_data:
  otel_logs:
  loki_data:
