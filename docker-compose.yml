version: '3.8'

services:
  # PostgreSQL for all services
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password must be provided}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres -c shared_preload_libraries=pg_stat_statements

  # Redis for caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant for RAG vector storage
  qdrant:
    image: qdrant/qdrant
    ports:
      - "${QDRANT_PORT:-6333}:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - mcp-network

  # Initialize databases
  postgres-init:
    image: postgres:16-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGHOST: postgres
      PGUSER: ${POSTGRES_USER:-postgres}
      PGPASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - ./init-scripts:/scripts
    networks:
      - mcp-network
    command: >
      sh -c "
        echo 'Creating databases...' &&
        psql -c 'CREATE DATABASE IF NOT EXISTS organization_db;' &&
        psql -c 'CREATE DATABASE IF NOT EXISTS debate_db;' &&
        psql -c 'CREATE DATABASE IF NOT EXISTS template_db;' &&
        psql -c 'CREATE DATABASE IF NOT EXISTS rag_db;' &&
        echo 'Databases created successfully!'
      "
    profiles:
      - setup

  # Java MCP Organization Service
  mcp-organization:
    build:
      context: .
      dockerfile: mcp-organization/Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=organization_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-your-256-bit-secret-key-for-jwt-token-generation}
      - SERVER_PORT=5005
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
      - JAEGER_ENDPOINT=http://jaeger:14250
    ports:
      - "${MCP_ORGANIZATION_PORT:-5005}:5005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./mcp-organization/config:/app/config
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Java MCP LLM Service
  mcp-llm:
    build:
      context: .
      dockerfile: mcp-llm/Dockerfile
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CLAUDE_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GOOGLE_API_KEY}
      - OLLAMA_BASE_URL=http://ollama:11434
      - SERVER_PORT=5002
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JAEGER_ENDPOINT=http://jaeger:14250
    ports:
      - "${MCP_LLM_PORT:-5002}:5002"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./mcp-llm/config:/app/config
      - llm_cache:/app/cache
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Java MCP Controller Service (replaces debate)
  mcp-controller:
    build:
      context: .
      dockerfile: mcp-controller/Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=debate_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ORGANIZATION_SERVICE_URL=http://mcp-organization:5005
      - LLM_SERVICE_URL=http://mcp-llm:5002
      - SERVER_PORT=5013
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JAEGER_ENDPOINT=http://jaeger:14250
    ports:
      - "${MCP_DEBATE_PORT:-5013}:5013"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mcp-organization:
        condition: service_started
      mcp-llm:
        condition: service_started
    volumes:
      - ./mcp-controller/config:/app/config
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5013/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Java MCP RAG Service
  mcp-rag:
    build:
      context: .
      dockerfile: mcp-rag/Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=rag_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - QDRANT_URL=http://qdrant:6333
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_PORT=5004
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JAEGER_ENDPOINT=http://jaeger:14250
    ports:
      - "${MCP_RAG_PORT:-5004}:5004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    volumes:
      - ./mcp-rag/config:/app/config
      - rag_data:/app/data
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Java MCP Template Service
  mcp-template:
    build:
      context: .
      dockerfile: mcp-template/Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=template_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - SERVER_PORT=5006
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JAEGER_ENDPOINT=http://jaeger:14250
    ports:
      - "${MCP_TEMPLATE_PORT:-5006}:5006"
    depends_on:
      postgres:
        condition: service_healthy
      mcp-organization:
        condition: service_started
    volumes:
      - ./mcp-template/config:/app/config
      - template-data:/app/data
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Optional: Ollama for local Llama models
  ollama:
    image: ollama/ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - mcp-network
    profiles:
      - llama

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"  # UI
      - "${JAEGER_COLLECTOR_PORT:-14250}:14250"  # gRPC collector
      - "${JAEGER_AGENT_PORT:-6831}:6831/udp"  # agent
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
    networks:
      - mcp-network

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - mcp-network
    profiles:
      - monitoring

networks:
  mcp-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  llm_cache:
  rag_data:
  template-data:
  ollama_data:
  prometheus_data:
  grafana_data:
