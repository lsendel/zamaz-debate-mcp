services:
  # PostgreSQL for context service
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-context_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-context_pass}
      POSTGRES_DB: ${POSTGRES_DB:-context_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U context_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant for RAG vector storage
  qdrant:
    image: qdrant/qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - mcp-network

  # MCP Context Service
  mcp-context:
    build: ./mcp-context
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-context_user}:${POSTGRES_PASSWORD:-context_pass}@postgres:5432/${POSTGRES_DB:-context_db}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./mcp-context/config:/app/config
    networks:
      - mcp-network
    restart: unless-stopped

  # MCP LLM Service
  mcp-llm:
    build: ./mcp-llm
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - LLAMA_ENDPOINT=${LLAMA_ENDPOINT:-http://localhost:11434}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "5002:5002"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./mcp-llm/config:/app/config
      - llm_cache:/app/cache
    networks:
      - mcp-network
    restart: unless-stopped

  # MCP Debate Service
  mcp-debate:
    build: ./mcp-debate
    environment:
      - CONTEXT_SERVICE_URL=http://mcp-context:5001
      - LLM_SERVICE_URL=http://mcp-llm:5002
      - RAG_SERVICE_URL=http://mcp-rag:5004
      - DATABASE_PATH=/app/data/debates.db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "5003:5003"
    depends_on:
      - mcp-context
      - mcp-llm
    volumes:
      - ./mcp-debate/data:/app/data
      - ./mcp-debate/config:/app/config
    networks:
      - mcp-network
    restart: unless-stopped

  # MCP RAG Service
  mcp-rag:
    build: ./mcp-rag
    environment:
      - QDRANT_URL=http://qdrant:6333
      - CONTEXT_SERVICE_URL=http://mcp-context:5001
      - LLM_SERVICE_URL=http://mcp-llm:5002
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "5004:5004"
    depends_on:
      - qdrant
      - redis
      - mcp-context
    volumes:
      - ./mcp-rag/config:/app/config
      - rag_data:/app/data
    networks:
      - mcp-network
    restart: unless-stopped

  # MCP Organization Service
  mcp-organization:
    build: ./mcp-organization
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=debate_org
      - POSTGRES_USER=${POSTGRES_USER:-context_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-context_pass}
      - MCP_PORT=5005
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "5005:5005"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./mcp-organization/config:/app/config
    networks:
      - mcp-network
    restart: unless-stopped

  # Optional: Ollama for local Llama models
  ollama:
    image: ollama/ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - mcp-network
    profiles:
      - llama

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - mcp-network
    profiles:
      - monitoring

networks:
  mcp-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  llm_cache:
  rag_data:
  ollama_data:
  prometheus_data:
  grafana_data: