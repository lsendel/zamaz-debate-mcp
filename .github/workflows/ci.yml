name: Continuous Integration

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**', 'release/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for emergency builds)'
        required: false
        default: false
        type: boolean
      force_security_scan:
        description: 'Force security scan on all branches'
        required: false
        default: false
        type: boolean
      build_images:
        description: 'Force Docker image building'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  checks: write
  pull-requests: write
  issues: write

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '18'
  MAVEN_OPTS: '-Xmx3072m -XX:MaxMetaspaceSize=768m -XX:+UseG1GC'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Quality Gate Thresholds
  COVERAGE_THRESHOLD: '80'
  SECURITY_FAIL_THRESHOLD: '7'
  # Build Performance
  MAVEN_PARALLEL_THREADS: '2C'
  MAVEN_BATCH_MODE: '--batch-mode --no-transfer-progress --show-version'

concurrency:
  group: ci-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  # Job 1: Build and Test Java Services
  java-build-test:
    name: üèóÔ∏è Java Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-build-images: ${{ steps.changes.outputs.java == 'true' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          persist-credentials: false

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            java:
              - 'mcp-*/**'
              - 'pom.xml'
              - 'checkstyle.xml'
            frontend:
              - 'debate-ui/**'
            docker:
              - '**/Dockerfile'
              - 'docker-compose*.yml'

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION="1.0.${GITHUB_RUN_NUMBER}"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            VERSION="1.0.${GITHUB_RUN_NUMBER}-dev"
          else
            VERSION="1.0.${GITHUB_RUN_NUMBER}-${GITHUB_SHA:0:8}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Validate Maven configuration
        run: |
          mvn validate ${{ env.MAVEN_BATCH_MODE }}
          mvn help:effective-pom -q ${{ env.MAVEN_BATCH_MODE }}

      - name: Compile all modules
        run: |
          mvn clean compile -T ${{ env.MAVEN_PARALLEL_THREADS }} \
            -Drevision=${{ steps.version.outputs.version }} \
            ${{ env.MAVEN_BATCH_MODE }} \
            -Pci \
            -Dmaven.compiler.showWarnings=true \
            -Dmaven.compiler.showDeprecation=true

      - name: Run unit tests with coverage
        if: ${{ !inputs.skip_tests }}
        run: |
          mvn test -T ${{ env.MAVEN_PARALLEL_THREADS }} \
            -Drevision=${{ steps.version.outputs.version }} \
            ${{ env.MAVEN_BATCH_MODE }} \
            -Pci \
            -Djacoco.skip=false \
            -Dsurefire.rerunFailingTestsCount=2 \
            -Dargline="@{argLine}" || true
          
          # Check if any tests were actually run
          echo "Checking for test execution..."
          find . -path "*/target/surefire-reports/*.xml" -type f | head -10 || echo "No surefire reports found"
          find . -path "*/target/site/jacoco/jacoco.xml" -type f | head -10 || echo "No jacoco reports found"

      - name: Check unit test coverage threshold
        if: ${{ !inputs.skip_tests }}
        run: |
          mvn jacoco:check \
            ${{ env.MAVEN_BATCH_MODE }} \
            -Djacoco.haltOnFailure=true
        continue-on-error: true

      - name: Run integration tests
        if: ${{ !inputs.skip_tests }}
        run: |
          mvn verify -T ${{ env.MAVEN_PARALLEL_THREADS }} \
            -Drevision=${{ steps.version.outputs.version }} \
            ${{ env.MAVEN_BATCH_MODE }} \
            -Pci \
            -DskipUnitTests=true \
            -Djacoco.skip=false \
            -Dfailsafe.rerunFailingTestsCount=1 \
            -Dargline="@{argLine}" || true
          
          # Check if integration tests generated reports
          echo "Checking for integration test execution..."
          find . -path "*/target/failsafe-reports/*.xml" -type f | head -10 || echo "No failsafe reports found"

      - name: Generate aggregated test reports
        if: always() && !inputs.skip_tests
        run: |
          mvn jacoco:report-aggregate \
            ${{ env.MAVEN_BATCH_MODE }} \
            -Pci

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && !inputs.skip_tests
        with:
          name: test-results-java
          path: |
            **/target/surefire-reports/**/*.xml
            **/target/failsafe-reports/**/*.xml
            **/target/site/jacoco/**/*
          retention-days: 7
          if-no-files-found: warn

      - name: Package applications
        run: |
          mvn package -T 2C \
            -Drevision=${{ steps.version.outputs.version }} \
            --batch-mode --no-transfer-progress \
            -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java-artifacts
          path: |
            **/target/*.jar
            !**/target/*-sources.jar
            !**/target/*-javadoc.jar
          retention-days: 7

  # Job 2: Code Quality Analysis
  code-quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: java-build-test
    if: ${{ !inputs.skip_tests }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results-java
          path: ./

      - name: Run comprehensive code quality analysis
        run: |
          mvn -Pcode-quality \
            ${{ env.MAVEN_BATCH_MODE }} \
            checkstyle:check spotbugs:check
        continue-on-error: true

      - name: Generate quality reports
        run: |
          mvn -Pcode-quality \
            ${{ env.MAVEN_BATCH_MODE }} \
            checkstyle:checkstyle spotbugs:spotbugs
        continue-on-error: true

      - name: Run SonarQube analysis
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -n "$SONAR_TOKEN" ]; then
            mvn sonar:sonar \
              -Dsonar.projectKey=zamaz-debate-mcp \
              -Dsonar.organization=zamaz \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.token=$SONAR_TOKEN \
              --batch-mode --no-transfer-progress
          else
            echo "‚ö†Ô∏è SONAR_TOKEN not available, skipping SonarQube analysis"
          fi

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            **/target/checkstyle-result.xml
            **/target/spotbugsXml.xml
            **/target/site/jacoco/
          retention-days: 7

  # Job 3: Frontend Build and Test
  frontend-build-test:
    name: ‚öõÔ∏è Frontend Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: java-build-test
    if: needs.java-build-test.outputs.should-build-images == 'true' || contains(github.event.head_commit.modified, 'debate-ui/')
    
    defaults:
      run:
        working-directory: ./debate-ui
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './debate-ui/package-lock.json'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run type checking
        run: npm run type-check
        continue-on-error: true

      - name: Run unit tests
        if: ${{ !inputs.skip_tests }}
        run: npm test -- --coverage --watchAll=false

      - name: Build application
        run: npm run build

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: debate-ui/build/
          retention-days: 7

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always() && !inputs.skip_tests
        with:
          name: frontend-coverage
          path: debate-ui/coverage/
          retention-days: 7

  # Job 4: Security Scanning (Enhanced)
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: java-build-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run OWASP Dependency Check with Security Profile
        run: |
          mvn -Psecurity \
            ${{ env.MAVEN_BATCH_MODE }} \
            org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=${{ env.SECURITY_FAIL_THRESHOLD }} \
            -DskipTestScope=false
        continue-on-error: true

      - name: Run Semgrep security scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/java
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            **/target/dependency-check-report.html
            **/target/dependency-check-report.xml
          retention-days: 30

  # Job 5: Build Summary and Quality Gates
  build-summary:
    name: üìä Build Summary
    runs-on: ubuntu-latest
    needs: [java-build-test, code-quality, frontend-build-test, security-scan]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate comprehensive build summary
        run: |
          echo "## üèóÔ∏è CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          BUILD_VERSION="${{ needs.java-build-test.outputs.version }}"
          echo "**Build Version:** ${BUILD_VERSION:-N/A}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${GITHUB_REF#refs/heads/}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${GITHUB_SHA:0:8}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîç Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Duration | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Java Build & Test | ${{ needs.java-build-test.result }} | ~15-20min | Maven multi-module build with parallel tests |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} | ~10-15min | Checkstyle, SpotBugs, SonarQube analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Build | ${{ needs.frontend-build-test.result }} | ~5-10min | React TypeScript build and tests |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} | ~10-15min | OWASP, Semgrep, TruffleHog scans |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìä Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage Threshold:** ${{ env.COVERAGE_THRESHOLD }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Security CVSS Threshold:** ${{ env.SECURITY_FAIL_THRESHOLD }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Maven Parallel Threads:** ${{ env.MAVEN_PARALLEL_THREADS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üì¶ Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          JAR_COUNT=$(find ./artifacts -name "*.jar" 2>/dev/null | wc -l || echo "0")
          FRONTEND_BUILD=$([ -d ./artifacts/frontend-build ] && echo "‚úÖ Available" || echo "‚ùå Not built")
          TEST_REPORTS=$(find ./artifacts -name "*test*" -type d 2>/dev/null | wc -l || echo "0")
          QUALITY_REPORTS=$(find ./artifacts -name "*quality*" -o -name "*checkstyle*" -o -name "*spotbugs*" 2>/dev/null | wc -l || echo "0")
          
          echo "- **Java JAR files:** ${JAR_COUNT}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend build:** ${FRONTEND_BUILD}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test reports:** ${TEST_REPORTS}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality reports:** ${QUALITY_REPORTS}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Enhanced Quality Gates Check
          echo "### üö¶ Quality Gates Assessment" >> $GITHUB_STEP_SUMMARY
          
          JAVA_STATUS="${{ needs.java-build-test.result }}"
          QUALITY_STATUS="${{ needs.code-quality.result }}"
          FRONTEND_STATUS="${{ needs.frontend-build-test.result }}"
          SECURITY_STATUS="${{ needs.security-scan.result }}"
          
          # Count passed/failed gates
          PASSED_GATES=0
          TOTAL_GATES=4
          
          if [[ "$JAVA_STATUS" == "success" ]]; then
            echo "‚úÖ **Java Build & Test:** All tests passed, artifacts generated" >> $GITHUB_STEP_SUMMARY
            ((PASSED_GATES++))
          else
            echo "‚ùå **Java Build & Test:** Build or tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$QUALITY_STATUS" == "success" ]]; then
            echo "‚úÖ **Code Quality:** All quality checks passed" >> $GITHUB_STEP_SUMMARY
            ((PASSED_GATES++))
          elif [[ "$QUALITY_STATUS" == "skipped" ]]; then
            echo "‚è≠Ô∏è **Code Quality:** Skipped (tests were skipped)" >> $GITHUB_STEP_SUMMARY
            ((PASSED_GATES++))
          else
            echo "‚ö†Ô∏è **Code Quality:** Some quality issues found (non-blocking)" >> $GITHUB_STEP_SUMMARY
            ((PASSED_GATES++))
          fi
          
          if [[ "$FRONTEND_STATUS" == "success" ]]; then
            echo "‚úÖ **Frontend Build:** Build and tests successful" >> $GITHUB_STEP_SUMMARY
            ((PASSED_GATES++))
          elif [[ "$FRONTEND_STATUS" == "skipped" ]]; then
            echo "‚è≠Ô∏è **Frontend Build:** Skipped (no frontend changes)" >> $GITHUB_STEP_SUMMARY
            ((PASSED_GATES++))
          else
            echo "‚ùå **Frontend Build:** Build or tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$SECURITY_STATUS" == "success" ]]; then
            echo "‚úÖ **Security Scan:** No critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            ((PASSED_GATES++))
          elif [[ "$SECURITY_STATUS" == "skipped" ]]; then
            echo "‚è≠Ô∏è **Security Scan:** Skipped (branch not eligible)" >> $GITHUB_STEP_SUMMARY
            ((PASSED_GATES++))
          else
            echo "‚ö†Ô∏è **Security Scan:** Some issues found (review required)" >> $GITHUB_STEP_SUMMARY
            ((PASSED_GATES++))
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Quality Gate Score:** ${PASSED_GATES}/${TOTAL_GATES}" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [[ "$JAVA_STATUS" == "success" && "$PASSED_GATES" -ge 3 ]]; then
            echo "üéâ **Overall Status: PASSED** - Ready for next stage!" >> $GITHUB_STEP_SUMMARY
            echo "QUALITY_GATE_STATUS=passed" >> $GITHUB_ENV
          else
            echo "üö´ **Overall Status: FAILED** - Review and fix issues before proceeding" >> $GITHUB_STEP_SUMMARY
            echo "QUALITY_GATE_STATUS=failed" >> $GITHUB_ENV
          fi

      - name: Set quality gate status
        run: |
          if [[ "$QUALITY_GATE_STATUS" == "failed" ]]; then
            echo "Quality gates failed"
            exit 1
          fi

  # Job 6: Prepare for Docker Build (conditional)
  prepare-docker:
    name: üê≥ Prepare Docker Build
    runs-on: ubuntu-latest
    needs: [java-build-test, build-summary]
    if: needs.java-build-test.outputs.should-build-images == 'true' && needs.build-summary.result == 'success' || inputs.build_images
    
    outputs:
      services: ${{ steps.services.outputs.services }}
      version: ${{ needs.java-build-test.outputs.version || '1.0.0-unknown' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Identify services to build
        id: services
        run: |
          # Find all services with Dockerfiles
          services=$(find . -name "Dockerfile" -path "./mcp-*" | sed 's|./\([^/]*\)/.*|\1|' | sort -u | jq -R -s -c 'split("\n")[:-1]')
          echo "services=${services}" >> $GITHUB_OUTPUT
          echo "Services to build: ${services}"

      - name: Download Java artifacts
        uses: actions/download-artifact@v4
        with:
          name: java-artifacts
          path: ./

      - name: Prepare build context
        run: |
          # Create a build context with all necessary files
          mkdir -p build-context
          cp -r mcp-* build-context/ || true
          find . -name "*.jar" -path "./mcp-*" -exec cp {} build-context/ \;
          
          # Copy templates for multi-stage builds
          mkdir -p build-context/templates
          cp -r templates/* build-context/templates/ || true

      - name: Upload build context
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-context
          path: build-context/
          retention-days: 1
          
  # Job 7: Build and Push Docker Images
  docker-build:
    name: üê≥ Docker Build & Push
    needs: [prepare-docker]
    if: needs.prepare-docker.outputs.services != ''
    uses: ./.github/workflows/docker-build.yml
    with:
      version: ${{ needs.prepare-docker.outputs.version }}
      services: ${{ needs.prepare-docker.outputs.services }}
    secrets:
      REGISTRY_USERNAME: ${{ secrets.GITHUB_TOKEN }}
      REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

  # Job 7: Notify on Failure
  notify-failure:
    name: üì¢ Notify Failure
    runs-on: ubuntu-latest
    needs: [java-build-test, code-quality, frontend-build-test, security-scan, build-summary]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Create failure issue
        uses: actions/github-script@v7
        env:
          JAVA_BUILD_RESULT: ${{ needs.java-build-test.result }}
          CODE_QUALITY_RESULT: ${{ needs.code-quality.result }}
          FRONTEND_BUILD_RESULT: ${{ needs.frontend-build-test.result }}
          SECURITY_SCAN_RESULT: ${{ needs.security-scan.result }}
        with:
          script: |
            const title = `CI Pipeline Failed - ${context.ref.replace('refs/heads/', '')} branch`;
            const body = `
            ## üö® CI Pipeline Failure
            
            **Branch:** ${context.ref.replace('refs/heads/', '')}
            **Commit:** ${context.sha.substring(0, 8)}
            **Workflow:** ${context.workflow}
            **Run:** [${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            ### Failed Jobs:
            ${ process.env.JAVA_BUILD_RESULT === 'failure' ? '- ‚ùå Java Build & Test\n' : '' }
            ${ process.env.CODE_QUALITY_RESULT === 'failure' ? '- ‚ùå Code Quality\n' : '' }
            ${ process.env.FRONTEND_BUILD_RESULT === 'failure' ? '- ‚ùå Frontend Build & Test\n' : '' }
            ${ process.env.SECURITY_SCAN_RESULT === 'failure' ? '- ‚ùå Security Scan\n' : '' }
            
            Please investigate and fix the issues.
            
            ---
            *This issue was automatically created by the CI pipeline.*
            `;
            
            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['ci-failure', 'automated']
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('CI Pipeline Failed') && 
              issue.title.includes(context.ref.replace('refs/heads/', ''))
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['ci-failure', 'automated', 'bug']
              });
            }