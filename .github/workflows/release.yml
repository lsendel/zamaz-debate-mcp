name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges ${LAST_TAG}..HEAD)
          fi
          
          # Create changelog
          cat > CHANGELOG.md << EOF
          # Release ${{ steps.get_version.outputs.tag_name }}
          
          ## What's Changed
          
          ${COMMITS}
          
          ## Docker Images
          
          - \`ghcr.io/${{ github.repository }}/mcp-gateway:${{ steps.get_version.outputs.version }}\`
          - \`ghcr.io/${{ github.repository }}/mcp-controller:${{ steps.get_version.outputs.version }}\`
          - \`ghcr.io/${{ github.repository }}/mcp-organization:${{ steps.get_version.outputs.version }}\`
          - \`ghcr.io/${{ github.repository }}/debate-ui:${{ steps.get_version.outputs.version }}\`
          
          ## Installation
          
          \`\`\`bash
          # Using Docker Compose
          curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/${{ steps.get_version.outputs.tag_name }}/docker-compose.yml -o docker-compose.yml
          docker-compose up -d
          
          # Using Kubernetes
          kubectl apply -f https://raw.githubusercontent.com/${{ github.repository }}/${{ steps.get_version.outputs.tag_name }}/k8s/production/
          \`\`\`
          EOF

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          release_name: Release ${{ steps.get_version.outputs.tag_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.tag_name, '-') }}

  build-release-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - service: mcp-gateway
            type: java
          - service: mcp-controller
            type: java
          - service: mcp-organization
            type: java
          - service: debate-ui
            type: frontend
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        if: matrix.type == 'java'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js
        if: matrix.type == 'frontend'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: debate-ui/package-lock.json

      - name: Build Java artifact
        if: matrix.type == 'java'
        run: |
          cd ${{ matrix.service }}
          mvn clean package -DskipTests -B
          mv target/*.jar ../

      - name: Build Frontend artifact
        if: matrix.type == 'frontend'
        run: |
          cd ${{ matrix.service }}
          npm ci
          npm run build
          tar -czf ../debate-ui-build.tar.gz build/

      - name: Upload Java Release Asset
        if: matrix.type == 'java'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.service }}-*.jar
          asset_name: ${{ matrix.service }}-${{ needs.create-release.outputs.tag_name }}.jar
          asset_content_type: application/java-archive

      - name: Upload Frontend Release Asset
        if: matrix.type == 'frontend'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./debate-ui-build.tar.gz
          asset_name: debate-ui-${{ needs.create-release.outputs.tag_name }}.tar.gz
          asset_content_type: application/gzip

  build-release-images:
    name: Build Release Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        service: [mcp-gateway, mcp-controller, mcp-organization, debate-ui]
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js for frontend build
        if: matrix.service == 'debate-ui'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: debate-ui/package-lock.json

      - name: Build frontend
        if: matrix.service == 'debate-ui'
        run: |
          cd debate-ui
          npm ci
          npm run build

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  create-deployment-manifests:
    name: Create Deployment Manifests
    runs-on: ubuntu-latest
    needs: [create-release, build-release-images]
    
    steps:
      - uses: actions/checkout@v4

      - name: Update image tags in manifests
        run: |
          VERSION=${{ needs.create-release.outputs.tag_name }}
          VERSION=${VERSION#v} # Remove 'v' prefix
          
          # Update Kubernetes manifests
          find k8s/ -name "*.yaml" -exec sed -i "s|image: ghcr.io/${{ github.repository }}/.*:.*|image: ghcr.io/${{ github.repository }}/\1:${VERSION}|g" {} \;
          
          # Update Docker Compose
          sed -i "s|image: ghcr.io/${{ github.repository }}/.*:.*|image: ghcr.io/${{ github.repository }}/\1:${VERSION}|g" docker-compose.yml

      - name: Create deployment package
        run: |
          tar -czf deployment-manifests.tar.gz k8s/ docker-compose.yml scripts/

      - name: Upload Deployment Manifests
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./deployment-manifests.tar.gz
          asset_name: deployment-manifests-${{ needs.create-release.outputs.tag_name }}.tar.gz
          asset_content_type: application/gzip

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-release-artifacts, build-release-images]
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              channel: '#releases',
              username: 'Release Bot',
              icon_emoji: ':rocket:',
              attachments: [{
                color: 'good',
                title: 'New Release: ${{ needs.create-release.outputs.tag_name }}',
                title_link: 'https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.tag_name }}',
                fields: [
                  {
                    title: 'Repository',
                    value: '${{ github.repository }}',
                    short: true
                  },
                  {
                    title: 'Release',
                    value: '${{ needs.create-release.outputs.tag_name }}',
                    short: true
                  }
                ],
                text: 'Docker images and deployment manifests are available.'
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Automated Workflow Failure Handler
  handle-release-failure:
    name: Handle Release Failure
    if: failure()
    needs: [create-release, build-release-artifacts, build-release-images, create-deployment-manifests, notify-release]
    uses: ./.github/workflows/workflow-failure-handler.yml
    with:
      workflow-name: "Release"
      # Critical severity for release failures
      severity: "critical"
      assignees: "release-manager,team-lead,devops-team"
      # Comprehensive labels
      labels: ${{ format('workflow-failure,release,critical,{0}{1}{2}{3}', (needs.create-release.result == 'failure' && 'release-creation,' || ''), (needs.build-release-artifacts.result == 'failure' && 'build-artifacts,' || ''), (needs.build-release-images.result == 'failure' && 'docker-build,' || ''), (needs.create-release.outputs.tag_name || github.ref_name)) }}
      template: "deployment"
      # Always notify for release issues
      notify-slack: true
      notify-email: true
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASS: ${{ secrets.SMTP_PASS }}
      TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK }}