name: Workflow Health Monitor

on:
  workflow_run:
    workflows: 
      - "Security Scanning"
      - "CI/CD Pipeline"
      - "Code Quality"
      - "Docker Build"
      - "Database Migration"
    types:
      - completed

permissions:
  issues: write
  actions: read

jobs:
  check-workflow-health:
    name: Check Workflow Health
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event.workflow_run.conclusion == 'startup_failure' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          cd .github/actions/failure-detector
          npm install
          
          cd ../../scripts
          npm install
          
      - name: Create startup failure issue
        env:
          GITHUB_TOKEN: ${{ github.token }}
          WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
          WORKFLOW_ID: ${{ github.event.workflow_run.id }}
          WORKFLOW_URL: ${{ github.event.workflow_run.html_url }}
          WORKFLOW_CONCLUSION: ${{ github.event.workflow_run.conclusion }}
          WORKFLOW_BRANCH: ${{ github.event.workflow_run.head_branch }}
          WORKFLOW_SHA: ${{ github.event.workflow_run.head_sha }}
          WORKFLOW_ACTOR: ${{ github.event.workflow_run.actor.login }}
        run: |
          # Load configuration for the workflow
          CONFIG_FILE=".github/config/workflow-issue-config.yml"
          SEVERITY="critical"
          ASSIGNEES=""
          LABELS="workflow-failure,startup-failure"
          
          if [ -f "$CONFIG_FILE" ]; then
            # Extract configuration for this workflow
            WORKFLOW_CONFIG=$(cd .github/scripts && node -e "
              const yaml = require('js-yaml');
              const fs = require('fs');
              const config = yaml.load(fs.readFileSync('../../$CONFIG_FILE', 'utf8'));
              const workflowConfig = config.workflows['$WORKFLOW_NAME'] || {};
              console.log(JSON.stringify(workflowConfig));
            ")
            
            SEVERITY=$(echo "$WORKFLOW_CONFIG" | jq -r '.severity // "high"')
            ASSIGNEES=$(echo "$WORKFLOW_CONFIG" | jq -r '.assignees // [] | join(",")')
            LABELS=$(echo "$WORKFLOW_CONFIG" | jq -r '.labels // ["workflow-failure","startup-failure"] | join(",")')
          fi
          
          # Create issue data for startup failure
          ISSUE_DATA=$(cat <<EOF
          {
            "workflow": {
              "name": "$WORKFLOW_NAME",
              "id": "$WORKFLOW_ID",
              "runId": "$WORKFLOW_ID",
              "url": "$WORKFLOW_URL",
              "triggeredBy": "$WORKFLOW_ACTOR",
              "branch": "$WORKFLOW_BRANCH",
              "commit": {
                "sha": "$WORKFLOW_SHA"
              }
            },
            "failure": {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "jobs": [],
              "severity": "$SEVERITY",
              "category": "startup-failure",
              "errorPatterns": ["startup-failure"],
              "analysis": {
                "commonPatterns": {"startup-failure": 1},
                "likelyRootCause": "startup-failure",
                "suggestedActions": [
                  "Check workflow YAML syntax for errors",
                  "Verify all required secrets are configured",
                  "Check if workflow uses valid action versions",
                  "Ensure workflow has proper permissions",
                  "Review recent changes to workflow file"
                ]
              }
            },
            "context": {
              "environment": "production"
            },
            "labels": ["$LABELS"],
            "assignees": ["$ASSIGNEES"]
          }
          EOF
          )
          
          # Save issue data
          echo "$ISSUE_DATA" > issue-data.json
          
          # Generate issue content
          ISSUE_TITLE="$WORKFLOW_NAME workflow failed with startup error on $WORKFLOW_BRANCH"
          ISSUE_BODY=$(cat <<EOF
          ## 🚨 Workflow Startup Failure Detected

          The **$WORKFLOW_NAME** workflow failed to start properly.

          > **Status**: 🔴 ACTIVE - 1 failure recorded
          > **First Detected**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          > **Last Updated**: $(date -u +%Y-%m-%dT%H:%M:%SZ)

          ### 📋 Workflow Information
          - **Workflow**: $WORKFLOW_NAME
          - **Run ID**: $WORKFLOW_ID
          - **Branch**: $WORKFLOW_BRANCH
          - **Triggered by**: @$WORKFLOW_ACTOR
          - **Commit**: $WORKFLOW_SHA
          - **Status**: $WORKFLOW_CONCLUSION
          - **URL**: $WORKFLOW_URL

          ### 🔍 Failure Analysis
          This is a **startup failure**, which means the workflow failed before any jobs could run. This is typically caused by:

          1. **Syntax errors** in the workflow YAML file
          2. **Missing or misconfigured secrets**
          3. **Invalid action references** or versions
          4. **Permission issues** with the workflow
          5. **Recent changes** that broke the workflow configuration

          ### 🛠️ Suggested Actions
          1. Check the workflow file for YAML syntax errors
          2. Verify all required secrets are properly configured in repository settings
          3. Ensure all action references use valid versions
          4. Check if the workflow has the required permissions
          5. Review recent commits that modified the workflow file

          ### 📊 Severity
          **Severity**: $SEVERITY

          This is a critical issue as the workflow cannot run at all, potentially blocking important security scans or CI/CD processes.

          ---
          *This issue was automatically created by the Workflow Health Monitor*
          EOF
          )
          
          # Check for existing open issues for this workflow
          echo "Checking for existing issues for workflow: $WORKFLOW_NAME"
          
          # Search for open issues with the workflow name in title
          SEARCH_QUERY="\"$WORKFLOW_NAME workflow failed\" in:title state:open"
          EXISTING_ISSUES=$(gh issue list --search "$SEARCH_QUERY" --json number,title,createdAt,body --limit 10)
          
          # Get the most recent open issue
          LATEST_ISSUE=$(echo "$EXISTING_ISSUES" | jq -r 'sort_by(.createdAt) | reverse | .[0].number // empty')
          
          if [ -n "$LATEST_ISSUE" ]; then
            echo "Found existing open issue #$LATEST_ISSUE"
            
            # Check last comment time to avoid spam (minimum 5 minutes between updates)
            LAST_COMMENT_TIME=$(gh issue view "$LATEST_ISSUE" --json comments --jq '.comments[-1].createdAt // empty')
            if [ -n "$LAST_COMMENT_TIME" ]; then
              LAST_COMMENT_EPOCH=$(date -d "$LAST_COMMENT_TIME" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$LAST_COMMENT_TIME" +%s 2>/dev/null || echo 0)
              CURRENT_EPOCH=$(date +%s)
              TIME_DIFF=$((CURRENT_EPOCH - LAST_COMMENT_EPOCH))
              
              if [ "$TIME_DIFF" -lt 300 ]; then
                echo "Last update was less than 5 minutes ago, skipping to avoid spam"
                exit 0
              fi
            fi
            
            # Count previous failures mentioned in the issue
            FAILURE_COUNT=$(gh issue view "$LATEST_ISSUE" --json comments --jq '.comments | length')
            FAILURE_COUNT=$((FAILURE_COUNT + 2))  # +2 because we count the initial issue as #1
            
            # Add detailed comment about the new failure
            COMMENT_BODY=$(cat <<EOF
            ## 🔄 Failure #$FAILURE_COUNT

            The **$WORKFLOW_NAME** workflow has failed again.

            ### 📋 Failure Details
            - **Run**: [#$WORKFLOW_ID]($WORKFLOW_URL)
            - **Time**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
            - **Branch**: $WORKFLOW_BRANCH
            - **Commit**: \`$WORKFLOW_SHA\`
            - **Triggered by**: @$WORKFLOW_ACTOR
            - **Conclusion**: $WORKFLOW_CONCLUSION

            ### 📊 Failure Pattern
            This is occurrence **#$FAILURE_COUNT** of this issue. The workflow continues to fail with startup errors.

            ---
            *Automated update by Workflow Health Monitor*
            EOF
            )
            
            gh issue comment "$LATEST_ISSUE" --body "$COMMENT_BODY"
            echo "Added comment to issue #$LATEST_ISSUE"
            
            # Update issue title to reflect ongoing status
            UPDATED_TITLE="$WORKFLOW_NAME workflow failed - $FAILURE_COUNT occurrences [ACTIVE]"
            gh issue edit "$LATEST_ISSUE" --title "$UPDATED_TITLE"
            echo "Updated issue title to reflect $FAILURE_COUNT failures"
            
            # Also update the issue body to reflect current status
            ORIGINAL_BODY=$(gh issue view "$LATEST_ISSUE" --json body --jq '.body')
            FIRST_DETECTED=$(echo "$ORIGINAL_BODY" | grep -oP '(?<=First Detected\**: )[\dT:\-Z]+' || echo "Unknown")
            
            # Update the status section in the body
            UPDATED_BODY=$(echo "$ORIGINAL_BODY" | sed -E "s/> \*\*Status\*\*: .*/> **Status**: 🔴 ACTIVE - $FAILURE_COUNT failures recorded/" | sed -E "s/> \*\*Last Updated\*\*: .*/> **Last Updated**: $(date -u +%Y-%m-%dT%H:%M:%SZ)/")
            
            # Update the issue body
            gh issue edit "$LATEST_ISSUE" --body "$UPDATED_BODY"
            
            # Close any older duplicate issues
            OTHER_ISSUES=$(echo "$EXISTING_ISSUES" | jq -r --arg latest "$LATEST_ISSUE" '.[] | select(.number != ($latest | tonumber)) | .number')
            if [ -n "$OTHER_ISSUES" ]; then
              echo "Found duplicate issues to close: $OTHER_ISSUES"
              for issue in $OTHER_ISSUES; do
                echo "Closing duplicate issue #$issue"
                gh issue close "$issue" --comment "Consolidated into #$LATEST_ISSUE - This is a duplicate of the main tracking issue."
              done
            fi
          else
            echo "Creating new issue..."
            # Create issue, handling missing assignees and labels gracefully
            CREATE_ARGS="--title \"$ISSUE_TITLE\" --body \"$ISSUE_BODY\""
            
            # Try with both labels and assignees first
            if [ -n "$LABELS" ] && [ -n "$ASSIGNEES" ]; then
              ISSUE_URL=$(gh issue create \
                --title "$ISSUE_TITLE" \
                --body "$ISSUE_BODY" \
                --label "$LABELS" \
                --assignee "$ASSIGNEES" 2>&1) || {
                echo "Failed with labels and assignees, trying without assignees..."
                ISSUE_URL=$(gh issue create \
                  --title "$ISSUE_TITLE" \
                  --body "$ISSUE_BODY" \
                  --label "$LABELS" 2>&1) || {
                  echo "Failed with labels, trying without any..."
                  ISSUE_URL=$(gh issue create \
                    --title "$ISSUE_TITLE" \
                    --body "$ISSUE_BODY")
                }
              }
            elif [ -n "$LABELS" ]; then
              ISSUE_URL=$(gh issue create \
                --title "$ISSUE_TITLE" \
                --body "$ISSUE_BODY" \
                --label "$LABELS" 2>&1) || {
                echo "Failed with labels, creating without..."
                ISSUE_URL=$(gh issue create \
                  --title "$ISSUE_TITLE" \
                  --body "$ISSUE_BODY")
              }
            else
              ISSUE_URL=$(gh issue create \
                --title "$ISSUE_TITLE" \
                --body "$ISSUE_BODY")
            fi
            echo "Created issue: $ISSUE_URL"
          fi
          
      - name: Send notifications
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SECURITY_SLACK_WEBHOOK || secrets.SLACK_WEBHOOK }}
          WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
          WORKFLOW_URL: ${{ github.event.workflow_run.html_url }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST "$SLACK_WEBHOOK" \
              -H 'Content-Type: application/json' \
              -d "{
                \"text\": \"🚨 Workflow Startup Failure: $WORKFLOW_NAME\",
                \"blocks\": [
                  {
                    \"type\": \"section\",
                    \"text\": {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*🚨 Workflow Startup Failure Detected*\\n\\nThe *$WORKFLOW_NAME* workflow failed to start.\\n\\n<$WORKFLOW_URL|View Workflow Run>\"
                    }
                  }
                ]
              }"
          fi