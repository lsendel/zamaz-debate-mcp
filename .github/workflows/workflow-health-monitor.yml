name: Workflow Health Monitor

on:
  workflow_run:
    workflows: 
      - "Security Scanning"
      - "CI/CD Pipeline"
      - "Code Quality"
      - "Docker Build"
      - "Database Migration"
    types:
      - completed

permissions:
  issues: write
  actions: read

jobs:
  check-workflow-health:
    name: Check Workflow Health
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event.workflow_run.conclusion == 'startup_failure' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install required tools
        run: |
          # Install jq for JSON processing
          sudo apt-get update
          sudo apt-get install -y jq
          
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh
          
          # Verify installations
          jq --version
          gh --version
          
      - name: Install dependencies
        run: |
          # Create a local node_modules in current directory for js-yaml
          npm init -y
          npm install js-yaml @actions/core @actions/github
          
          # Install npm dependencies for failure detector
          if [ -d ".github/actions/failure-detector" ]; then
            echo "Installing failure-detector dependencies..."
            cd .github/actions/failure-detector
            npm install
            cd -
          fi
          
          # Install npm dependencies for scripts
          if [ -d ".github/scripts" ]; then
            echo "Installing scripts dependencies..."
            cd .github/scripts
            npm install
            cd -
          fi
          
          # Verify js-yaml is available locally
          node -e "console.log('js-yaml available:', require('js-yaml').VERSION || 'installed')"
          
      - name: Debug workflow context
        run: |
          echo "=== Workflow Debug Information ==="
          echo "Workflow Name: ${{ github.event.workflow_run.name }}"
          echo "Workflow ID: ${{ github.event.workflow_run.id }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Actor: ${{ github.event.workflow_run.actor.login }}"
          echo "Repository: ${{ github.repository }}"
          echo "=== Environment Check ==="
          which jq && jq --version
          which gh && gh --version
          which node && node --version
          which npm && npm --version
          echo "=== Directory Structure ==="
          ls -la .github/
          ls -la .github/config/ 2>/dev/null || echo "No config directory"
          ls -la .github/scripts/ 2>/dev/null || echo "No scripts directory"
          
      - name: Create startup failure issue
        env:
          GITHUB_TOKEN: ${{ github.token }}
          WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
          WORKFLOW_ID: ${{ github.event.workflow_run.id }}
          WORKFLOW_URL: ${{ github.event.workflow_run.html_url }}
          WORKFLOW_CONCLUSION: ${{ github.event.workflow_run.conclusion }}
          WORKFLOW_BRANCH: ${{ github.event.workflow_run.head_branch }}
          WORKFLOW_SHA: ${{ github.event.workflow_run.head_sha }}
          WORKFLOW_ACTOR: ${{ github.event.workflow_run.actor.login }}
        run: |
          set -e  # Exit on any error
          echo "=== Starting issue creation process ==="
          
          # Load configuration for the workflow
          CONFIG_FILE=".github/config/workflow-issue-config.yml"
          SEVERITY="critical"
          ASSIGNEES=""
          LABELS="workflow-failure,startup-failure"
          
          if [ -f "$CONFIG_FILE" ]; then
            echo "Loading configuration from $CONFIG_FILE"
            
            # Extract configuration for this workflow
            echo "Attempting to load workflow configuration..."
            CONFIG_PATH="$(pwd)/$CONFIG_FILE"
            echo "Full config path: $CONFIG_PATH"
            
            # Use a simpler approach without js-yaml for now
            echo "Attempting simple config parsing for workflow: $WORKFLOW_NAME"
            if [ "$WORKFLOW_NAME" = "Security Scanning" ]; then
              SEVERITY="high"
              ASSIGNEES="security-team,team-lead"
              LABELS="security,compliance,workflow-failure"
              echo "Using hardcoded Security Scanning config"
            elif [ "$WORKFLOW_NAME" = "CI/CD Pipeline" ]; then
              SEVERITY="critical"
              ASSIGNEES="backend-team,devops-team,platform-lead"
              LABELS="ci-cd,critical,workflow-failure"
              echo "Using hardcoded CI/CD Pipeline config"
            elif [ "$WORKFLOW_NAME" = "Code Quality" ]; then
              SEVERITY="medium"
              ASSIGNEES="code-quality-team,dev-team"
              LABELS="code-quality,workflow-failure,technical-debt"
              echo "Using hardcoded Code Quality config"
            else
              echo "Using default config for workflow: $WORKFLOW_NAME"
              SEVERITY="high"
              ASSIGNEES=""
              LABELS="workflow-failure,startup-failure"
            fi
            
            echo "Final config - Severity: $SEVERITY, Assignees: $ASSIGNEES, Labels: $LABELS"
            
            # Try YAML parsing as fallback (but don't fail if it doesn't work)
            if false; then  # Disabled for now
            WORKFLOW_CONFIG=$(node -e "
              try {
                const yaml = require('js-yaml');
                const fs = require('fs');
                const path = require('path');
                const configPath = process.env.CONFIG_PATH || '$CONFIG_PATH';
                console.error('Reading config from:', configPath);
                
                if (!fs.existsSync(configPath)) {
                  console.error('Config file not found:', configPath);
                  process.exit(1);
                }
                
                const config = yaml.load(fs.readFileSync(configPath, 'utf8'));
                const workflowName = process.env.WORKFLOW_NAME || '$WORKFLOW_NAME';
                const workflowConfig = config.workflows[workflowName] || {};
                console.log(JSON.stringify(workflowConfig));
              } catch (error) {
                console.error('Error loading config:', error.message);
                console.error('Stack:', error.stack);
                process.exit(1);
              }
            " 2>/dev/null); then
              echo "Configuration loaded successfully: $WORKFLOW_CONFIG"
              
              SEVERITY=$(echo "$WORKFLOW_CONFIG" | jq -r '.severity // "high"' 2>/dev/null || echo "high")
              ASSIGNEES=$(echo "$WORKFLOW_CONFIG" | jq -r '.assignees // [] | join(",")' 2>/dev/null || echo "")
              LABELS=$(echo "$WORKFLOW_CONFIG" | jq -r '.labels // ["workflow-failure","startup-failure"] | join(",")' 2>/dev/null || echo "workflow-failure,startup-failure")
              
              echo "Parsed - Severity: $SEVERITY, Assignees: $ASSIGNEES, Labels: $LABELS"
            else
              echo "Failed to load configuration, using defaults"
              echo "Error details:"
              node -e "
                try {
                  const yaml = require('js-yaml');
                  const fs = require('fs');
                  const configPath = '$CONFIG_PATH';
                  console.log('Config file exists:', fs.existsSync(configPath));
                  if (fs.existsSync(configPath)) {
                    const content = fs.readFileSync(configPath, 'utf8');
                    console.log('Config file size:', content.length, 'bytes');
                    const config = yaml.load(content);
                    console.log('Available workflows:', Object.keys(config.workflows || {}));
                  }
                } catch (error) {
                  console.log('Debug error:', error.message);
                }
              " 2>/dev/null || echo "Node.js debug failed"
            fi
          else
            echo "Configuration file $CONFIG_FILE not found, using defaults"
          fi
          
          # Create issue data for startup failure
          ISSUE_DATA=$(cat <<"EOF"
          {
            "workflow": {
              "name": "$WORKFLOW_NAME",
              "id": "$WORKFLOW_ID",
              "runId": "$WORKFLOW_ID",
              "url": "$WORKFLOW_URL",
              "triggeredBy": "$WORKFLOW_ACTOR",
              "branch": "$WORKFLOW_BRANCH",
              "commit": {
                "sha": "$WORKFLOW_SHA"
              }
            },
            "failure": {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "jobs": [],
              "severity": "$SEVERITY",
              "category": "startup-failure",
              "errorPatterns": ["startup-failure"],
              "analysis": {
                "commonPatterns": {"startup-failure": 1},
                "likelyRootCause": "startup-failure",
                "suggestedActions": [
                  "Check workflow YAML syntax for errors",
                  "Verify all required secrets are configured",
                  "Check if workflow uses valid action versions",
                  "Ensure workflow has proper permissions",
                  "Review recent changes to workflow file"
                ]
              }
            },
            "context": {
              "environment": "production"
            },
            "labels": ["$LABELS"],
            "assignees": ["$ASSIGNEES"]
          }
          EOF
          )
          
          # Save issue data
          echo "$ISSUE_DATA" > issue-data.json
          
          # Generate issue content
          ISSUE_TITLE="$WORKFLOW_NAME workflow failed with startup error on $WORKFLOW_BRANCH"
          CURRENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          # Build issue body with proper variable expansion
          ISSUE_BODY="## 🚨 Workflow Startup Failure Detected

The **$WORKFLOW_NAME** workflow failed to start properly.

> **Status**: 🔴 ACTIVE - 1 failure recorded
> **First Detected**: $CURRENT_TIME
> **Last Updated**: $CURRENT_TIME

### 📋 Workflow Information
- **Workflow**: $WORKFLOW_NAME
- **Run ID**: $WORKFLOW_ID
- **Branch**: $WORKFLOW_BRANCH
- **Triggered by**: @$WORKFLOW_ACTOR
- **Commit**: $WORKFLOW_SHA
- **Status**: $WORKFLOW_CONCLUSION
- **URL**: $WORKFLOW_URL

### 🔍 Failure Analysis
This is a **startup failure**, which means the workflow failed before any jobs could run. This is typically caused by:

1. **Syntax errors** in the workflow YAML file
2. **Missing or misconfigured secrets**
3. **Invalid action references** or versions
4. **Permission issues** with the workflow
5. **Recent changes** that broke the workflow configuration

### 🛠️ Suggested Actions
1. Check the workflow file for YAML syntax errors
2. Verify all required secrets are properly configured in repository settings
3. Ensure all action references use valid versions
4. Check if the workflow has the required permissions
5. Review recent commits that modified the workflow file

### 📊 Severity
**Severity**: $SEVERITY

This is a critical issue as the workflow cannot run at all, potentially blocking important security scans or CI/CD processes.

---
*This issue was automatically created by the Workflow Health Monitor*"
          
          # Check for existing open issues for this workflow
          echo "Checking for existing issues for workflow: $WORKFLOW_NAME"
          
          # Search for open issues with the workflow name in title
          SEARCH_QUERY="\"$WORKFLOW_NAME workflow failed\" in:title state:open"
          echo "Search query: $SEARCH_QUERY"
          
          # Try to get existing issues, with error handling
          if EXISTING_ISSUES=$(gh issue list --search "$SEARCH_QUERY" --json number,title,createdAt,body --limit 10 2>&1); then
            echo "Successfully retrieved issue list"
            echo "Raw issues response: $EXISTING_ISSUES"
            
            # Get the most recent open issue
            if LATEST_ISSUE=$(echo "$EXISTING_ISSUES" | jq -r 'sort_by(.createdAt) | reverse | .[0].number // empty' 2>/dev/null); then
              echo "Latest issue number: $LATEST_ISSUE"
            else
              echo "Failed to parse issues with jq, will create new issue"
              LATEST_ISSUE=""
            fi
          else
            echo "Failed to retrieve existing issues: $EXISTING_ISSUES"
            echo "Will proceed to create new issue"
            LATEST_ISSUE=""
          fi
          
          if [ -n "$LATEST_ISSUE" ]; then
            echo "Found existing open issue #$LATEST_ISSUE"
            
            # Check last comment time to avoid spam (minimum 5 minutes between updates)
            echo "Checking last comment time for issue #$LATEST_ISSUE"
            if LAST_COMMENT_TIME=$(gh issue view "$LATEST_ISSUE" --json comments --jq '.comments[-1].createdAt // empty' 2>&1); then
              echo "Last comment time: $LAST_COMMENT_TIME"
              if [ -n "$LAST_COMMENT_TIME" ] && [ "$LAST_COMMENT_TIME" != "null" ] && [ "$LAST_COMMENT_TIME" != "empty" ]; then
                LAST_COMMENT_EPOCH=$(date -d "$LAST_COMMENT_TIME" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$LAST_COMMENT_TIME" +%s 2>/dev/null || echo 0)
                CURRENT_EPOCH=$(date +%s)
                TIME_DIFF=$((CURRENT_EPOCH - LAST_COMMENT_EPOCH))
                
                echo "Time since last comment: $TIME_DIFF seconds"
                if [ "$TIME_DIFF" -lt 300 ]; then
                  echo "Last update was less than 5 minutes ago, skipping to avoid spam"
                  exit 0
                fi
              else
                echo "No previous comments found or failed to parse timestamp"
              fi
            else
              echo "Failed to get comment information: $LAST_COMMENT_TIME"
              echo "Proceeding with update anyway"
            fi
            
            # Count previous failures mentioned in the issue
            echo "Counting previous failures for issue #$LATEST_ISSUE"
            if FAILURE_COUNT=$(gh issue view "$LATEST_ISSUE" --json comments --jq '.comments | length' 2>&1); then
              FAILURE_COUNT=$((FAILURE_COUNT + 2))  # +2 because we count the initial issue as #1
              echo "Previous failure count: $FAILURE_COUNT"
            else
              echo "Failed to get failure count: $FAILURE_COUNT"
              FAILURE_COUNT=2  # Default to 2 (first failure + this one)
              echo "Using default failure count: $FAILURE_COUNT"
            fi
            
            # Add detailed comment about the new failure
            COMMENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            COMMENT_BODY="## 🔄 Failure #$FAILURE_COUNT

The **$WORKFLOW_NAME** workflow has failed again.

### 📋 Failure Details
- **Run**: [#$WORKFLOW_ID]($WORKFLOW_URL)
- **Time**: $COMMENT_TIME
- **Branch**: $WORKFLOW_BRANCH
- **Commit**: \`$WORKFLOW_SHA\`
- **Triggered by**: @$WORKFLOW_ACTOR
- **Conclusion**: $WORKFLOW_CONCLUSION

### 📊 Failure Pattern
This is occurrence **#$FAILURE_COUNT** of this issue. The workflow continues to fail with startup errors.

---
*Automated update by Workflow Health Monitor*"
            
            echo "Adding comment to issue #$LATEST_ISSUE"
            if gh issue comment "$LATEST_ISSUE" --body "$COMMENT_BODY" 2>&1; then
              echo "Successfully added comment to issue #$LATEST_ISSUE"
            else
              echo "Failed to add comment to issue #$LATEST_ISSUE"
              echo "Comment content:"
              echo "$COMMENT_BODY"
            fi
            
            # Update issue title to reflect ongoing status
            UPDATED_TITLE="$WORKFLOW_NAME workflow failed - $FAILURE_COUNT occurrences [ACTIVE]"
            echo "Updating issue title to: $UPDATED_TITLE"
            if gh issue edit "$LATEST_ISSUE" --title "$UPDATED_TITLE" 2>&1; then
              echo "Successfully updated issue title to reflect $FAILURE_COUNT failures"
            else
              echo "Failed to update issue title"
            fi
            
            # Also update the issue body to reflect current status
            echo "Updating issue body with current status"
            if ORIGINAL_BODY=$(gh issue view "$LATEST_ISSUE" --json body --jq '.body' 2>&1); then
              echo "Retrieved original issue body (${#ORIGINAL_BODY} characters)"
              FIRST_DETECTED=$(echo "$ORIGINAL_BODY" | grep -oP '(?<=First Detected\**: )[\dT:\-Z]+' || echo "Unknown")
              
              # Update the status section in the body
              UPDATED_BODY=$(echo "$ORIGINAL_BODY" | sed -E "s/> \*\*Status\*\*: .*/> **Status**: 🔴 ACTIVE - $FAILURE_COUNT failures recorded/" | sed -E "s/> \*\*Last Updated\*\*: .*/> **Last Updated**: $(date -u +%Y-%m-%dT%H:%M:%SZ)/")
              
              # Update the issue body
              if gh issue edit "$LATEST_ISSUE" --body "$UPDATED_BODY" 2>&1; then
                echo "Successfully updated issue body"
              else
                echo "Failed to update issue body"
              fi
            else
              echo "Failed to retrieve original issue body: $ORIGINAL_BODY"
            fi
            
            # Close any older duplicate issues
            echo "Checking for duplicate issues to close"
            if OTHER_ISSUES=$(echo "$EXISTING_ISSUES" | jq -r --arg latest "$LATEST_ISSUE" '.[] | select(.number != ($latest | tonumber)) | .number' 2>/dev/null); then
              if [ -n "$OTHER_ISSUES" ]; then
                echo "Found duplicate issues to close: $OTHER_ISSUES"
                for issue in $OTHER_ISSUES; do
                  echo "Attempting to close duplicate issue #$issue"
                  if gh issue close "$issue" --comment "Consolidated into #$LATEST_ISSUE - This is a duplicate of the main tracking issue." 2>&1; then
                    echo "Successfully closed duplicate issue #$issue"
                  else
                    echo "Failed to close duplicate issue #$issue"
                  fi
                done
              else
                echo "No duplicate issues found to close"
              fi
            else
              echo "Failed to check for duplicate issues"
            fi
          else
            echo "Creating new issue..."
            # Create issue, handling missing assignees and labels gracefully
            CREATE_ARGS="--title \"$ISSUE_TITLE\" --body \"$ISSUE_BODY\""
            
            # Try with both labels and assignees first
            if [ -n "$LABELS" ] && [ -n "$ASSIGNEES" ]; then
              ISSUE_URL=$(gh issue create \
                --title "$ISSUE_TITLE" \
                --body "$ISSUE_BODY" \
                --label "$LABELS" \
                --assignee "$ASSIGNEES" 2>&1) || {
                echo "Failed with labels and assignees, trying without assignees..."
                ISSUE_URL=$(gh issue create \
                  --title "$ISSUE_TITLE" \
                  --body "$ISSUE_BODY" \
                  --label "$LABELS" 2>&1) || {
                  echo "Failed with labels, trying without any..."
                  ISSUE_URL=$(gh issue create \
                    --title "$ISSUE_TITLE" \
                    --body "$ISSUE_BODY")
                }
              }
            elif [ -n "$LABELS" ]; then
              ISSUE_URL=$(gh issue create \
                --title "$ISSUE_TITLE" \
                --body "$ISSUE_BODY" \
                --label "$LABELS" 2>&1) || {
                echo "Failed with labels, creating without..."
                ISSUE_URL=$(gh issue create \
                  --title "$ISSUE_TITLE" \
                  --body "$ISSUE_BODY")
              }
            else
              ISSUE_URL=$(gh issue create \
                --title "$ISSUE_TITLE" \
                --body "$ISSUE_BODY")
            fi
            echo "Created issue: $ISSUE_URL"
          fi
          
      - name: Send notifications
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SECURITY_SLACK_WEBHOOK || secrets.SLACK_WEBHOOK }}
          WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
          WORKFLOW_URL: ${{ github.event.workflow_run.html_url }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST "$SLACK_WEBHOOK" \
              -H 'Content-Type: application/json' \
              -d "{
                \"text\": \"🚨 Workflow Startup Failure: $WORKFLOW_NAME\",
                \"blocks\": [
                  {
                    \"type\": \"section\",
                    \"text\": {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*🚨 Workflow Startup Failure Detected*\\n\\nThe *$WORKFLOW_NAME* workflow failed to start.\\n\\n<$WORKFLOW_URL|View Workflow Run>\"
                    }
                  }
                ]
              }"
          fi