name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: "0 3 * * *"

env:
  NODE_VERSION: "18"
  JAVA_VERSION: "21"

jobs:
  semgrep:
    name: 🔍 Semgrep Code Security
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep security scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/java
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

  java-security:
    name: ☕ Java Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=7 \
            -DskipTestScope=false
        continue-on-error: true

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-report
          path: target/dependency-check-report.html
          retention-days: 30

  frontend-security:
    name: ⚛️ Frontend Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ./debate-ui

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./debate-ui/package-lock.json"

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate --json > audit-results.json || true
          npm audit --audit-level moderate
        continue-on-error: true

      - name: Install SARIF formatter
        run: npm install --no-save @microsoft/eslint-formatter-sarif
        continue-on-error: true

      - name: Run ESLint security rules
        run: |
          if [ -f .eslintrc.security.js ]; then
            npx eslint src \
              --ext .ts,.tsx,.js,.jsx \
              --format @microsoft/eslint-formatter-sarif \
              --output-file eslint-security.sarif \
              --config .eslintrc.security.js || true
          else
            echo "Security ESLint config not found, creating empty SARIF..."
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"ESLint","version":"1.0.0"}},"results":[]}]}' > eslint-security.sarif
          fi
        continue-on-error: true

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ./eslint-security.sarif
          wait-for-processing: true

  secrets-scan:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha || 'main' }}
          head: ${{ github.event.pull_request.head.sha || 'HEAD' }}
          extra_args: --config .trufflehog.yaml --only-verified
        continue-on-error: true

  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [semgrep, java-security, frontend-security, secrets-scan]
    if: always()

    steps:
      - name: Security scan summary
        run: |
          echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Semgrep | ${{ needs.semgrep.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Java Security | ${{ needs.java-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Security | ${{ needs.frontend-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Detection | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
