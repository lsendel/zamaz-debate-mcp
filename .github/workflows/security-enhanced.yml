name: Enhanced Security Scanning

on:
  push:
    branches: [main, develop, 'release/**']
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: "0 3 * * *"
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - sast
          - dast
          - container
          - iac
          - secrets
          - compliance
      severity_threshold:
        description: 'Severity threshold for scanning'
        required: false
        default: 'CRITICAL,HIGH'
        type: choice
        options:
          - CRITICAL
          - CRITICAL,HIGH
          - CRITICAL,HIGH,MEDIUM
          - CRITICAL,HIGH,MEDIUM,LOW
      fail_on_severity:
        description: 'Fail build on severity level'
        required: false
        default: 'CRITICAL'
        type: choice
        options:
          - CRITICAL
          - HIGH
          - MEDIUM
          - LOW
      target_url:
        description: 'Target URL for DAST scanning'
        required: false
        default: 'http://localhost:8080'
        type: string

env:
  NODE_VERSION: "18"
  JAVA_VERSION: "21"
  REGISTRY: ghcr.io
  REGISTRY_BASE: ${{ github.repository_owner }}
  SECURITY_FAIL_THRESHOLD: "7"
  ZAP_TARGET_URL: ${{ inputs.target_url || 'http://localhost:8080' }}
  REPORT_DIR: "security-reports"
  SEVERITY_THRESHOLD: ${{ inputs.severity_threshold || 'CRITICAL,HIGH' }}
  FAIL_ON_SEVERITY: ${{ inputs.fail_on_severity || 'CRITICAL' }}

jobs:
  # SAST: Static Application Security Testing
  sast:
    name: üîç SAST
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ inputs.scan_type == 'all' || inputs.scan_type == 'sast' || github.event_name != 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Run Semgrep security scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/java
            p/typescript
            p/docker
            p/kubernetes
          output: semgrep-results.sarif
          metrics: false
          generate-sarif: true
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

      - name: Run OWASP Dependency Check
        run: |
          mkdir -p ${{ env.REPORT_DIR }}
          mvn -Psecurity \
            --batch-mode --no-transfer-progress \
            org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=${{ env.SECURITY_FAIL_THRESHOLD }} \
            -DskipTestScope=false \
            -DformatsToUse=HTML,JSON,SARIF \
            -DoutputDirectory=${{ env.REPORT_DIR }}
        continue-on-error: true

      - name: Upload OWASP Dependency Check SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.REPORT_DIR }}/dependency-check-report.sarif
          category: owasp-dependency-check

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: java, javascript, typescript
          queries: security-extended

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: codeql

      - name: Upload SAST reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-reports
          path: |
            semgrep-results.sarif
            ${{ env.REPORT_DIR }}/**
          retention-days: 30

  # Container Security Scanning
  container-scan:
    name: üê≥ Container Security
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ inputs.scan_type == 'all' || inputs.scan_type == 'container' || github.event_name != 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Find services with Dockerfiles
        id: find-services
        run: |
          services=$(find . -name "Dockerfile" -path "./mcp-*" | sed 's|./\([^/]*\)/.*|\1|' | sort -u | jq -R -s -c 'split("\n")[:-1]')
          echo "services=${services}" >> $GITHUB_OUTPUT
          echo "Found services: ${services}"

      - name: Build Docker images for scanning
        run: |
          mkdir -p ${{ env.REPORT_DIR }}/container-scan
          for service in $(echo '${{ steps.find-services.outputs.services }}' | jq -r '.[]'); do
            echo "Building ${service} for scanning..."
            docker build -t ${{ env.REGISTRY }}/${{ env.REGISTRY_BASE }}/${service}:scan -f ${service}/Dockerfile .
          done

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.0

      - name: Scan Docker images with Trivy
        run: |
          for service in $(echo '${{ steps.find-services.outputs.services }}' | jq -r '.[]'); do
            echo "Scanning ${service}..."
            trivy image \
              --format sarif \
              --output ${{ env.REPORT_DIR }}/container-scan/${service}-scan.sarif \
              --severity HIGH,CRITICAL \
              ${{ env.REGISTRY }}/${{ env.REGISTRY_BASE }}/${service}:scan
            
            # Also generate human-readable report
            trivy image \
              --format table \
              --output ${{ env.REPORT_DIR }}/container-scan/${service}-scan.txt \
              --severity HIGH,CRITICAL \
              ${{ env.REGISTRY }}/${{ env.REGISTRY_BASE }}/${service}:scan
          done

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.REPORT_DIR }}/container-scan
          category: trivy-container-scan

      - name: Generate SBOM for each image
        run: |
          mkdir -p ${{ env.REPORT_DIR }}/sbom
          for service in $(echo '${{ steps.find-services.outputs.services }}' | jq -r '.[]'); do
            echo "Generating SBOM for ${service}..."
            trivy image \
              --format cyclonedx \
              --output ${{ env.REPORT_DIR }}/sbom/${service}-sbom.json \
              ${{ env.REGISTRY }}/${{ env.REGISTRY_BASE }}/${service}:scan
          done

      - name: Upload container security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-security-reports
          path: ${{ env.REPORT_DIR }}/container-scan
          retention-days: 30

      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-sboms
          path: ${{ env.REPORT_DIR }}/sbom
          retention-days: 30

  # Infrastructure as Code Security Scanning
  iac-scan:
    name: üèóÔ∏è IaC Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ inputs.scan_type == 'all' || inputs.scan_type == 'iac' || github.event_name != 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Create output directory
        run: mkdir -p ${{ env.REPORT_DIR }}/iac

      - name: Run Checkov scan for Docker files
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile
          output_format: cli,sarif
          output_file_path: ${{ env.REPORT_DIR }}/iac/checkov-docker-results.sarif
          soft_fail: true

      - name: Run Checkov scan for Kubernetes files
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: kubernetes
          output_format: cli,sarif
          output_file_path: ${{ env.REPORT_DIR }}/iac/checkov-k8s-results.sarif
          soft_fail: true

      - name: Run Checkov scan for GitHub Actions
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: github_actions
          output_format: cli,sarif
          output_file_path: ${{ env.REPORT_DIR }}/iac/checkov-github-results.sarif
          soft_fail: true

      - name: Upload Checkov Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.REPORT_DIR }}/iac/checkov-docker-results.sarif
          category: checkov-docker

      - name: Upload Checkov Kubernetes scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.REPORT_DIR }}/iac/checkov-k8s-results.sarif
          category: checkov-kubernetes

      - name: Upload Checkov GitHub Actions scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.REPORT_DIR }}/iac/checkov-github-results.sarif
          category: checkov-github-actions

      - name: Run TFSec for Terraform files
        uses: aquasecurity/tfsec-action@v1.0.3
        if: hashFiles('**/*.tf') != ''
        with:
          soft_fail: true
          format: sarif
          out_file: ${{ env.REPORT_DIR }}/iac/tfsec-results.sarif

      - name: Upload TFSec scan results
        uses: github/codeql-action/upload-sarif@v3
        if: hashFiles('**/*.tf') != ''
        with:
          sarif_file: ${{ env.REPORT_DIR }}/iac/tfsec-results.sarif
          category: tfsec-terraform

      - name: Run Hadolint for Dockerfiles
        run: |
          mkdir -p ${{ env.REPORT_DIR }}/iac
          docker run --rm -v $(pwd):/workspace \
            -w /workspace \
            hadolint/hadolint:latest-debian \
            hadolint --format sarif --output ${{ env.REPORT_DIR }}/iac/hadolint-results.sarif \
            $(find . -name "Dockerfile" | xargs)
        continue-on-error: true

      - name: Upload Hadolint scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.REPORT_DIR }}/iac/hadolint-results.sarif
          category: hadolint-dockerfile

      - name: Run Kubesec for Kubernetes files
        run: |
          mkdir -p ${{ env.REPORT_DIR }}/iac/kubesec
          
          # Find Kubernetes YAML files
          K8S_FILES=$(find . -name "*.yaml" -o -name "*.yml" | xargs grep -l "kind:" | grep -v "node_modules" || echo "")
          
          if [[ -n "$K8S_FILES" ]]; then
            for file in $K8S_FILES; do
              base_name=$(basename "$file")
              echo "Scanning $file with Kubesec"
              docker run --rm -v $(pwd):/workspace \
                -w /workspace \
                kubesec/kubesec:v2 scan "$file" > "${{ env.REPORT_DIR }}/iac/kubesec/${base_name}.json" || true
            done
          else
            echo "No Kubernetes files found for Kubesec scanning"
          fi
        continue-on-error: true

      - name: Generate IaC security summary
        run: |
          mkdir -p ${{ env.REPORT_DIR }}/iac
          
          # Generate timestamp and report ID
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          
          # Create summary report
          cat > ${{ env.REPORT_DIR }}/iac/iac-security-summary-${TIMESTAMP}.md << EOF
          # Infrastructure as Code Security Scan Summary
          
          - **Date:** $(date +"%Y-%m-%d %H:%M:%S")
          - **Repository:** ${{ github.repository }}
          - **Branch:** ${GITHUB_REF#refs/heads/}
          - **Commit:** ${GITHUB_SHA}
          
          ## Scan Results
          
          | Tool | Target | Status |
          |------|--------|--------|
          | Checkov | Dockerfiles | ‚úÖ Completed |
          | Checkov | Kubernetes | ‚úÖ Completed |
          | Checkov | GitHub Actions | ‚úÖ Completed |
          | Hadolint | Dockerfiles | ‚úÖ Completed |
          | TFSec | Terraform | $([ -f "${{ env.REPORT_DIR }}/iac/tfsec-results.sarif" ] && echo "‚úÖ Completed" || echo "‚è≠Ô∏è Skipped") |
          | Kubesec | Kubernetes | ‚úÖ Completed |
          
          ## Security Best Practices
          
          - Use minimal base images for containers
          - Run containers as non-root users
          - Apply least privilege principle in Kubernetes
          - Implement proper secret management
          - Use version pinning for dependencies
          - Implement security context in Kubernetes pods
          - Scan IaC files regularly as part of CI/CD
          
          ## Next Steps
          
          1. Review detailed scan reports
          2. Address high and critical severity issues
          3. Implement security best practices
          4. Run regular security scans
          
          EOF

      - name: Upload IaC security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: iac-security-reports
          path: ${{ env.REPORT_DIR }}/iac
          retention-days: 30

  # Secrets Detection
  secrets-scan:
    name: üîê Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ inputs.scan_type == 'all' || inputs.scan_type == 'secrets' || github.event_name != 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json
          output: ${{ env.REPORT_DIR }}/trufflehog-results.json

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .github/gitleaks.toml
          format: sarif
          report-path: ${{ env.REPORT_DIR }}/gitleaks-results.sarif
        continue-on-error: true

      - name: Upload GitLeaks scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.REPORT_DIR }}/gitleaks-results.sarif
          category: gitleaks-secrets

      - name: Upload secrets scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secrets-scan-reports
          path: ${{ env.REPORT_DIR }}
          retention-days: 30

  # DAST: Dynamic Application Security Testing
  dast:
    name: üï∏Ô∏è DAST
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ inputs.scan_type == 'all' || inputs.scan_type == 'dast' || github.event_name == 'schedule' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start application for testing
        run: |
          # This is a placeholder - in a real scenario, you would start your application
          # using docker-compose or similar, and wait for it to be ready
          echo "Starting application for DAST testing..."
          # docker-compose up -d
          # sleep 30  # Wait for application to start

      - name: Create output directory
        run: mkdir -p ${{ env.REPORT_DIR }}/dast

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: ${{ env.ZAP_TARGET_URL }}
          rules_file_name: '.github/zap-rules.tsv'
          cmd_options: '-a -j'
          allow_issue_writing: false
          fail_action: false

      - name: Check for OpenAPI/Swagger specs
        id: find-api-specs
        run: |
          API_SPECS=$(find . -name "*.json" -o -name "*.yaml" -o -name "*.yml" | xargs grep -l "openapi\|swagger" | head -n 5 || echo "")
          if [[ -n "$API_SPECS" ]]; then
            echo "specs=$(echo "$API_SPECS" | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
            echo "Found API specs: $API_SPECS"
          else
            echo "No API specs found"
          fi

      - name: ZAP API Scan
        if: steps.find-api-specs.outputs.specs != ''
        uses: zaproxy/action-api-scan@v0.5.0
        with:
          target: ${{ env.ZAP_TARGET_URL }}
          format: openapi
          file: ${{ fromJson(steps.find-api-specs.outputs.specs)[0] }}
          fail_action: false
          cmd_options: '-a -j'

      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: ${{ env.ZAP_TARGET_URL }}
          rules_file_name: '.github/zap-rules.tsv'
          cmd_options: '-a -j'
          allow_issue_writing: false
          fail_action: false

      - name: Generate SARIF from ZAP results
        run: |
          # Install sarif-tools if needed
          npm install -g @microsoft/sarif-tools

          # Convert ZAP JSON to SARIF format
          if [ -f "zap-full-scan-report.json" ]; then
            zap-to-sarif -f zap-full-scan-report.json -o ${{ env.REPORT_DIR }}/dast/zap-full-scan.sarif || echo "Conversion failed"
          fi
          
          if [ -f "zap-api-scan-report.json" ]; then
            zap-to-sarif -f zap-api-scan-report.json -o ${{ env.REPORT_DIR }}/dast/zap-api-scan.sarif || echo "Conversion failed"
          fi
        continue-on-error: true

      - name: Upload ZAP SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && fileExists('${{ env.REPORT_DIR }}/dast/zap-full-scan.sarif')
        with:
          sarif_file: ${{ env.REPORT_DIR }}/dast/zap-full-scan.sarif
          category: zap-dast
        continue-on-error: true

      - name: Upload ZAP scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-scan-reports
          path: |
            zap-baseline-report.html
            zap-baseline-report.json
            zap-full-scan-report.html
            zap-full-scan-report.json
            zap-api-scan-report.html
            zap-api-scan-report.json
            ${{ env.REPORT_DIR }}/dast/
          retention-days: 30

  # Compliance Reporting
  compliance:
    name: üìã Compliance Reporting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [sast, container-scan, iac-scan, secrets-scan, dast]
    if: always() && (inputs.scan_type == 'all' || inputs.scan_type == 'compliance' || github.event_name != 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Set up directory structure
        run: |
          mkdir -p ${{ env.REPORT_DIR }}/{compliance,sast,container,iac,secrets,dast}
          
          # Copy artifacts to the report directory
          if [ -d "./artifacts/sast-reports" ]; then
            cp -r ./artifacts/sast-reports/* ${{ env.REPORT_DIR }}/sast/ || true
          fi
          
          if [ -d "./artifacts/container-security-reports" ]; then
            cp -r ./artifacts/container-security-reports/* ${{ env.REPORT_DIR }}/container/ || true
          fi
          
          if [ -d "./artifacts/iac-security-reports" ]; then
            cp -r ./artifacts/iac-security-reports/* ${{ env.REPORT_DIR }}/iac/ || true
          fi
          
          if [ -d "./artifacts/secrets-scan-reports" ]; then
            cp -r ./artifacts/secrets-scan-reports/* ${{ env.REPORT_DIR }}/secrets/ || true
          fi
          
          if [ -d "./artifacts/zap-scan-reports" ]; then
            cp -r ./artifacts/zap-scan-reports/* ${{ env.REPORT_DIR }}/dast/ || true
          fi

      - name: Install dependencies for report generation
        run: |
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq
          
          # Install pandoc for HTML report generation
          sudo apt-get install -y pandoc
          
          # Install npm and sarif tools if needed
          if ! command -v npm &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          sudo npm install -g @microsoft/sarif-tools

      - name: Generate comprehensive security report
        run: |
          # Make script executable
          chmod +x ./scripts/monitoring/generate-security-report.sh
          
          # Generate HTML report
          ./scripts/monitoring/generate-security-report.sh \
            --dir ${{ env.REPORT_DIR }} \
            --format html \
            --output ${{ env.REPORT_DIR }}/compliance/comprehensive-security-report.html \
            --title "Comprehensive Security Report - ${{ github.repository }}"
          
          # Generate markdown report
          ./scripts/monitoring/generate-security-report.sh \
            --dir ${{ env.REPORT_DIR }} \
            --format markdown \
            --output ${{ env.REPORT_DIR }}/compliance/comprehensive-security-report.md \
            --title "Comprehensive Security Report - ${{ github.repository }}"
          
          # Generate JSON report
          ./scripts/monitoring/generate-security-report.sh \
            --dir ${{ env.REPORT_DIR }} \
            --format json \
            --output ${{ env.REPORT_DIR }}/compliance/comprehensive-security-report.json \
            --title "Comprehensive Security Report - ${{ github.repository }}"
          
          # Generate summary report
          ./scripts/monitoring/generate-security-report.sh \
            --dir ${{ env.REPORT_DIR }} \
            --format markdown \
            --summary \
            --output ${{ env.REPORT_DIR }}/compliance/security-summary-report.md \
            --title "Security Summary Report - ${{ github.repository }}"
          
          echo "Security reports generated in ${{ env.REPORT_DIR }}/compliance/"

      - name: Generate compliance status report
        run: |
          # Generate timestamp and report ID
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          REPORT_ID=$(echo $GITHUB_SHA | cut -c1-8)
          
          # Create compliance status report
          cat > ${{ env.REPORT_DIR }}/compliance/compliance-status-report-${REPORT_ID}.md << EOF
          # Security Compliance Status Report
          
          - **Report ID:** ${REPORT_ID}
          - **Date:** ${TIMESTAMP}
          - **Repository:** ${{ github.repository }}
          - **Branch:** ${GITHUB_REF#refs/heads/}
          - **Commit:** ${GITHUB_SHA}
          
          ## Security Scan Status
          
          | Scan Type | Status | Details |
          |-----------|--------|---------|
          | SAST | ${{ needs.sast.result }} | Static Application Security Testing |
          | Container Security | ${{ needs.container-scan.result }} | Docker image vulnerability scanning |
          | IaC Security | ${{ needs.iac-scan.result }} | Infrastructure as Code security scanning |
          | Secrets Detection | ${{ needs.secrets-scan.result }} | Detection of secrets and credentials |
          | DAST | ${{ needs.dast.result }} | Dynamic Application Security Testing |
          
          ## Compliance Standards
          
          ### OWASP Top 10 (2021) Coverage
          
          | Category | Status | Implementation |
          |----------|--------|---------------|
          | A01: Broken Access Control | ‚úÖ Covered | SAST, DAST scans, security annotations |
          | A02: Cryptographic Failures | ‚úÖ Covered | SAST, dependency scans, TLS configuration |
          | A03: Injection | ‚úÖ Covered | SAST, DAST scans, input validation |
          | A04: Insecure Design | ‚ö†Ô∏è Partial | Architecture reviews, threat modeling |
          | A05: Security Misconfiguration | ‚úÖ Covered | IaC scans, container scans, config validation |
          | A06: Vulnerable Components | ‚úÖ Covered | Dependency scans, SBOM generation |
          | A07: Auth Failures | ‚úÖ Covered | SAST, DAST, auth testing |
          | A08: Software & Data Integrity | ‚úÖ Covered | SBOM, container signing, artifact verification |
          | A09: Security Logging | ‚ö†Ô∏è Partial | Logging configuration, monitoring |
          | A10: SSRF | ‚úÖ Covered | SAST, DAST, URL validation |
          
          ### CIS Docker Benchmark Coverage
          
          | Control Area | Status | Implementation |
          |--------------|--------|---------------|
          | Host Configuration | ‚úÖ Covered | IaC scanning, security policies |
          | Docker Daemon Configuration | ‚úÖ Covered | Docker daemon security checks |
          | Docker Daemon Configuration Files | ‚úÖ Covered | File permission checks |
          | Container Images & Build Files | ‚úÖ Covered | Dockerfile scanning, Hadolint |
          | Container Runtime | ‚úÖ Covered | Runtime security checks |
          | Docker Security Operations | ‚ö†Ô∏è Partial | Operational procedures |
          | Docker Swarm Configuration | ‚ö†Ô∏è Partial | Swarm security checks |
          
          ## Security Controls Implementation
          
          | Control | Status | Details |
          |---------|--------|---------|
          | Secure Coding Practices | ‚úÖ Implemented | SAST, code quality checks, secure coding guidelines |
          | Dependency Management | ‚úÖ Implemented | OWASP Dependency Check, NPM Audit, version pinning |
          | Container Security | ‚úÖ Implemented | Trivy scans, Dockerfile best practices, minimal images |
          | Infrastructure Security | ‚úÖ Implemented | Checkov, TFSec, Kubesec, security hardening |
          | Secrets Management | ‚úÖ Implemented | TruffleHog, GitLeaks, secrets rotation |
          | Dynamic Testing | ${{ needs.dast.result == 'success' && '‚úÖ Implemented' || '‚ö†Ô∏è Partial' }} | ZAP scans, API security testing |
          | SBOM Generation | ‚úÖ Implemented | CycloneDX, SPDX formats, dependency tracking |
          | Image Signing | ‚úÖ Implemented | Cosign, signature verification |
          
          ## Audit Trail
          
          - **Workflow Run:** [${GITHUB_WORKFLOW} #${GITHUB_RUN_NUMBER}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})
          - **Triggered By:** ${GITHUB_ACTOR}
          - **Event Type:** ${GITHUB_EVENT_NAME}
          - **Timestamp:** ${TIMESTAMP}
          
          ## Compliance Verification
          
          This report verifies that the codebase has undergone comprehensive security scanning and meets the security requirements defined in the security policy.
          
          For detailed findings and recommendations, please refer to the comprehensive security report.
          EOF
          
          echo "Compliance status report generated: ${{ env.REPORT_DIR }}/compliance/compliance-status-report-${REPORT_ID}.md"

      - name: Upload compliance reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: ${{ env.REPORT_DIR }}/compliance/
          retention-days: 90

  # Security Summary
  security-summary:
    name: üìä Security Summary
    runs-on: ubuntu-latest
    needs: [sast, container-scan, iac-scan, secrets-scan, dast, compliance]
    if: always()

    steps:
      - name: Download compliance reports
        uses: actions/download-artifact@v4
        with:
          name: compliance-reports
          path: ./compliance-reports

      - name: Generate security summary
        run: |
          echo "## üõ°Ô∏è Enhanced Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| SAST | ${{ needs.sast.result }} | Static Application Security Testing |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-scan.result }} | Docker image vulnerability scanning |" >> $GITHUB_STEP_SUMMARY
          echo "| IaC Security | ${{ needs.iac-scan.result }} | Infrastructure as Code security scanning |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Detection | ${{ needs.secrets-scan.result }} | Detection of secrets and credentials |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.dast.result }}" != "skipped" ]]; then
            echo "| DAST | ${{ needs.dast.result }} | Dynamic Application Security Testing |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| Compliance | ${{ needs.compliance.result }} | Security compliance reporting |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Summary" >> $GITHUB_STEP_SUMMARY
          
          # Count passed/failed/skipped scans
          TOTAL=0
          PASSED=0
          FAILED=0
          SKIPPED=0
          
          for result in "${{ needs.sast.result }}" "${{ needs.container-scan.result }}" "${{ needs.iac-scan.result }}" "${{ needs.secrets-scan.result }}" "${{ needs.dast.result }}" "${{ needs.compliance.result }}"; do
            if [[ "$result" != "skipped" ]]; then
              TOTAL=$((TOTAL+1))
              if [[ "$result" == "success" ]]; then
                PASSED=$((PASSED+1))
              elif [[ "$result" == "failure" ]]; then
                FAILED=$((FAILED+1))
              fi
            else
              SKIPPED=$((SKIPPED+1))
            fi
          done
          
          echo "- **Total Scans:** $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed:** $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed:** $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- **Skipped:** $SKIPPED" >> $GITHUB_STEP_SUMMARY
          
          # Add security metrics if available
          if [ -f "./compliance-reports/comprehensive-security-report.json" ]; then
            if command -v jq &> /dev/null; then
              CRITICAL=$(jq -r '.report.summary.totals.critical' ./compliance-reports/comprehensive-security-report.json 2>/dev/null || echo "N/A")
              HIGH=$(jq -r '.report.summary.totals.high' ./compliance-reports/comprehensive-security-report.json 2>/dev/null || echo "N/A")
              MEDIUM=$(jq -r '.report.summary.totals.medium' ./compliance-reports/comprehensive-security-report.json 2>/dev/null || echo "N/A")
              LOW=$(jq -r '.report.summary.totals.low' ./compliance-reports/comprehensive-security-report.json 2>/dev/null || echo "N/A")
              
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### üîí Security Metrics" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
              echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
              echo "| High | $HIGH |" >> $GITHUB_STEP_SUMMARY
              echo "| Medium | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
              echo "| Low | $LOW |" >> $GITHUB_STEP_SUMMARY
              
              RISK_ASSESSMENT=$(jq -r '.report.summary.risk_assessment' ./compliance-reports/comprehensive-security-report.json 2>/dev/null || echo "UNKNOWN")
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Overall Risk Assessment:** $RISK_ASSESSMENT" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Next Steps" >> $GITHUB_STEP_SUMMARY
          
          if [[ $FAILED -gt 0 ]]; then
            echo "‚ö†Ô∏è **Action Required:** Review security findings and address issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **No Action Required:** All security scans passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Comprehensive Security Report (HTML, Markdown, JSON)" >> $GITHUB_STEP_SUMMARY
          echo "- Security Summary Report (Markdown)" >> $GITHUB_STEP_SUMMARY
          echo "- Compliance Status Report (Markdown)" >> $GITHUB_STEP_SUMMARY
          echo "- Individual scan reports for each security tool" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Detailed reports are available in the workflow artifacts." >> $GITHUB_STEP_SUMMARY

      - name: Set workflow status
        if: ${{ needs.sast.result == 'failure' || needs.container-scan.result == 'failure' || needs.iac-scan.result == 'failure' || needs.secrets-scan.result == 'failure' }}
        run: |
          echo "Critical security issues found!"
          exit 1