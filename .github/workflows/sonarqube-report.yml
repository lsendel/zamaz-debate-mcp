name: Generate SonarQube Report

on:
  # Run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Run on demand
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to analyze'
        required: false
        default: 'main'
  
  # Run after SonarQube analysis completes
  workflow_run:
    workflows: ["SonarQube Analysis"]
    types:
      - completed

env:
  SONAR_URL: ${{ secrets.SONAR_URL || 'http://localhost:9000' }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  REPORT_AUTHOR: "GitHub Actions"

jobs:
  generate-report:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Create reports directory
      run: mkdir -p sonar-reports
    
    - name: Generate SonarQube Report
      run: |
        chmod +x scripts/generate-sonar-report.sh
        ./scripts/generate-sonar-report.sh \
          -p "com.zamaz.mcp:mcp-parent" \
          -b "${{ github.event.inputs.branch || 'main' }}"
    
    - name: Upload report artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sonarqube-reports-${{ github.run_number }}
        path: sonar-reports/
        retention-days: 30
    
    - name: Create report summary comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const reportPath = 'sonar-reports/latest-sonar-report.md';
          
          if (fs.existsSync(reportPath)) {
            const report = fs.readFileSync(reportPath, 'utf8');
            
            // Extract key metrics from the report
            const issuesMatch = report.match(/Total Issues:\s*(\d+)/);
            const coverageMatch = report.match(/Coverage:\s*([\d.]+%)/);
            const duplicationsMatch = report.match(/Duplications:\s*([\d.]+%)/);
            
            const summary = `## SonarQube Analysis Report
            
            ðŸ“Š **Key Metrics:**
            - Issues: ${issuesMatch ? issuesMatch[1] : 'N/A'}
            - Coverage: ${coverageMatch ? coverageMatch[1] : 'N/A'}
            - Duplications: ${duplicationsMatch ? duplicationsMatch[1] : 'N/A'}
            
            [View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }
    
    - name: Publish report to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        # Create a directory for GitHub Pages
        mkdir -p docs/sonarqube-reports
        
        # Copy the latest report
        cp sonar-reports/latest-sonar-report.md docs/sonarqube-reports/
        
        # Create an index page
        cat > docs/sonarqube-reports/index.md << EOF
        # SonarQube Reports
        
        ## Latest Report
        
        [View Latest Report](latest-sonar-report.md)
        
        Generated on: $(date)
        EOF
    
    - name: Commit and push reports (optional)
      if: github.ref == 'refs/heads/main' && github.event_name == 'schedule'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Only commit if there are changes
        if [ -n "$(git status --porcelain docs/sonarqube-reports)" ]; then
          git add docs/sonarqube-reports/
          git commit -m "Update SonarQube report - $(date +%Y-%m-%d)"
          git push
        fi