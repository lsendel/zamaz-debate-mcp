name: SonarQube Report Generator

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to analyze'
        required: false
        default: 'main'
        type: choice
        options:
          - main
          - develop
      report_type:
        description: 'Report type'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - detailed
          - security-focused

env:
  SONAR_URL: ${{ secrets.SONAR_URL || 'https://sonarcloud.io' }}
  SONAR_PROJECT_KEY: 'lsendel_zamaz-debate-mcp'
  SONAR_ORGANIZATION: 'lsendel'
  JAVA_VERSION: '21'

jobs:
  validate-config:
    name: üîç Validate Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 2
    
    outputs:
      has-sonar-token: ${{ steps.check-secrets.outputs.has-sonar-token }}
    
    steps:
      - name: Check required secrets
        id: check-secrets
        run: |
          if [ -z "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "‚ùå SONAR_TOKEN secret is not configured"
            echo "has-sonar-token=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ SONAR_TOKEN is configured"
            echo "has-sonar-token=true" >> $GITHUB_OUTPUT
          fi

  generate-report:
    name: üìä Generate SonarQube Report
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate-config
    if: needs.validate-config.outputs.has-sonar-token == 'true'
    
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      REPORT_AUTHOR: "GitHub Actions"
      BRANCH: ${{ github.event.inputs.branch || 'main' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      
      - name: Create reports directory
        run: mkdir -p sonar-reports
      
      - name: Generate SonarQube Report
        run: |
          if [ ! -f scripts/generate-sonar-report.sh ]; then
            echo "‚ùå Report generation script not found"
            exit 1
          fi
          
          chmod +x scripts/generate-sonar-report.sh
          ./scripts/generate-sonar-report.sh \
            --project-key "${{ env.SONAR_PROJECT_KEY }}" \
            --branch "${{ env.BRANCH }}" \
            --organization "${{ env.SONAR_ORGANIZATION }}"
        continue-on-error: false
      
      - name: Validate report generation
        run: |
          if [ ! -f sonar-reports/latest-sonar-report.md ]; then
            echo "‚ùå Report generation failed - no output file found"
            exit 1
          fi
          
          echo "‚úÖ Report generated successfully"
          echo "üìÑ Report size: $(wc -l < sonar-reports/latest-sonar-report.md) lines"
      
      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sonarqube-report-${{ env.BRANCH }}-${{ github.run_number }}
          path: sonar-reports/
          retention-days: 30
      
      - name: Create PR comment with report summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'sonar-reports/latest-sonar-report.md';
            
            if (!fs.existsSync(reportPath)) {
              console.log('‚ùå Report file not found');
              return;
            }
            
            const report = fs.readFileSync(reportPath, 'utf8');
            
            // Extract key metrics with better regex patterns
            const extractMetric = (pattern, defaultValue = 'N/A') => {
              const match = report.match(pattern);
              return match ? match[1] : defaultValue;
            };
            
            const issues = extractMetric(/Total Issues:\s*(\d+)/);
            const coverage = extractMetric(/Coverage:\s*([\d.]+%)/);
            const duplications = extractMetric(/Duplications:\s*([\d.]+%)/);
            const reliability = extractMetric(/Reliability Rating:\s*([A-E])/);
            const security = extractMetric(/Security Rating:\s*([A-E])/);
            
            const summary = `## üìä SonarQube Analysis Report
            
            | Metric | Value |
            |--------|-------|
            | üêõ Issues | ${issues} |
            | üß™ Coverage | ${coverage} |
            | üìã Duplications | ${duplications} |
            | üîß Reliability | ${reliability} |
            | üîí Security | ${security} |
            
            üìà [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            üîó [SonarCloud Dashboard](https://sonarcloud.io/project/overview?id=${{ env.SONAR_PROJECT_KEY }})`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
      
      - name: Update workflow summary
        if: always()
        run: |
          echo "## üìä SonarQube Report Generation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ env.BRANCH }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ env.SONAR_PROJECT_KEY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Generated**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f sonar-reports/latest-sonar-report.md ]; then
            echo "‚úÖ Report generated successfully" >> $GITHUB_STEP_SUMMARY
            echo "üìÑ Report size: $(wc -l < sonar-reports/latest-sonar-report.md) lines" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Report generation failed" >> $GITHUB_STEP_SUMMARY
          fi