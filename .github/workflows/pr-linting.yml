name: PR Linting

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.java'
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'
      - '**/*.json'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.md'
      - '**/Dockerfile*'
      - '**/pom.xml'
      - 'package*.json'


permissions:
  contents: write
env:
  MAVEN_BATCH_MODE: '--batch-mode --no-transfer-progress --show-version'
  JAVA_VERSION: '21'
  NODE_VERSION: '18'

jobs:
  # Quick linting for changed files only
  quick-lint:
    name: Quick Lint (Changed Files)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
          **/*.java
          **/*.ts
          **/*.tsx
          **/*.js
          **/*.jsx
          **/*.json
          **/*.yml
          **/*.yaml
          **/*.md
          **/Dockerfile*
        separator: ' '

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      if: contains(steps.changed-files.outputs.all_changed_files, '.java')
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      if: contains(steps.changed-files.outputs.all_changed_files, '.ts') || contains(steps.changed-files.outputs.all_changed_files, '.js')
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: debate-ui/package-lock.json

    - name: Install frontend dependencies
      if: contains(steps.changed-files.outputs.all_changed_files, '.ts') || contains(steps.changed-files.outputs.all_changed_files, '.js')
      working-directory: debate-ui
      run: npm ci

    - name: Lint changed Java files
      if: contains(steps.changed-files.outputs.all_changed_files, '.java')
      run: |
        echo "::group::Linting changed Java files"
        echo "Changed Java files: ${{ steps.changed-files.outputs.all_changed_files }}"

        # Run quick Java checks
        mvn checkstyle:check -q ${{ env.MAVEN_BATCH_MODE }} -Dcheckstyle.includeTestSourceDirectory=false
        echo "::endgroup::"

    - name: Lint changed frontend files
      if: contains(steps.changed-files.outputs.all_changed_files, '.ts') || contains(steps.changed-files.outputs.all_changed_files, '.js')
      working-directory: debate-ui
      run: |
        echo "::group::Linting changed frontend files"

        # Get changed frontend files relative to debate-ui directory
        changed_frontend_files=""
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          if [[ $file == debate-ui/* ]]; then
            relative_file=${file#debate-ui/}
            if [[ $relative_file == src/* ]]; then
              changed_frontend_files="$changed_frontend_files $relative_file"
            fi
          fi
        done

        if [[ -n "$changed_frontend_files" ]]; then
          echo "Changed frontend files: $changed_frontend_files"
          npx eslint $changed_frontend_files --config ../.linting/frontend/.eslintrc.js
          npx prettier --check $changed_frontend_files --config ../.linting/frontend/.prettierrc
        else
          echo "No frontend source files changed"
        fi
        echo "::endgroup::"

    - name: Lint changed configuration files
      if: contains(steps.changed-files.outputs.all_changed_files, '.yml') || contains(steps.changed-files.outputs.all_changed_files, '.yaml') || contains(steps.changed-files.outputs.all_changed_files, '.json')
      run: |
        echo "::group::Linting changed configuration files"

        # Install tools if needed
        pip install yamllint

        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          if [[ $file == *.yml || $file == *.yaml ]]; then
            echo "Linting YAML file: $file"
            yamllint -c .linting/config/yaml-lint.yml "$file" || true
          elif [[ $file == *.json ]]; then
            echo "Validating JSON file: $file"
            python -m json.tool "$file" > /dev/null || echo "Invalid JSON: $file"
          fi
        done
        echo "::endgroup::"

    - name: Lint changed Dockerfiles
      if: contains(steps.changed-files.outputs.all_changed_files, 'Dockerfile')
      run: |
        echo "::group::Linting changed Dockerfiles"

        # Install hadolint
        wget -O /tmp/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
        chmod +x /tmp/hadolint
        sudo mv /tmp/hadolint /usr/local/bin/hadolint

        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          if [[ $file == *Dockerfile* ]]; then
            echo "Linting Dockerfile: $file"
            hadolint "$file" || true
          fi
        done
        echo "::endgroup::"

    - name: Lint changed Markdown files
      if: contains(steps.changed-files.outputs.all_changed_files, '.md')
      run: |
        echo "::group::Linting changed Markdown files"

        # Install markdownlint
        npm install -g markdownlint-cli

        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          if [[ $file == *.md ]]; then
            echo "Linting Markdown file: $file"
            markdownlint -c .linting/docs/markdownlint.json "$file" || true
          fi
        done
        echo "::endgroup::"

    - name: Create PR comment with results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');

          // Get job status
          const jobStatus = '${{ job.status }}';
          const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}';

          let commentBody = `## 🔍 Quick Linting Results\n\n`;
          commentBody += `**Status:** ${jobStatus === 'success' ? '✅ Passed' : '❌ Failed'}\n`;
          commentBody += `**Changed Files:** ${changedFiles.split(' ').length} files\n\n`;

          if (jobStatus === 'success') {
            commentBody += `All changed files passed linting checks! 🎉\n\n`;
          } else {
            commentBody += `Some linting issues were found. Please check the workflow logs for details.\n\n`;
          }

          commentBody += `### Files Checked\n`;
          const files = changedFiles.split(' ');
          for (const file of files.slice(0, 10)) { // Show first 10 files
            commentBody += `- \`${file}\`\n`;
          }
          if (files.length > 10) {
            commentBody += `- ... and ${files.length - 10} more files\n`;
          }

          commentBody += `\n---\n*This is a quick lint check for changed files only. Full linting runs on the main workflow.*`;

          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const existingComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Quick Linting Results')
          );

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

  # Auto-fix attempt (creates a commit if fixes are available)
  auto-fix:
    name: Auto-fix Issues
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.head_ref }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: debate-ui/package-lock.json

    - name: Install frontend dependencies
      working-directory: debate-ui
      run: npm ci

    - name: Run auto-fix
      run: |
        echo "::group::Running auto-fix"

        # Fix frontend issues
        cd debate-ui
        npm run lint:fix || true
        npm run format || true
        cd ..

        echo "::endgroup::"

    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit auto-fixes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "style: auto-fix linting issues

        - Applied ESLint auto-fixes
        - Applied Prettier formatting

        [skip ci]"
        git push

    - name: Comment on auto-fix
      if: steps.verify-changed-files.outputs.changed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `## 🔧 Auto-fix Applied\n\nI've automatically fixed some linting issues in this PR. The changes have been committed.\n\n**Fixed:**\n- ESLint auto-fixable issues\n- Code formatting with Prettier\n\nPlease review the changes and re-run any tests if needed.`
          });

    - name: Comment on no changes
      if: steps.verify-changed-files.outputs.changed == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `## 🔧 Auto-fix Results\n\nNo auto-fixable issues were found. All linting issues require manual attention.`
          });
