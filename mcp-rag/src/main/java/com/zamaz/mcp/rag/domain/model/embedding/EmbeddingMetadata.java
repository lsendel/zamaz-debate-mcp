package com.zamaz.mcp.rag.domain.model.embedding;

import java.time.Instant;
import java.util.Map;
import java.util.Objects;

/**
 * Value Object containing metadata about an embedding.
 * Immutable representation of embedding generation details.
 */
public record EmbeddingMetadata(
    String modelName,
    String modelVersion,
    int dimensions,
    Instant generatedAt,
    long processingTimeMillis,
    Map<String, String> additionalProperties
) {
    public EmbeddingMetadata {
        Objects.requireNonNull(modelName, "Model name cannot be null");
        Objects.requireNonNull(modelVersion, "Model version cannot be null");
        Objects.requireNonNull(generatedAt, "Generated timestamp cannot be null");
        Objects.requireNonNull(additionalProperties, "Additional properties cannot be null");
        
        if (modelName.trim().isEmpty()) {
            throw new IllegalArgumentException("Model name cannot be empty");
        }
        
        if (dimensions <= 0) {
            throw new IllegalArgumentException("Dimensions must be positive");
        }
        
        if (processingTimeMillis < 0) {
            throw new IllegalArgumentException("Processing time cannot be negative");
        }
        
        // Make defensive copy to ensure immutability
        additionalProperties = Map.copyOf(additionalProperties);
    }
    
    /**
     * Create metadata for OpenAI embeddings
     */
    public static EmbeddingMetadata forOpenAI(String model, int dimensions, long processingTimeMillis) {
        return new EmbeddingMetadata(
            model,
            "latest",
            dimensions,
            Instant.now(),
            processingTimeMillis,
            Map.of("provider", "openai")
        );
    }
    
    /**
     * Create metadata for local embeddings
     */
    public static EmbeddingMetadata forLocal(String model, String version, int dimensions, long processingTimeMillis) {
        return new EmbeddingMetadata(
            model,
            version,
            dimensions,
            Instant.now(),
            processingTimeMillis,
            Map.of("provider", "local")
        );
    }
    
    /**
     * Get a specific additional property
     */
    public String getProperty(String key) {
        return additionalProperties.get(key);
    }
    
    /**
     * Check if this embedding was generated by a specific provider
     */
    public boolean isFromProvider(String provider) {
        return provider.equals(additionalProperties.get("provider"));
    }
}