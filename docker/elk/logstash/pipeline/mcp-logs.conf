input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
  
  udp {
    port => 5001
    codec => json_lines
  }
}

filter {
  # Parse timestamp if present
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }
  
  # Parse log level
  if [level] {
    mutate {
      uppercase => [ "level" ]
    }
  }
  
  # Extract service information from source
  if [source] {
    grok {
      match => { "source" => "/var/log/mcp/(?<service>[^/]+)/" }
    }
  }
  
  # Parse JSON logs
  if [message] =~ /^\{/ {
    json {
      source => "message"
      target => "parsed"
    }
    
    # Move parsed fields to root level
    if [parsed] {
      mutate {
        add_field => {
          "log_level" => "%{[parsed][level]}"
          "logger_name" => "%{[parsed][logger_name]}"
          "thread_name" => "%{[parsed][thread_name]}"
          "organization_id" => "%{[parsed][organizationId]}"
          "user_id" => "%{[parsed][userId]}"
          "request_id" => "%{[parsed][requestId]}"
          "correlation_id" => "%{[parsed][correlationId]}"
          "trace_id" => "%{[parsed][traceId]}"
          "span_id" => "%{[parsed][spanId]}"
          "component" => "%{[parsed][component]}"
          "operation" => "%{[parsed][operation]}"
          "duration" => "%{[parsed][duration]}"
          "status_code" => "%{[parsed][statusCode]}"
        }
      }
      
      # Remove parsed object after extraction
      mutate {
        remove_field => [ "parsed" ]
      }
    }
  }
  
  # Parse stack traces
  if [message] =~ /Exception|Error|Caused by/ {
    multiline {
      pattern => "^[[:space:]]"
      what => "previous"
      negate => false
    }
    
    # Extract exception information
    grok {
      match => { "message" => "(?<exception_type>[A-Za-z0-9_$.]+Exception): (?<exception_message>.*)" }
    }
    
    mutate {
      add_tag => [ "exception" ]
    }
  }
  
  # Parse HTTP requests
  if [message] =~ /HTTP/ {
    grok {
      match => { 
        "message" => "%{WORD:http_method} %{URIPATH:http_path}(?:%{URIPARAM:http_params})? HTTP/%{NUMBER:http_version}" 
      }
    }
    
    mutate {
      add_tag => [ "http_request" ]
    }
  }
  
  # Parse performance logs
  if [operation] and [duration] {
    mutate {
      convert => { "duration" => "integer" }
      add_tag => [ "performance" ]
    }
    
    # Categorize performance
    if [duration] {
      if [duration] >= 10000 {
        mutate { add_tag => [ "very_slow" ] }
      } else if [duration] >= 5000 {
        mutate { add_tag => [ "slow" ] }
      } else if [duration] >= 1000 {
        mutate { add_tag => [ "moderate" ] }
      } else {
        mutate { add_tag => [ "fast" ] }
      }
    }
  }
  
  # Parse security events
  if [message] =~ /authentication|authorization|login|logout|security/ {
    mutate {
      add_tag => [ "security" ]
    }
    
    # Extract authentication information
    grok {
      match => { 
        "message" => "(?:authentication|login).*user[[:space:]]*[:=][[:space:]]*(?<auth_user>[^[:space:]]+)" 
      }
    }
  }
  
  # Parse business events
  if [message] =~ /debate|organization|user|llm|rag/ {
    mutate {
      add_tag => [ "business" ]
    }
    
    # Extract business operation
    grok {
      match => { 
        "message" => "(?<business_operation>debate|organization|user|llm|rag)" 
      }
    }
  }
  
  # Add service categorization
  if [service] {
    if [service] == "mcp-debate" {
      mutate { add_field => { "service_category" => "core" } }
    } else if [service] == "mcp-organization" {
      mutate { add_field => { "service_category" => "tenant" } }
    } else if [service] == "mcp-llm" {
      mutate { add_field => { "service_category" => "ai" } }
    } else if [service] == "mcp-rag" {
      mutate { add_field => { "service_category" => "ai" } }
    } else if [service] == "mcp-context" {
      mutate { add_field => { "service_category" => "data" } }
    } else if [service] == "mcp-gateway" {
      mutate { add_field => { "service_category" => "gateway" } }
    }
  }
  
  # Convert numeric fields
  if [status_code] {
    mutate {
      convert => { "status_code" => "integer" }
    }
  }
  
  # Add SLA categorization based on status code
  if [status_code] {
    if [status_code] >= 500 {
      mutate { add_tag => [ "sla_violation", "server_error" ] }
    } else if [status_code] >= 400 {
      mutate { add_tag => [ "client_error" ] }
    } else if [status_code] >= 200 and [status_code] < 300 {
      mutate { add_tag => [ "success" ] }
    }
  }
  
  # Add environment information
  mutate {
    add_field => {
      "environment" => "${ENVIRONMENT:development}"
      "region" => "${REGION:local}"
      "datacenter" => "${DATACENTER:local}"
      "cluster" => "${CLUSTER:mcp-cluster}"
    }
  }
  
  # Clean up fields
  mutate {
    remove_field => [ "host", "agent", "ecs", "input", "log" ]
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "mcp-logs-%{+YYYY.MM.dd}"
    template_name => "mcp-logs"
    template_pattern => "mcp-logs-*"
    template => "/usr/share/logstash/pipeline/mcp-logs-template.json"
    template_overwrite => true
  }
  
  # Output performance logs to separate index
  if "performance" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "mcp-performance-%{+YYYY.MM.dd}"
    }
  }
  
  # Output security logs to separate index
  if "security" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "mcp-security-%{+YYYY.MM.dd}"
    }
  }
  
  # Output error logs to separate index
  if "exception" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "mcp-errors-%{+YYYY.MM.dd}"
    }
  }
  
  # Output business events to separate index
  if "business" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "mcp-business-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output to stdout (remove in production)
  if [log_level] == "DEBUG" {
    stdout { 
      codec => rubydebug 
    }
  }
}