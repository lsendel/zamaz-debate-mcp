#!/bin/bash

# Pre-commit hook for build validation and documentation quality
# Install with: git config core.hooksPath .githooks

set -e

echo "🔍 Running pre-commit validation..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Check if Maven is available
if ! command -v mvn &> /dev/null; then
    print_status $RED "❌ Maven is not installed or not in PATH"
    exit 1
fi

# Check for Java 21
java_version=$(java -version 2>&1 | head -1 | cut -d'"' -f2 | cut -d'.' -f1)
if [ "$java_version" != "21" ]; then
    print_status $YELLOW "⚠️  Warning: Java 21 is required. Current version: $java_version"
fi

# Quick compilation check
print_status $YELLOW "🔨 Running quick compilation check..."
if ! mvn compile -q -T 1C -Dmaven.compiler.failOnError=true; then
    print_status $RED "❌ Compilation failed. Please fix compilation errors before committing."
    exit 1
fi

# Check for circular dependencies
print_status $YELLOW "🔄 Checking for circular dependencies..."
if mvn dependency:tree -q | grep -q "cyclic"; then
    print_status $RED "❌ Circular dependencies detected. Please resolve before committing."
    exit 1
fi

# Run unit tests (fast ones only)
print_status $YELLOW "🧪 Running fast unit tests..."
if ! mvn test -q -Dtest="**/*Test.java" -DfailIfNoTests=false; then
    print_status $RED "❌ Unit tests failed. Please fix failing tests before committing."
    exit 1
fi

# Check for security vulnerabilities in dependencies
print_status $YELLOW "🔒 Running quick security check..."
if ! mvn org.owasp:dependency-check-maven:check -q -DfailBuildOnCVSS=9 -DskipTestScope=true; then
    print_status $YELLOW "⚠️  Security vulnerabilities detected. Consider updating dependencies."
fi

# Validate POM structure
print_status $YELLOW "📋 Validating POM structure..."
for pom in $(find . -name "pom.xml" -not -path "./target/*"); do
    if ! mvn -f "$pom" validate -q; then
        print_status $RED "❌ Invalid POM structure in $pom"
        exit 1
    fi
done

# Check for missing modules in parent POM
print_status $YELLOW "📦 Checking module declarations..."
declared_modules=$(grep -A 20 "<modules>" pom.xml | grep "<module>" | sed 's/.*<module>\(.*\)<\/module>.*/\1/' | sort)
actual_modules=$(find . -maxdepth 2 -name "pom.xml" -not -path "./pom.xml" -exec dirname {} \; | sed 's|./||' | sort)

if [ "$declared_modules" != "$actual_modules" ]; then
    print_status $RED "❌ Module declaration mismatch detected in parent POM"
    print_status $YELLOW "Declared modules: $declared_modules"
    print_status $YELLOW "Actual modules: $actual_modules"
    exit 1
fi

# Check for personal notes in documentation files
print_status $YELLOW "📝 Checking documentation quality..."
if git diff --cached --name-only | grep -E '\.(md|txt)$' | xargs grep -l -E 'TODO|FIXME|NOTE:|see my|my note' > /dev/null 2>&1; then
    print_status $RED "❌ Found personal notes in documentation files."
    print_status $RED "Please remove personal notes before committing."
    git diff --cached --name-only | grep -E '\.(md|txt)$' | xargs grep -n -E 'TODO|FIXME|NOTE:|see my|my note' 2>/dev/null
    exit 1
fi

# Run markdown linting if available
if command -v markdownlint &> /dev/null && git diff --cached --name-only | grep -q '\.md$'; then
    print_status $YELLOW "📋 Running markdown linting..."
    if ! git diff --cached --name-only | grep -E '\.md$' | xargs markdownlint 2>/dev/null; then
        print_status $RED "❌ Markdown linting failed."
        print_status $RED "Please fix the issues before committing."
        exit 1
    fi
fi

print_status $GREEN "✅ All pre-commit checks passed!"
print_status $GREEN "🚀 Ready to commit!"

exit 0