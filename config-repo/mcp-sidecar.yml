server:
  port: ${MCP_SIDECAR_PORT:8080}
  shutdown: graceful

spring:
  application:
    name: mcp-sidecar
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:development}
  
  # Redis Configuration
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    jedis:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: 1000ms
  
  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080}
  
  # Web Configuration
  webflux:
    base-path: /api/v1
  
  # Cloud Gateway Configuration
  cloud:
    gateway:
      routes:
        - id: auth-service
          uri: ${AUTH_SERVICE_URL:http://localhost:8081}
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - name: RequestRateLimiter
              args:
                rate-limiter: "#{@redisRateLimiter}"
                key-resolver: "#{@userKeyResolver}"
        
        - id: organization-service
          uri: ${ORGANIZATION_SERVICE_URL:http://localhost:5005}
          predicates:
            - Path=/api/v1/organizations/**
          filters:
            - name: CircuitBreaker
              args:
                name: organization-service
                fallbackUri: forward:/fallback/organization
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY
        
        - id: llm-service
          uri: ${LLM_SERVICE_URL:http://localhost:5002}
          predicates:
            - Path=/api/v1/llm/**
          filters:
            - name: CircuitBreaker
              args:
                name: llm-service
                fallbackUri: forward:/fallback/llm
            - name: Retry
              args:
                retries: 2
                statuses: BAD_GATEWAY
        
        - id: debate-controller
          uri: ${CONTROLLER_SERVICE_URL:http://localhost:5013}
          predicates:
            - Path=/api/v1/debates/**
          filters:
            - name: CircuitBreaker
              args:
                name: debate-controller
                fallbackUri: forward:/fallback/debate
        
        - id: rag-service
          uri: ${RAG_SERVICE_URL:http://localhost:5004}
          predicates:
            - Path=/api/v1/rag/**
          filters:
            - name: CircuitBreaker
              args:
                name: rag-service
                fallbackUri: forward:/fallback/rag
      
      default-filters:
        - name: AddRequestHeader
          args:
            name: X-Request-Source
            value: mcp-sidecar
        - name: AddResponseHeader
          args:
            name: X-Response-Source
            value: mcp-sidecar

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:mcp-sidecar-secret-key-change-in-production}
  issuer: ${JWT_ISSUER:zamaz-mcp-sidecar}
  expiration: ${JWT_EXPIRATION:86400} # 24 hours
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800} # 7 days

# Rate Limiting Configuration
rate-limit:
  redis-rate-limiter:
    replenish-rate: ${RATE_LIMIT_REPLENISH_RATE:10}
    burst-capacity: ${RATE_LIMIT_BURST_CAPACITY:20}
    requested-tokens: ${RATE_LIMIT_REQUESTED_TOKENS:1}

# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
    instances:
      organization-service:
        base-config: default
      llm-service:
        base-config: default
        failure-rate-threshold: 60
        wait-duration-in-open-state: 60s
      debate-controller:
        base-config: default
      rag-service:
        base-config: default
  
  retry:
    configs:
      default:
        max-attempts: 3
        wait-duration: 1s
        retry-exceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
    instances:
      organization-service:
        base-config: default
      llm-service:
        base-config: default
        max-attempts: 2
      debate-controller:
        base-config: default
      rag-service:
        base-config: default

# Logging Configuration
logging:
  level:
    com.zamaz.mcp.sidecar: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:INFO}
    org.springframework.cloud.gateway: ${GATEWAY_LOG_LEVEL:INFO}
    io.github.resilience4j: ${RESILIENCE4J_LOG_LEVEL:INFO}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: when-authorized
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: ${spring.profiles.active}

# Application Configuration
app:
  name: ${spring.application.name}
  version: ${APP_VERSION:1.0.0}
  description: MCP Sidecar for security, authentication, and API management
  
  # CORS Configuration
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
    allowed-headers: ${CORS_ALLOWED_HEADERS:*}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
    max-age: ${CORS_MAX_AGE:3600}
  
  # AI Service Configuration
  ai:
    services:
      gpt-4:
        url: ${GPT4_SERVICE_URL:http://localhost:5002}
        model: gpt-4
        priority: 1
        timeout: 30s
      claude:
        url: ${CLAUDE_SERVICE_URL:http://localhost:5002}
        model: claude-3
        priority: 2
        timeout: 30s
      local:
        url: ${LOCAL_AI_SERVICE_URL:http://localhost:5002}
        model: local-model
        priority: 3
        timeout: 15s
    
    # Load balancing strategy: round-robin, weighted, least-connections
    load-balancer:
      strategy: ${AI_LOAD_BALANCER_STRATEGY:round-robin}
      health-check:
        interval: ${AI_HEALTH_CHECK_INTERVAL:30s}
        timeout: ${AI_HEALTH_CHECK_TIMEOUT:5s}
        unhealthy-threshold: ${AI_UNHEALTHY_THRESHOLD:3}
        healthy-threshold: ${AI_HEALTHY_THRESHOLD:2}
  
  # Metrics Configuration
  metrics:
    enabled: ${METRICS_ENABLED:true}
    prefix: ${METRICS_PREFIX:mcp.sidecar}
    collection:
      interval: ${METRICS_COLLECTION_INTERVAL:30s}
    cleanup:
      interval: ${METRICS_CLEANUP_INTERVAL:1h}
    retention:
      period: ${METRICS_RETENTION_PERIOD:7d}
    export:
      enabled: ${METRICS_EXPORT_ENABLED:true}
      interval: ${METRICS_EXPORT_INTERVAL:5m}
  
  # Cache Configuration
  cache:
    enabled: ${CACHE_ENABLED:true}
    default-ttl: ${CACHE_DEFAULT_TTL:300}
    ai-response-ttl: ${CACHE_AI_RESPONSE_TTL:1800}
    auth-token-ttl: ${CACHE_AUTH_TOKEN_TTL:3600}
    user-session-ttl: ${CACHE_USER_SESSION_TTL:86400}
    organization-data-ttl: ${CACHE_ORGANIZATION_DATA_TTL:3600}
  
  # Tracing Configuration
  tracing:
    enabled: ${TRACING_ENABLED:true}
    sampling-rate: ${TRACING_SAMPLING_RATE:0.1}
    service-name: ${TRACING_SERVICE_NAME:mcp-sidecar}
  
  # Security Configuration
  security:
    scanning:
      enabled: ${SECURITY_SCANNING_ENABLED:true}
      strict-mode: ${SECURITY_STRICT_MODE:false}
      max-payload-size: ${SECURITY_MAX_PAYLOAD_SIZE:1048576}
    threat-intelligence:
      enabled: ${THREAT_INTELLIGENCE_ENABLED:false}
      api-url: ${THREAT_INTELLIGENCE_API_URL:}
      update-interval: ${THREAT_INTELLIGENCE_UPDATE_INTERVAL:6h}
    cleanup:
      interval: ${SECURITY_CLEANUP_INTERVAL:1h}

---
# Development Profile
spring:
  config:
    activate:
      on-profile: development
  
  security:
    user:
      name: admin
      password: admin123
      roles: ADMIN

jwt:
  secret: development-secret-key-not-for-production
  
logging:
  level:
    com.zamaz.mcp.sidecar: DEBUG
    org.springframework.security: DEBUG
    org.springframework.cloud.gateway: DEBUG

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
  
  redis:
    host: localhost
    port: 6379
    
jwt:
  secret: test-secret-key
  expiration: 300 # 5 minutes for tests
  
logging:
  level:
    com.zamaz.mcp.sidecar: DEBUG

---
# Production Profile
spring:
  config:
    activate:
      on-profile: production
  
  redis:
    host: ${REDIS_HOST:redis}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    ssl: ${REDIS_SSL:true}
    
jwt:
  secret: ${JWT_SECRET:} # Must be provided in production
  
logging:
  level:
    com.zamaz.mcp.sidecar: INFO
    org.springframework.security: WARN
    org.springframework.cloud.gateway: WARN
    
management:
  endpoint:
    health:
      show-details: never