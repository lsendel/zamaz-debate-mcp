#!/bin/bash

# Pre-commit hook for configuration repository
# Prevents committing sensitive data and validates configuration

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "Running pre-commit checks..."

# Get the list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E "\.(yml|yaml)$" || true)

if [ -z "$STAGED_FILES" ]; then
    echo "No YAML files to check"
    exit 0
fi

# Check for sensitive data
echo "Checking for sensitive data..."
SENSITIVE_PATTERNS=(
    "password:\s*[^$\{].*[^}]$"
    "secret:\s*[^$\{].*[^}]$"
    "key:\s*[^$\{].*[^}]$"
    "token:\s*[^$\{].*[^}]$"
    "apikey:\s*[^$\{].*[^}]$"
    "api-key:\s*[^$\{].*[^}]$"
    "private.*:\s*[^$\{].*[^}]$"
)

FOUND_SENSITIVE=0

for file in $STAGED_FILES; do
    for pattern in "${SENSITIVE_PATTERNS[@]}"; do
        if git show ":$file" | grep -iE "$pattern" | grep -vE "{\s*cipher\s*}" | grep -v "change-me" | grep -v "example" | grep -v "placeholder" > /dev/null; then
            echo -e "${RED}✗ Potential sensitive data in $file${NC}"
            git show ":$file" | grep -inE "$pattern" | grep -vE "{\s*cipher\s*}"
            FOUND_SENSITIVE=1
        fi
    done
done

if [ $FOUND_SENSITIVE -eq 1 ]; then
    echo -e "${RED}Error: Sensitive data detected!${NC}"
    echo "Please encrypt sensitive values using the encrypt-value.sh script"
    echo "Example: ./encrypt-value.sh 'my-secret-password'"
    exit 1
fi

echo -e "${GREEN}✓ No sensitive data found${NC}"

# Validate YAML syntax
echo "Validating YAML syntax..."
SYNTAX_ERRORS=0

for file in $STAGED_FILES; do
    if git show ":$file" | python -c "import sys, yaml; yaml.safe_load(sys.stdin)" 2>/dev/null; then
        echo -e "  ${GREEN}✓${NC} $file"
    else
        echo -e "  ${RED}✗${NC} $file has invalid YAML syntax"
        SYNTAX_ERRORS=1
    fi
done

if [ $SYNTAX_ERRORS -eq 1 ]; then
    echo -e "${RED}Error: YAML syntax errors found!${NC}"
    exit 1
fi

echo -e "${GREEN}✓ All YAML files have valid syntax${NC}"

# Check commit message format
COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
if [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
    
    # Check if commit message follows the format
    if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|refactor|security|perf|docs|test|chore)\(.+\):.+"; then
        echo -e "${YELLOW}Warning: Commit message doesn't follow conventional format${NC}"
        echo "Expected format: <type>(<scope>): <subject>"
        echo "Example: feat(mcp-organization): add caching configuration"
    fi
fi

echo -e "${GREEN}✓ Pre-commit checks passed${NC}"
exit 0