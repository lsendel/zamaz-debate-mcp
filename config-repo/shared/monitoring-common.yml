# Shared Monitoring Configuration
# Common monitoring and observability settings used across all services

# Actuator configuration
management:
  # Endpoint configuration
  endpoints:
    web:
      base-path: ${ACTUATOR_BASE_PATH:/actuator}
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics,prometheus,loggers,threaddump}
      path-mapping:
        prometheus: metrics
        
  endpoint:
    # Health endpoint
    health:
      show-details: ${HEALTH_SHOW_DETAILS:when-authorized}
      show-components: ${HEALTH_SHOW_COMPONENTS:when-authorized}
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState,db,redis
        liveness:
          include: livenessState,diskSpace
          
    # Metrics endpoint
    metrics:
      enabled: true
      
    # Info endpoint
    info:
      enabled: true
      
    # Loggers endpoint
    loggers:
      enabled: ${LOGGERS_ENDPOINT_ENABLED:true}
      
  # Metrics configuration
  metrics:
    # Common tags for all metrics
    tags:
      application: ${spring.application.name}
      environment: ${ENVIRONMENT:development}
      region: ${REGION:us-east-1}
      instance: ${HOSTNAME:localhost}
      
    # Metric export configuration
    export:
      # Prometheus metrics
      prometheus:
        enabled: ${PROMETHEUS_ENABLED:true}
        descriptions: true
        histogram-flavor: prometheus
        step: ${METRICS_EXPORT_STEP:60s}
        
      # CloudWatch metrics (AWS)
      cloudwatch:
        enabled: ${CLOUDWATCH_ENABLED:false}
        namespace: ${CLOUDWATCH_NAMESPACE:MCP-Services}
        batch-size: ${CLOUDWATCH_BATCH_SIZE:20}
        
      # Datadog metrics
      datadog:
        enabled: ${DATADOG_ENABLED:false}
        api-key: ${DATADOG_API_KEY:}
        application-key: ${DATADOG_APP_KEY:}
        uri: ${DATADOG_URI:https://api.datadoghq.com}
        
    # Distribution statistics
    distribution:
      percentiles-histogram:
        http.server.requests: true
        jvm.memory.used: true
        jvm.gc.pause: true
      percentiles:
        http.server.requests: 0.5,0.75,0.95,0.99
      slo:
        http.server.requests: 100ms,200ms,400ms,800ms
        
  # Tracing configuration
  tracing:
    enabled: ${TRACING_ENABLED:true}
    sampling:
      probability: ${TRACING_SAMPLING_RATE:0.1}
    propagation:
      type: ${TRACING_PROPAGATION:b3,w3c}
    baggage:
      enabled: true
      remote-fields: ${BAGGAGE_REMOTE_FIELDS:userId,organizationId,requestId}

# OpenTelemetry configuration
opentelemetry:
  # Resource attributes
  resource:
    attributes:
      service.name: ${spring.application.name}
      service.version: ${APPLICATION_VERSION:1.0.0}
      deployment.environment: ${ENVIRONMENT:development}
      
  # Exporter configuration
  exporter:
    otlp:
      endpoint: ${OTEL_EXPORTER_ENDPOINT:http://localhost:4317}
      headers: ${OTEL_EXPORTER_HEADERS:}
      timeout: ${OTEL_EXPORTER_TIMEOUT:10s}
      
# Logging configuration
logging:
  # Log patterns
  pattern:
    level: "%5p [${spring.application.name},%X{traceId:-},%X{spanId:-}]"
    
  # Structured logging
  structured:
    enabled: ${STRUCTURED_LOGGING_ENABLED:true}
    format: ${LOG_FORMAT:json}
    
  # Log levels for monitoring
  level:
    # Metrics and monitoring
    io.micrometer: ${LOG_LEVEL_METRICS:INFO}
    org.springframework.boot.actuate: ${LOG_LEVEL_ACTUATOR:INFO}
    
# Health indicators
health:
  # Custom health check configuration
  indicators:
    # Database health
    db:
      enabled: true
      timeout: ${HEALTH_DB_TIMEOUT:5s}
      
    # Redis health
    redis:
      enabled: ${HEALTH_REDIS_ENABLED:true}
      timeout: ${HEALTH_REDIS_TIMEOUT:2s}
      
    # Disk space health
    diskspace:
      enabled: true
      threshold: ${HEALTH_DISK_THRESHOLD:10485760}
      
    # External service health
    external-services:
      enabled: ${HEALTH_EXTERNAL_ENABLED:true}
      timeout: ${HEALTH_EXTERNAL_TIMEOUT:5s}

# Alerting configuration
alerting:
  # Alert destinations
  destinations:
    email:
      enabled: ${ALERT_EMAIL_ENABLED:false}
      recipients: ${ALERT_EMAIL_RECIPIENTS:}
      
    slack:
      enabled: ${ALERT_SLACK_ENABLED:false}
      webhook-url: ${ALERT_SLACK_WEBHOOK:}
      
    pagerduty:
      enabled: ${ALERT_PAGERDUTY_ENABLED:false}
      integration-key: ${ALERT_PAGERDUTY_KEY:}
      
  # Alert thresholds
  thresholds:
    error-rate: ${ALERT_ERROR_RATE:0.05}
    response-time: ${ALERT_RESPONSE_TIME:1000}
    memory-usage: ${ALERT_MEMORY_USAGE:0.85}
    cpu-usage: ${ALERT_CPU_USAGE:0.80}