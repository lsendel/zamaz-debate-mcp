spring:
  application:
    name: mcp-pattern-recognition
  
  profiles:
    active: development
  
  datasource:
    url: jdbc:postgresql://localhost:5432/mcp_pattern_recognition
    username: ${DB_USERNAME:mcp_user}
    password: ${DB_PASSWORD:mcp_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1800000
      connection-timeout: 20000
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region:
            factory_class: org.hibernate.cache.caffeine.CaffeineRegionFactory
  
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    database: 0
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
    timeout: 60000ms
  
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=10000,expireAfterWrite=1h
  
  security:
    oauth2:
      client:
        registration:
          github:
            client-id: ${GITHUB_CLIENT_ID:}
            client-secret: ${GITHUB_CLIENT_SECRET:}
            scope: repo,read:org
  
  jackson:
    time-zone: UTC
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
    serialization:
      write-dates-as-timestamps: false
      fail-on-empty-beans: false
    deserialization:
      fail-on-unknown-properties: false
  
  task:
    execution:
      pool:
        core-size: 10
        max-size: 50
        queue-capacity: 100
        keep-alive: 60s
    scheduling:
      pool:
        size: 5

server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api/pattern-recognition
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,configprops,loggers
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5,0.75,0.95,0.99
      sla:
        http.server.requests: 100ms,200ms,500ms,1s,2s
  tracing:
    sampling:
      probability: 1.0

logging:
  level:
    com.zamaz.mcp.pattern: DEBUG
    com.zamaz.mcp.common: INFO
    org.springframework.security: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.cache: DEBUG
  pattern:
    console: '%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n'
    file: '%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n'
  file:
    name: logs/pattern-recognition.log
    max-size: 10MB
    max-history: 30

# Pattern Recognition Configuration
pattern-recognition:
  # Detection Configuration
  detection:
    # Maximum number of threads for parallel processing
    max-threads: ${PATTERN_DETECTION_MAX_THREADS:10}
    
    # Timeout for pattern detection per file (in seconds)
    timeout-per-file: ${PATTERN_DETECTION_TIMEOUT:30}
    
    # Maximum file size to analyze (in bytes)
    max-file-size: ${PATTERN_DETECTION_MAX_FILE_SIZE:1048576}
    
    # Maximum lines of code to analyze
    max-lines-of-code: ${PATTERN_DETECTION_MAX_LOC:10000}
    
    # Confidence threshold for pattern detection
    confidence-threshold: ${PATTERN_DETECTION_CONFIDENCE_THRESHOLD:0.7}
    
    # Enable caching of analysis results
    enable-caching: ${PATTERN_DETECTION_ENABLE_CACHING:true}
    
    # Cache TTL in minutes
    cache-ttl: ${PATTERN_DETECTION_CACHE_TTL:60}
    
    # Supported file extensions
    supported-extensions:
      - .java
      - .kt
      - .scala
      - .groovy
    
    # Excluded patterns (regex)
    excluded-patterns:
      - ".*\\.generated\\..*"
      - ".*\\.test\\..*"
      - ".*\\.mock\\..*"
      - ".*/target/.*"
      - ".*/build/.*"
  
  # Machine Learning Configuration
  ml:
    # Enable ML-based pattern learning
    enable-learning: ${PATTERN_ML_ENABLE_LEARNING:true}
    
    # Model training batch size
    training-batch-size: ${PATTERN_ML_TRAINING_BATCH_SIZE:100}
    
    # Model validation split ratio
    validation-split: ${PATTERN_ML_VALIDATION_SPLIT:0.2}
    
    # Learning rate for neural networks
    learning-rate: ${PATTERN_ML_LEARNING_RATE:0.001}
    
    # Number of epochs for training
    epochs: ${PATTERN_ML_EPOCHS:100}
    
    # Model persistence path
    model-path: ${PATTERN_ML_MODEL_PATH:./models}
    
    # Feature extraction configuration
    feature-extraction:
      # Enable AST-based features
      enable-ast-features: true
      
      # Enable text-based features
      enable-text-features: true
      
      # Enable metrics-based features
      enable-metrics-features: true
      
      # Maximum feature vector size
      max-feature-vector-size: 1000
  
  # Performance Optimization Configuration
  performance:
    # Enable performance optimizations
    enable-optimizations: ${PATTERN_PERFORMANCE_ENABLE_OPTIMIZATIONS:true}
    
    # Default optimization strategy
    default-strategy: ${PATTERN_PERFORMANCE_DEFAULT_STRATEGY:PARALLEL_PROCESSING}
    
    # Thread pool configuration
    thread-pool:
      core-size: ${PATTERN_PERFORMANCE_THREAD_POOL_CORE_SIZE:5}
      max-size: ${PATTERN_PERFORMANCE_THREAD_POOL_MAX_SIZE:20}
      queue-capacity: ${PATTERN_PERFORMANCE_THREAD_POOL_QUEUE_CAPACITY:100}
    
    # Batch processing configuration
    batch:
      default-size: ${PATTERN_PERFORMANCE_BATCH_DEFAULT_SIZE:50}
      max-size: ${PATTERN_PERFORMANCE_BATCH_MAX_SIZE:200}
      delay-ms: ${PATTERN_PERFORMANCE_BATCH_DELAY_MS:100}
    
    # Memory management
    memory:
      max-heap-usage: ${PATTERN_PERFORMANCE_MAX_HEAP_USAGE:0.8}
      gc-threshold: ${PATTERN_PERFORMANCE_GC_THRESHOLD:0.7}
  
  # Reporting Configuration
  reporting:
    # Enable report generation
    enable-reports: ${PATTERN_REPORTING_ENABLE_REPORTS:true}
    
    # Report storage path
    storage-path: ${PATTERN_REPORTING_STORAGE_PATH:./reports}
    
    # Supported export formats
    export-formats:
      - PDF
      - HTML
      - JSON
      - CSV
      - EXCEL
    
    # Report retention period (in days)
    retention-days: ${PATTERN_REPORTING_RETENTION_DAYS:90}
    
    # Chart configuration
    charts:
      # Default chart dimensions
      width: 800
      height: 600
      
      # Chart theme
      theme: ${PATTERN_REPORTING_CHART_THEME:default}
      
      # Enable interactive charts
      interactive: ${PATTERN_REPORTING_INTERACTIVE_CHARTS:true}
  
  # Integration Configuration
  integration:
    # GitHub integration
    github:
      enabled: ${PATTERN_INTEGRATION_GITHUB_ENABLED:true}
      api-url: ${PATTERN_INTEGRATION_GITHUB_API_URL:https://api.github.com}
      webhook-secret: ${PATTERN_INTEGRATION_GITHUB_WEBHOOK_SECRET:}
      app-id: ${PATTERN_INTEGRATION_GITHUB_APP_ID:}
      private-key: ${PATTERN_INTEGRATION_GITHUB_PRIVATE_KEY:}
    
    # MCP integration
    mcp:
      enabled: ${PATTERN_INTEGRATION_MCP_ENABLED:true}
      endpoint: ${PATTERN_INTEGRATION_MCP_ENDPOINT:/mcp/pattern-recognition}
      version: ${PATTERN_INTEGRATION_MCP_VERSION:1.0}
    
    # Webhook configuration
    webhook:
      enabled: ${PATTERN_INTEGRATION_WEBHOOK_ENABLED:true}
      endpoint: ${PATTERN_INTEGRATION_WEBHOOK_ENDPOINT:/webhook}
      secret: ${PATTERN_INTEGRATION_WEBHOOK_SECRET:}
      timeout: ${PATTERN_INTEGRATION_WEBHOOK_TIMEOUT:30}
  
  # Security Configuration
  security:
    # Enable authentication
    enable-auth: ${PATTERN_SECURITY_ENABLE_AUTH:true}
    
    # JWT configuration
    jwt:
      secret: ${PATTERN_SECURITY_JWT_SECRET:}
      expiration: ${PATTERN_SECURITY_JWT_EXPIRATION:86400}
    
    # Rate limiting
    rate-limit:
      enabled: ${PATTERN_SECURITY_RATE_LIMIT_ENABLED:true}
      requests-per-minute: ${PATTERN_SECURITY_RATE_LIMIT_RPM:100}
      burst-capacity: ${PATTERN_SECURITY_RATE_LIMIT_BURST:200}
    
    # CORS configuration
    cors:
      enabled: ${PATTERN_SECURITY_CORS_ENABLED:true}
      allowed-origins: ${PATTERN_SECURITY_CORS_ALLOWED_ORIGINS:*}
      allowed-methods: ${PATTERN_SECURITY_CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
      allowed-headers: ${PATTERN_SECURITY_CORS_ALLOWED_HEADERS:*}

---
spring:
  config:
    activate:
      on-profile: development

  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password:
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
  
  h2:
    console:
      enabled: true
      path: /h2-console

logging:
  level:
    com.zamaz.mcp.pattern: DEBUG
    org.springframework.security: DEBUG

pattern-recognition:
  detection:
    max-threads: 2
    timeout-per-file: 10
    enable-caching: false
  
  ml:
    enable-learning: false
  
  performance:
    enable-optimizations: false

---
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password:
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false

logging:
  level:
    com.zamaz.mcp.pattern: INFO
    org.springframework.security: WARN
    org.hibernate.SQL: WARN

pattern-recognition:
  detection:
    max-threads: 1
    timeout-per-file: 5
    enable-caching: false
  
  ml:
    enable-learning: false
  
  performance:
    enable-optimizations: false
  
  reporting:
    enable-reports: false

---
spring:
  config:
    activate:
      on-profile: production

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
  
  redis:
    host: ${REDIS_HOST:redis}
    port: ${REDIS_PORT:6379}

logging:
  level:
    com.zamaz.mcp.pattern: INFO
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
    org.springframework.cache: WARN

pattern-recognition:
  detection:
    max-threads: 20
    timeout-per-file: 60
    enable-caching: true
    cache-ttl: 120
  
  ml:
    enable-learning: true
  
  performance:
    enable-optimizations: true
    default-strategy: PARALLEL_PROCESSING
  
  reporting:
    enable-reports: true
    retention-days: 180