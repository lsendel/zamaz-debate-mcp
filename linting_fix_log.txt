.github/__init__.py:1:1: N999 Invalid module name: '.github'
.github/monitoring/custom_metrics.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from prometheus_client import CollectorRegistry, Counter, Gauge, Histogram, Info, Summary, generate_latest
12 |
13 | from ..scripts.core.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 |
15 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/monitoring/custom_metrics.py:244:41: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
243 |         # Maintain rolling window (last 1000 requests)
244 |         if len(self.processing_times) > 1000:
    |                                         ^^^^ PLR2004
245 |             self.processing_times.pop(0)
    |

.github/monitoring/custom_metrics.py:322:63: PLR2004 Magic value used in comparison, consider replacing `0.05` with a constant variable
    |
320 |             {
321 |                 "name": "HighErrorRate",
322 |                 "condition": lambda: self._get_error_rate() > 0.05,
    |                                                               ^^^^ PLR2004
323 |                 "severity": "critical",
324 |                 "message": "Error rate exceeds 5%",
    |

.github/monitoring/custom_metrics.py:328:71: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
326 |             {
327 |                 "name": "LowGitHubRateLimit",
328 |                 "condition": lambda: self._get_rate_limit_percent() < 10,
    |                                                                       ^^ PLR2004
329 |                 "severity": "warning",
330 |                 "message": "GitHub rate limit below 10%",
    |

.github/monitoring/custom_metrics.py:334:67: PLR2004 Magic value used in comparison, consider replacing `300` with a constant variable
    |
332 |             {
333 |                 "name": "SlowPRProcessing",
334 |                 "condition": lambda: self._get_processing_p95() > 300,
    |                                                                   ^^^ PLR2004
335 |                 "severity": "warning",
336 |                 "message": "PR processing P95 exceeds 5 minutes",
    |

.github/monitoring/custom_metrics.py:340:67: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
338 |             {
339 |                 "name": "HighQueueSize",
340 |                 "condition": lambda: self._get_max_queue_size() > 100,
    |                                                                   ^^^ PLR2004
341 |                 "severity": "warning",
342 |                 "message": "PR queue size exceeds 100",
    |

.github/monitoring/custom_metrics.py:346:68: PLR2004 Magic value used in comparison, consider replacing `1024` with a constant variable
    |
344 |             {
345 |                 "name": "MemoryUsageHigh",
346 |                 "condition": lambda: self._get_memory_usage_mb() > 1024,
    |                                                                    ^^^^ PLR2004
347 |                 "severity": "warning",
348 |                 "message": "Memory usage exceeds 1GB",
    |

.github/scripts/__init__.py:1:1: N999 Invalid module name: '.github'
.github/scripts/analytics_collector.py:23:19: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
22 | # Constants
23 | DEFAULT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "analytics.db")
   |                   ^^^^^^^^^^^^ PTH118
   |

.github/scripts/analytics_collector.py:23:32: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
22 | # Constants
23 | DEFAULT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "analytics.db")
   |                                ^^^^^^^^^^^^^^^ PTH120
   |

.github/scripts/analytics_collector.py:34:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
33 |         # Ensure directory exists
34 |         os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
35 |
36 |         # Initialize database
   |

.github/scripts/analytics_collector.py:34:21: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
33 |         # Ensure directory exists
34 |         os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
   |                     ^^^^^^^^^^^^^^^ PTH120
35 |
36 |         # Initialize database
   |

.github/scripts/analytics_dashboard.py:525:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
524 |     # Create templates directory
525 |     templates_dir = os.path.join(os.path.dirname(__file__), "templates")
    |                     ^^^^^^^^^^^^ PTH118
526 |     os.makedirs(templates_dir, exist_ok=True)
    |

.github/scripts/analytics_dashboard.py:525:34: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
    |
524 |     # Create templates directory
525 |     templates_dir = os.path.join(os.path.dirname(__file__), "templates")
    |                                  ^^^^^^^^^^^^^^^ PTH120
526 |     os.makedirs(templates_dir, exist_ok=True)
    |

.github/scripts/analytics_dashboard.py:526:5: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
524 |     # Create templates directory
525 |     templates_dir = os.path.join(os.path.dirname(__file__), "templates")
526 |     os.makedirs(templates_dir, exist_ok=True)
    |     ^^^^^^^^^^^ PTH103
527 |
528 |     # Write the HTML template
    |

.github/scripts/analytics_dashboard.py:529:10: PTH123 `open()` should be replaced by `Path.open()`
    |
528 |     # Write the HTML template
529 |     with open(os.path.join(templates_dir, "dashboard.html"), "w") as f:
    |          ^^^^ PTH123
530 |         f.write(html_content)
    |

.github/scripts/analytics_dashboard.py:529:15: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
528 |     # Write the HTML template
529 |     with open(os.path.join(templates_dir, "dashboard.html"), "w") as f:
    |               ^^^^^^^^^^^^ PTH118
530 |         f.write(html_content)
    |

.github/scripts/analytics_dashboard.py:539:49: PLW1508 Invalid type for environment variable default; expected `str` or `None`
    |
538 |     # Run the Flask app
539 |     port = int(os.environ.get("DASHBOARD_PORT", 5001))
    |                                                 ^^^^ PLW1508
540 |     app.run(host="0.0.0.0", port=port, debug=True)
    |

.github/scripts/analytics_dashboard.py:540:18: S104 Possible binding to all interfaces
    |
538 |     # Run the Flask app
539 |     port = int(os.environ.get("DASHBOARD_PORT", 5001))
540 |     app.run(host="0.0.0.0", port=port, debug=True)
    |                  ^^^^^^^^^ S104
    |

.github/scripts/analytics_dashboard.py:540:40: S201 Use of `debug=True` in Flask app detected
    |
538 |     # Run the Flask app
539 |     port = int(os.environ.get("DASHBOARD_PORT", 5001))
540 |     app.run(host="0.0.0.0", port=port, debug=True)
    |                                        ^^^^^^^^^^ S201
    |

.github/scripts/analyzers/__init__.py:1:1: N999 Invalid module name: '.github'
.github/scripts/analyzers/base_analyzer.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from typing import Any
14 |
15 | from ..core.exceptions import AnalysisTimeoutError, FileNotSupportedError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ..core.interfaces import AnalysisResult, AnalyzerInterface, CodeIssue, IssueLevel
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/base_analyzer.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from typing import Any
14 |
15 | from ..core.exceptions import AnalysisTimeoutError, FileNotSupportedError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ..core.interfaces import AnalysisResult, AnalyzerInterface, CodeIssue, IssueLevel
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/base_analyzer.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ..core.exceptions import AnalysisTimeoutError, FileNotSupportedError
16 | from ..core.interfaces import AnalysisResult, AnalyzerInterface, CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/base_analyzer.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ..core.exceptions import AnalysisTimeoutError, FileNotSupportedError
16 | from ..core.interfaces import AnalysisResult, AnalyzerInterface, CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/base_analyzer.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ..core.exceptions import AnalysisTimeoutError, FileNotSupportedError
16 | from ..core.interfaces import AnalysisResult, AnalyzerInterface, CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/base_analyzer.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ..core.exceptions import AnalysisTimeoutError, FileNotSupportedError
16 | from ..core.interfaces import AnalysisResult, AnalyzerInterface, CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/base_analyzer.py:141:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
140 |             except TimeoutError:
141 |                 raise AnalysisTimeoutError(file_path, analysis_context.timeout_seconds)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
142 |             except Exception as e:
143 |                 # Log error but continue with other strategies
    |

.github/scripts/analyzers/documentation_analyzer.py:39:12: F401 `docutils.parsers.rst` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
38 |     import docutils.core
39 |     import docutils.parsers.rst
   |            ^^^^^^^^^^^^^^^^^^^^ F401
40 |     import javalang
41 |     import markdown
   |
   = help: Remove unused import: `docutils.parsers.rst`

.github/scripts/analyzers/documentation_analyzer.py:42:12: F401 `mistune` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
40 |     import javalang
41 |     import markdown
42 |     import mistune
   |            ^^^^^^^ F401
43 |     import nltk
44 |     import numpy as np
   |
   = help: Remove unused import: `mistune`

.github/scripts/analyzers/documentation_analyzer.py:43:12: F401 `nltk` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
41 |     import markdown
42 |     import mistune
43 |     import nltk
   |            ^^^^ F401
44 |     import numpy as np
45 |     import spacy
   |
   = help: Remove unused import: `nltk`

.github/scripts/analyzers/documentation_analyzer.py:44:21: F401 `numpy` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
42 |     import mistune
43 |     import nltk
44 |     import numpy as np
   |                     ^^ F401
45 |     import spacy
46 |     from asciidoc import AsciiDocAPI
   |
   = help: Remove unused import: `numpy`

.github/scripts/analyzers/documentation_analyzer.py:45:12: F401 `spacy` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
43 |     import nltk
44 |     import numpy as np
45 |     import spacy
   |            ^^^^^ F401
46 |     from asciidoc import AsciiDocAPI
47 |     from bs4 import BeautifulSoup
   |
   = help: Remove unused import: `spacy`

.github/scripts/analyzers/documentation_analyzer.py:51:26: F401 `pygments.highlight` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
49 |     from nltk.stem import WordNetLemmatizer
50 |     from nltk.tokenize import sent_tokenize, word_tokenize
51 |     from pygments import highlight
   |                          ^^^^^^^^^ F401
52 |     from pygments.formatters import HtmlFormatter
53 |     from pygments.lexers import get_lexer_by_name, guess_lexer
   |
   = help: Remove unused import: `pygments.highlight`

.github/scripts/analyzers/documentation_analyzer.py:52:37: F401 `pygments.formatters.HtmlFormatter` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
50 |     from nltk.tokenize import sent_tokenize, word_tokenize
51 |     from pygments import highlight
52 |     from pygments.formatters import HtmlFormatter
   |                                     ^^^^^^^^^^^^^ F401
53 |     from pygments.lexers import get_lexer_by_name, guess_lexer
54 |     from sentence_transformers import SentenceTransformer
   |
   = help: Remove unused import: `pygments.formatters.HtmlFormatter`

.github/scripts/analyzers/documentation_analyzer.py:53:33: F401 `pygments.lexers.get_lexer_by_name` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
51 |     from pygments import highlight
52 |     from pygments.formatters import HtmlFormatter
53 |     from pygments.lexers import get_lexer_by_name, guess_lexer
   |                                 ^^^^^^^^^^^^^^^^^ F401
54 |     from sentence_transformers import SentenceTransformer
55 |     from sklearn.cluster import KMeans
   |
   = help: Remove unused import

.github/scripts/analyzers/documentation_analyzer.py:53:52: F401 `pygments.lexers.guess_lexer` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
51 |     from pygments import highlight
52 |     from pygments.formatters import HtmlFormatter
53 |     from pygments.lexers import get_lexer_by_name, guess_lexer
   |                                                    ^^^^^^^^^^^ F401
54 |     from sentence_transformers import SentenceTransformer
55 |     from sklearn.cluster import KMeans
   |
   = help: Remove unused import

.github/scripts/analyzers/documentation_analyzer.py:54:39: F401 `sentence_transformers.SentenceTransformer` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
52 |     from pygments.formatters import HtmlFormatter
53 |     from pygments.lexers import get_lexer_by_name, guess_lexer
54 |     from sentence_transformers import SentenceTransformer
   |                                       ^^^^^^^^^^^^^^^^^^^ F401
55 |     from sklearn.cluster import KMeans
56 |     from sklearn.feature_extraction.text import TfidfVectorizer
   |
   = help: Remove unused import: `sentence_transformers.SentenceTransformer`

.github/scripts/analyzers/documentation_analyzer.py:55:33: F401 `sklearn.cluster.KMeans` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
53 |     from pygments.lexers import get_lexer_by_name, guess_lexer
54 |     from sentence_transformers import SentenceTransformer
55 |     from sklearn.cluster import KMeans
   |                                 ^^^^^^ F401
56 |     from sklearn.feature_extraction.text import TfidfVectorizer
57 |     from sklearn.metrics.pairwise import cosine_similarity
   |
   = help: Remove unused import: `sklearn.cluster.KMeans`

.github/scripts/analyzers/documentation_analyzer.py:629:18: PTH123 `open()` should be replaced by `Path.open()`
    |
628 |         try:
629 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
630 |                 content = f.read()
631 |         except UnicodeDecodeError:
    |

.github/scripts/analyzers/documentation_analyzer.py:633:22: PTH123 `open()` should be replaced by `Path.open()`
    |
631 |         except UnicodeDecodeError:
632 |             try:
633 |                 with open(file_path, encoding="latin-1") as f:
    |                      ^^^^ PTH123
634 |                     content = f.read()
635 |             except:
    |

.github/scripts/analyzers/documentation_analyzer.py:635:13: E722 Do not use bare `except`
    |
633 |                 with open(file_path, encoding="latin-1") as f:
634 |                     content = f.read()
635 |             except:
    |             ^^^^^^ E722
636 |                 logger.warning(f"Could not read file: {file_path}")
637 |                 return CodeFile(path=file_path, language="unknown")
    |

.github/scripts/analyzers/documentation_analyzer.py:1003:13: E722 Do not use bare `except`
     |
1001 |                 self.lemmatizer = WordNetLemmatizer()
1002 |                 self.stop_words = set(stopwords.words("english"))
1003 |             except:
     |             ^^^^^^ E722
1004 |                 pass
     |

.github/scripts/analyzers/documentation_analyzer.py:1003:13: S110 `try`-`except`-`pass` detected, consider logging the exception
     |
1001 |                   self.lemmatizer = WordNetLemmatizer()
1002 |                   self.stop_words = set(stopwords.words("english"))
1003 | /             except:
1004 | |                 pass
     | |____________________^ S110
1005 |
1006 |       def analyze_document(self, doc: DocumentationFile) -> DocumentationFile:
     |

.github/scripts/analyzers/documentation_analyzer.py:1028:9: E722 Do not use bare `except`
     |
1026 |                 sentences = len([s for s in content.split(".") if s.strip()])
1027 |                 words = len(content.split())
1028 |         except:
     |         ^^^^^^ E722
1029 |             sentences = len([s for s in content.split(".") if s.strip()])
1030 |             words = len(content.split())
     |

.github/scripts/analyzers/documentation_analyzer.py:1059:36: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
     |
1057 |         if doc.headers:
1058 |             score += 20
1059 |             if len(doc.headers) >= 3:
     |                                    ^ PLR2004
1060 |                 score += 10
     |

.github/scripts/analyzers/documentation_analyzer.py:1083:12: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
     |
1082 |         # Check for content length (not too short, not too long)
1083 |         if 100 <= doc.word_count <= 5000:
     |            ^^^ PLR2004
1084 |             score += 15
1085 |         elif doc.word_count > 5000:
     |

.github/scripts/analyzers/documentation_analyzer.py:1083:37: PLR2004 Magic value used in comparison, consider replacing `5000` with a constant variable
     |
1082 |         # Check for content length (not too short, not too long)
1083 |         if 100 <= doc.word_count <= 5000:
     |                                     ^^^^ PLR2004
1084 |             score += 15
1085 |         elif doc.word_count > 5000:
     |

.github/scripts/analyzers/documentation_analyzer.py:1085:31: PLR2004 Magic value used in comparison, consider replacing `5000` with a constant variable
     |
1083 |         if 100 <= doc.word_count <= 5000:
1084 |             score += 15
1085 |         elif doc.word_count > 5000:
     |                               ^^^^ PLR2004
1086 |             score += 10
1087 |         elif doc.word_count > 50:
     |

.github/scripts/analyzers/documentation_analyzer.py:1087:31: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
     |
1085 |         elif doc.word_count > 5000:
1086 |             score += 10
1087 |         elif doc.word_count > 50:
     |                               ^^ PLR2004
1088 |             score += 5
     |

.github/scripts/analyzers/documentation_analyzer.py:1100:23: PLR2004 Magic value used in comparison, consider replacing `30` with a constant variable
     |
1098 |         days_old = (now - doc.last_modified).days
1099 |
1100 |         if days_old < 30:
     |                       ^^ PLR2004
1101 |             return 100.0
1102 |         elif days_old < 90:
     |

.github/scripts/analyzers/documentation_analyzer.py:1102:25: PLR2004 Magic value used in comparison, consider replacing `90` with a constant variable
     |
1100 |         if days_old < 30:
1101 |             return 100.0
1102 |         elif days_old < 90:
     |                         ^^ PLR2004
1103 |             return 80.0
1104 |         elif days_old < 180:
     |

.github/scripts/analyzers/documentation_analyzer.py:1104:25: PLR2004 Magic value used in comparison, consider replacing `180` with a constant variable
     |
1102 |         elif days_old < 90:
1103 |             return 80.0
1104 |         elif days_old < 180:
     |                         ^^^ PLR2004
1105 |             return 60.0
1106 |         elif days_old < 365:
     |

.github/scripts/analyzers/documentation_analyzer.py:1106:25: PLR2004 Magic value used in comparison, consider replacing `365` with a constant variable
     |
1104 |         elif days_old < 180:
1105 |             return 60.0
1106 |         elif days_old < 365:
     |                         ^^^ PLR2004
1107 |             return 40.0
1108 |         else:
     |

.github/scripts/analyzers/documentation_analyzer.py:1128:9: PLR0912 Too many branches (17 > 12)
     |
1126 |         self.code_extractor = CodeDocumentationExtractor()
1127 |
1128 |     def analyze_coverage(self, project_path: str) -> dict[str, Any]:
     |         ^^^^^^^^^^^^^^^^ PLR0912
1129 |         """Analyze documentation coverage for the entire project."""
1130 |         coverage_data = {
     |

.github/scripts/analyzers/documentation_analyzer.py:1149:39: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1147 |             for file in files:
1148 |                 if file.endswith((".java", ".py", ".js", ".ts", ".jsx", ".tsx")):
1149 |                     code_files.append(os.path.join(root, file))
     |                                       ^^^^^^^^^^^^ PTH118
1150 |
1151 |         coverage_data["total_files"] = len(code_files)
     |

.github/scripts/analyzers/documentation_analyzer.py:1204:13: B007 Loop control variable `file_type` not used within loop body
     |
1203 |         # Calculate coverage percentages
1204 |         for file_type, data in coverage_data["coverage_by_type"].items():
     |             ^^^^^^^^^ B007
1205 |             if data["total"] > 0:
1206 |                 data["coverage"] = (data["documented"] / data["total"]) * 100
     |
     = help: Rename unused `file_type` to `_file_type`

.github/scripts/analyzers/documentation_analyzer.py:1225:13: SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
     |
1224 |           if OPTIONAL_IMPORTS:
1225 | /             try:
1226 | |                 self.vectorizer = TfidfVectorizer(stop_words="english", max_features=5000)
1227 | |                 # For semantic search, we'd use a sentence transformer
1228 | |                 # self.sentence_model = SentenceTransformer('all-MiniLM-L6-v2')
1229 | |             except:
1230 | |                 pass
     | |____________________^ SIM105
1231 |
1232 |       def build_index(self, docs: list[DocumentationFile]) -> None:
     |
     = help: Replace with `contextlib.suppress(Exception)`

.github/scripts/analyzers/documentation_analyzer.py:1228:17: ERA001 Found commented-out code
     |
1226 |                 self.vectorizer = TfidfVectorizer(stop_words="english", max_features=5000)
1227 |                 # For semantic search, we'd use a sentence transformer
1228 |                 # self.sentence_model = SentenceTransformer('all-MiniLM-L6-v2')
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
1229 |             except:
1230 |                 pass
     |
     = help: Remove commented-out code

.github/scripts/analyzers/documentation_analyzer.py:1229:13: E722 Do not use bare `except`
     |
1227 |                 # For semantic search, we'd use a sentence transformer
1228 |                 # self.sentence_model = SentenceTransformer('all-MiniLM-L6-v2')
1229 |             except:
     |             ^^^^^^ E722
1230 |                 pass
     |

.github/scripts/analyzers/documentation_analyzer.py:1229:13: S110 `try`-`except`-`pass` detected, consider logging the exception
     |
1227 |                   # For semantic search, we'd use a sentence transformer
1228 |                   # self.sentence_model = SentenceTransformer('all-MiniLM-L6-v2')
1229 | /             except:
1230 | |                 pass
     | |____________________^ S110
1231 |
1232 |       def build_index(self, docs: list[DocumentationFile]) -> None:
     |

.github/scripts/analyzers/documentation_analyzer.py:1323:22: S603 `subprocess` call: check for execution of untrusted input
     |
1321 |         try:
1322 |             # Get recently modified code files
1323 |             result = subprocess.run(
     |                      ^^^^^^^^^^^^^^ S603
1324 |                 ["git", "log", "--name-only", "--pretty=format:", "--since=30 days ago"],
1325 |                 cwd=project_path,
     |

.github/scripts/analyzers/documentation_analyzer.py:1324:17: S607 Starting a process with a partial executable path
     |
1322 |             # Get recently modified code files
1323 |             result = subprocess.run(
1324 |                 ["git", "log", "--name-only", "--pretty=format:", "--since=30 days ago"],
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
1325 |                 cwd=project_path,
1326 |                 capture_output=True,
     |

.github/scripts/analyzers/documentation_analyzer.py:1340:28: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
     |
1339 |                     for doc_path in doc_candidates:
1340 |                         if os.path.exists(doc_path):
     |                            ^^^^^^^^^^^^^^ PTH110
1341 |                             # Check if documentation is older than code
1342 |                             code_mtime = os.path.getmtime(os.path.join(project_path, code_file))
     |

.github/scripts/analyzers/documentation_analyzer.py:1342:42: PTH204 `os.path.getmtime` should be replaced by `Path.stat().st_mtime`
     |
1340 |                         if os.path.exists(doc_path):
1341 |                             # Check if documentation is older than code
1342 |                             code_mtime = os.path.getmtime(os.path.join(project_path, code_file))
     |                                          ^^^^^^^^^^^^^^^^ PTH204
1343 |                             doc_mtime = os.path.getmtime(doc_path)
     |

.github/scripts/analyzers/documentation_analyzer.py:1342:59: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1340 |                         if os.path.exists(doc_path):
1341 |                             # Check if documentation is older than code
1342 |                             code_mtime = os.path.getmtime(os.path.join(project_path, code_file))
     |                                                           ^^^^^^^^^^^^ PTH118
1343 |                             doc_mtime = os.path.getmtime(doc_path)
     |

.github/scripts/analyzers/documentation_analyzer.py:1343:41: PTH204 `os.path.getmtime` should be replaced by `Path.stat().st_mtime`
     |
1341 |                             # Check if documentation is older than code
1342 |                             code_mtime = os.path.getmtime(os.path.join(project_path, code_file))
1343 |                             doc_mtime = os.path.getmtime(doc_path)
     |                                         ^^^^^^^^^^^^^^^^ PTH204
1344 |
1345 |                             if doc_mtime < code_mtime:
     |

.github/scripts/analyzers/documentation_analyzer.py:1369:21: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
     |
1367 |     def _find_related_docs(self, code_file: str, project_path: str) -> list[str]:
1368 |         """Find documentation files related to a code file."""
1369 |         base_name = os.path.splitext(os.path.basename(code_file))[0]
     |                     ^^^^^^^^^^^^^^^^ PTH122
1370 |         candidates = []
     |

.github/scripts/analyzers/documentation_analyzer.py:1369:38: PTH119 `os.path.basename()` should be replaced by `Path.name`
     |
1367 |     def _find_related_docs(self, code_file: str, project_path: str) -> list[str]:
1368 |         """Find documentation files related to a code file."""
1369 |         base_name = os.path.splitext(os.path.basename(code_file))[0]
     |                                      ^^^^^^^^^^^^^^^^ PTH119
1370 |         candidates = []
     |

.github/scripts/analyzers/documentation_analyzer.py:1373:43: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1372 |         # Look for documentation files with similar names
1373 |         for root, _dirs, files in os.walk(os.path.join(project_path, "docs")):
     |                                           ^^^^^^^^^^^^ PTH118
1374 |             for file in files:
1375 |                 if file.endswith((".md", ".rst", ".adoc")) and base_name.lower() in file.lower():
     |

.github/scripts/analyzers/documentation_analyzer.py:1376:39: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1374 |             for file in files:
1375 |                 if file.endswith((".md", ".rst", ".adoc")) and base_name.lower() in file.lower():
1376 |                     candidates.append(os.path.join(root, file))
     |                                       ^^^^^^^^^^^^ PTH118
1377 |
1378 |         return candidates
     |

.github/scripts/analyzers/documentation_analyzer.py:1388:33: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1386 |             for file in files:
1387 |                 if file.endswith((".md", ".rst", ".adoc")):
1388 |                     file_path = os.path.join(root, file)
     |                                 ^^^^^^^^^^^^ PTH118
1389 |
1390 |                     try:
     |

.github/scripts/analyzers/documentation_analyzer.py:1391:30: PTH123 `open()` should be replaced by `Path.open()`
     |
1390 |                     try:
1391 |                         with open(file_path, encoding="utf-8") as f:
     |                              ^^^^ PTH123
1392 |                             content = f.read()
     |

.github/scripts/analyzers/documentation_analyzer.py:1403:51: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1401 | …                     # Resolve relative path
1402 | …                     if url.startswith("/"):
1403 | …                         target_path = os.path.join(project_path, url[1:])
     |                                         ^^^^^^^^^^^^ PTH118
1404 | …                     else:
1405 | …                         target_path = os.path.join(os.path.dirname(file_path), url)
     |

.github/scripts/analyzers/documentation_analyzer.py:1405:51: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1403 |                                     target_path = os.path.join(project_path, url[1:])
1404 |                                 else:
1405 |                                     target_path = os.path.join(os.path.dirname(file_path), url)
     |                                                   ^^^^^^^^^^^^ PTH118
1406 |
1407 |                                 # Remove anchor
     |

.github/scripts/analyzers/documentation_analyzer.py:1405:64: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
     |
1403 |                                     target_path = os.path.join(project_path, url[1:])
1404 |                                 else:
1405 |                                     target_path = os.path.join(os.path.dirname(file_path), url)
     |                                                                ^^^^^^^^^^^^^^^ PTH120
1406 |
1407 |                                 # Remove anchor
     |

.github/scripts/analyzers/documentation_analyzer.py:1411:40: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
     |
1409 |                                     target_path = target_path.split("#")[0]
1410 |
1411 |                                 if not os.path.exists(target_path):
     |                                        ^^^^^^^^^^^^^^ PTH110
1412 |                                     issues.append(
1413 |                                         DocumentationIssue(
     |

.github/scripts/analyzers/documentation_analyzer.py:1436:33: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1434 |             for file in files:
1435 |                 if file.endswith((".java", ".py", ".js", ".ts")):
1436 |                     file_path = os.path.join(root, file)
     |                                 ^^^^^^^^^^^^ PTH118
1437 |
1438 |                     try:
     |

.github/scripts/analyzers/documentation_analyzer.py:1447:43: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1445 |         # Check if API documentation exists
1446 |         api_doc_files = []
1447 |         for root, _dirs, files in os.walk(os.path.join(project_path, "docs")):
     |                                           ^^^^^^^^^^^^ PTH118
1448 |             for file in files:
1449 |                 if "api" in file.lower() and file.endswith((".md", ".rst", ".adoc")):
     |

.github/scripts/analyzers/documentation_analyzer.py:1450:42: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1448 |             for file in files:
1449 |                 if "api" in file.lower() and file.endswith((".md", ".rst", ".adoc")):
1450 |                     api_doc_files.append(os.path.join(root, file))
     |                                          ^^^^^^^^^^^^ PTH118
1451 |
1452 |         if api_endpoints and not api_doc_files:
     |

.github/scripts/analyzers/documentation_analyzer.py:1490:48: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
     |
1489 |         # High priority recommendations
1490 |         if coverage_data["overall_coverage"] < 50:
     |                                                ^^ PLR2004
1491 |             recommendations["high_priority"].append(
1492 |                 {
     |

.github/scripts/analyzers/documentation_analyzer.py:1516:35: PLR2004 Magic value used in comparison, consider replacing `70` with a constant variable
     |
1514 |         # Medium priority recommendations
1515 |         for file_type, data in coverage_data["coverage_by_type"].items():
1516 |             if data["coverage"] < 70:
     |                                   ^^ PLR2004
1517 |                 recommendations["medium_priority"].append(
1518 |                     {
     |

.github/scripts/analyzers/documentation_analyzer.py:1809:29: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1808 |             for file in files:
1809 |                 file_path = os.path.join(root, file)
     |                             ^^^^^^^^^^^^ PTH118
1810 |                 file_extension = Path(file).suffix.lower()
     |

.github/scripts/analyzers/documentation_analyzer.py:1825:30: PTH123 `open()` should be replaced by `Path.open()`
     |
1823 |                 if parser:
1824 |                     try:
1825 |                         with open(file_path, encoding="utf-8") as f:
     |                              ^^^^ PTH123
1826 |                             content = f.read()
     |

.github/scripts/analyzers/documentation_analyzer.py:1831:32: PTH116 `os.stat()` should be replaced by `Path.stat()`, `Path.owner()`, or `Path.group()`
     |
1830 |                         # Get file stats
1831 |                         stat = os.stat(file_path)
     |                                ^^^^^^^ PTH116
1832 |                         doc.last_modified = datetime.datetime.fromtimestamp(stat.st_mtime)
     |

.github/scripts/analyzers/documentation_analyzer.py:1858:33: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1856 |             for file in files:
1857 |                 if file.endswith((".java", ".py", ".js", ".ts", ".jsx", ".tsx")):
1858 |                     file_path = os.path.join(root, file)
     |                                 ^^^^^^^^^^^^ PTH118
1859 |
1860 |                     # Check if file actually exists
     |

.github/scripts/analyzers/documentation_analyzer.py:1861:28: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
     |
1860 |                     # Check if file actually exists
1861 |                     if not os.path.exists(file_path):
     |                            ^^^^^^^^^^^^^^ PTH110
1862 |                         continue
     |

.github/scripts/analyzers/documentation_analyzer.py:1914:36: PLR2004 Magic value used in comparison, consider replacing `30` with a constant variable
     |
1912 |         # Check for low-quality documentation
1913 |         for doc in docs:
1914 |             if doc.quality_score < 30:
     |                                    ^^ PLR2004
1915 |                 issues.append(
1916 |                     DocumentationIssue(
     |

.github/scripts/analyzers/documentation_analyzer.py:1925:33: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
     |
1923 |                 )
1924 |
1925 |             if doc.word_count < 50:
     |                                 ^^ PLR2004
1926 |                 issues.append(
1927 |                     DocumentationIssue(
     |

.github/scripts/analyzers/documentation_analyzer.py:1949:18: PTH123 `open()` should be replaced by `Path.open()`
     |
1947 |         """Export analysis results to JSON file."""
1948 |         try:
1949 |             with open(output_path, "w", encoding="utf-8") as f:
     |                  ^^^^ PTH123
1950 |                 json.dump(analysis_results, f, indent=2, default=str)
1951 |             logger.info(f"Analysis results exported to {output_path}")
     |

.github/scripts/analyzers/documentation_analyzer.py:1955:9: PLR0912 Too many branches (16 > 12)
     |
1953 |             logger.error(f"Error exporting analysis: {e}")
1954 |
1955 |     def generate_report(self, analysis_results: dict[str, Any]) -> str:
     |         ^^^^^^^^^^^^^^^ PLR0912
1956 |         """Generate a comprehensive markdown report."""
1957 |         report = []
     |

.github/scripts/analyzers/documentation_analyzer.py:1955:9: PLR0915 Too many statements (60 > 50)
     |
1953 |             logger.error(f"Error exporting analysis: {e}")
1954 |
1955 |     def generate_report(self, analysis_results: dict[str, Any]) -> str:
     |         ^^^^^^^^^^^^^^^ PLR0915
1956 |         """Generate a comprehensive markdown report."""
1957 |         report = []
     |

.github/scripts/analyzers/documentation_analyzer.py:2074:14: PTH123 `open()` should be replaced by `Path.open()`
     |
2072 |     if args.report:
2073 |         report = system.generate_report(results)
2074 |         with open(args.report, "w", encoding="utf-8") as f:
     |              ^^^^ PTH123
2075 |             f.write(report)
     |

.github/scripts/analyzers/security_analyzer.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | import re
 9 |
10 | from ..core.interfaces import CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from .base_analyzer import AnalysisStrategy, AnalyzerContext
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/security_analyzer.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | import re
 9 |
10 | from ..core.interfaces import CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from .base_analyzer import AnalysisStrategy, AnalyzerContext
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/security_analyzer.py:207:13: PLW2901 `for` loop variable `line` overwritten by assignment target
    |
206 |         for line_num, line in enumerate(lines, 1):
207 |             line = line.strip()
    |             ^^^^ PLW2901
208 |             if not line or line.startswith("#"):
209 |                 continue
    |

.github/scripts/analyzers/security_analyzer.py:236:41: ARG002 Unused method argument: `context`
    |
234 |         return issues
235 |
236 |     async def _check_npm_packages(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                                         ^^^^^^^ ARG002
237 |         """Check package.json for vulnerabilities."""
238 |         # Implementation would parse JSON and check dependencies
    |

.github/scripts/analyzers/security_analyzer.py:241:38: ARG002 Unused method argument: `context`
    |
239 |         return []
240 |
241 |     async def _check_ruby_gems(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                                      ^^^^^^^ ARG002
242 |         """Check Gemfile for vulnerabilities."""
243 |         return []
    |

.github/scripts/analyzers/security_analyzer.py:245:39: ARG002 Unused method argument: `context`
    |
243 |         return []
244 |
245 |     async def _check_go_modules(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                                       ^^^^^^^ ARG002
246 |         """Check go.mod for vulnerabilities."""
247 |         return []
    |

.github/scripts/analyzers/security_analyzer.py:249:47: ARG002 Unused method argument: `context`
    |
247 |         return []
248 |
249 |     async def _check_maven_dependencies(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                                               ^^^^^^^ ARG002
250 |         """Check pom.xml for vulnerabilities."""
251 |         return []
    |

.github/scripts/analyzers/security_analyzer.py:253:48: ARG002 Unused method argument: `context`
    |
251 |         return []
252 |
253 |     async def _check_gradle_dependencies(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                                                ^^^^^^^ ARG002
254 |         """Check build.gradle for vulnerabilities."""
255 |         return []
    |

.github/scripts/analyzers/security_analyzer.py:330:56: ARG002 Unused method argument: `context`
    |
328 |         return issues
329 |
330 |     async def _check_javascript_input_validation(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                                                        ^^^^^^^ ARG002
331 |         """Check JavaScript code for input validation issues."""
332 |         # Implementation for JavaScript
    |

.github/scripts/analyzers/style_analyzer.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | import re
 9 |
10 | from ..core.interfaces import CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from .base_analyzer import AnalysisStrategy, AnalyzerContext
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/style_analyzer.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | import re
 9 |
10 | from ..core.interfaces import CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from .base_analyzer import AnalysisStrategy, AnalyzerContext
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/style_analyzer.py:26:55: PLR2004 Magic value used in comparison, consider replacing `120` with a constant variable
   |
24 |                 {
25 |                     "name": "line_length",
26 |                     "check": lambda line: len(line) > 120,
   |                                                       ^^^ PLR2004
27 |                     "message": "Line too long ({length} > 120 characters)",
28 |                     "level": IssueLevel.INFO,
   |

.github/scripts/analyzers/style_analyzer.py:53:55: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
   |
51 |                 {
52 |                     "name": "line_length",
53 |                     "check": lambda line: len(line) > 100,
   |                                                       ^^^ PLR2004
54 |                     "message": "Line too long ({length} > 100 characters)",
55 |                     "level": IssueLevel.INFO,
   |

.github/scripts/analyzers/style_analyzer.py:94:94: F821 Undefined name `Optional`
   |
92 |         return issues
93 |
94 |     def _check_rule(self, rule: dict, line: str, line_num: int, context: AnalyzerContext) -> Optional[CodeIssue]:
   |                                                                                              ^^^^^^^^ F821
95 |         """Check a single style rule."""
96 |         # Simple check function
   |

.github/scripts/analyzers/style_analyzer.py:199:33: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
197 |                 complexity = self._calculate_complexity(func)
198 |
199 |                 if complexity > 10:
    |                                 ^^ PLR2004
200 |                     issues.append(
201 |                         CodeIssue(
    |

.github/scripts/analyzers/style_analyzer.py:286:25: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
    |
284 |             length = func["end_line"] - func["start_line"] + 1
285 |
286 |             if length > 50:
    |                         ^^ PLR2004
287 |                 issues.append(
288 |                     CodeIssue(
    |

.github/scripts/analyzers/style_analyzer.py:315:35: PLR2004 Magic value used in comparison, consider replacing `300` with a constant variable
    |
313 |                     if current_class:
314 |                         size = line_num - current_class["start_line"]
315 |                         if size > 300:
    |                                   ^^^ PLR2004
316 |                             issues.append(
317 |                                 CodeIssue(
    |

.github/scripts/analyzers/style_analyzer.py:333:27: PLR2004 Magic value used in comparison, consider replacing `300` with a constant variable
    |
331 |             if current_class:
332 |                 size = len(lines) - current_class["start_line"] + 1
333 |                 if size > 300:
    |                           ^^^ PLR2004
334 |                     issues.append(
335 |                         CodeIssue(
    |

.github/scripts/analyzers/style_analyzer.py:421:28: ARG002 Unused method argument: `context`
    |
419 |         return issues
420 |
421 |     def _check_jsdoc(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                            ^^^^^^^ ARG002
422 |         """Check JSDoc documentation."""
423 |         # Implementation for JavaScript/TypeScript
    |

.github/scripts/api/diagnostic_endpoints.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from fastapi import APIRouter, Depends, HTTPException, Query
17 |
18 | from ..core.container import ServiceContainer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
20 | from ..core.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ..core.container import ServiceContainer
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ..core.container import ServiceContainer
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ..core.container import ServiceContainer
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ..core.container import ServiceContainer
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ..core.container import ServiceContainer
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ..core.container import ServiceContainer
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
20 | from ..core.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 |
23 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 |
23 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 |
23 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 |
23 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:28:60: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
28 | def get_diagnostic_collector(container: ServiceContainer = Depends()) -> DiagnosticCollector:
   |                                                            ^^^^^^^^^ B008
29 |     """Get diagnostic collector instance."""
30 |     database = container.resolve(DatabaseInterface)
   |

.github/scripts/api/diagnostic_endpoints.py:35:57: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
35 | def get_request_tracer(collector: DiagnosticCollector = Depends(get_diagnostic_collector)) -> RequestTracer:
   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
36 |     """Get request tracer instance."""
37 |     return RequestTracer(collector)
   |

.github/scripts/api/diagnostic_endpoints.py:51:63: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
50 | @router.get("/health/detailed")
51 | async def detailed_health_check(container: ServiceContainer = Depends()) -> dict[str, Any]:
   |                                                               ^^^^^^^^^ B008
52 |     """
53 |     Detailed health check with component status.
   |

.github/scripts/api/diagnostic_endpoints.py:138:61: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
137 | @router.get("/system-state")
138 | async def get_system_state(collector: DiagnosticCollector = Depends(get_diagnostic_collector)) -> dict[str, Any]:
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
139 |     """Get current system state snapshot."""
140 |     return collector.collect_system_state()
    |

.github/scripts/api/diagnostic_endpoints.py:145:59: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
143 | @router.get("/diagnostics/{correlation_id}")
144 | async def get_diagnostic_data(
145 |     correlation_id: str, collector: DiagnosticCollector = Depends(get_diagnostic_collector)
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
146 | ) -> dict[str, Any]:
147 |     """Get diagnostic data for a specific correlation ID."""
    |

.github/scripts/api/diagnostic_endpoints.py:155:74: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
154 | @router.get("/trace/{correlation_id}")
155 | async def get_request_trace(correlation_id: str, tracer: RequestTracer = Depends(get_request_tracer)) -> dict[str, Any]:
    |                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
156 |     """Get request trace for a correlation ID."""
157 |     trace = tracer.get_trace(correlation_id)
    |

.github/scripts/api/diagnostic_endpoints.py:164:55: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
163 | @router.get("/errors/summary")
164 | async def get_error_summary(analyzer: ErrorAnalyzer = Depends(get_error_analyzer)) -> dict[str, Any]:
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
165 |     """Get error analysis summary."""
166 |     return analyzer.get_error_summary()
    |

.github/scripts/api/diagnostic_endpoints.py:170:67: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
169 | @router.get("/performance/summary")
170 | async def get_performance_summary(profiler: PerformanceProfiler = Depends(get_performance_profiler)) -> dict[str, Any]:
    |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
171 |     """Get performance profiling summary."""
172 |     summary = profiler.get_performance_summary()
    |

.github/scripts/api/diagnostic_endpoints.py:179:61: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
178 | @router.get("/metrics/current")
179 | async def get_current_metrics(container: ServiceContainer = Depends()) -> dict[str, Any]:
    |                                                             ^^^^^^^^^ B008
180 |     """Get current metrics snapshot."""
181 |     metrics = container.resolve(MetricsInterface)
    |

.github/scripts/api/diagnostic_endpoints.py:206:38: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
204 |     operation: str,
205 |     duration_seconds: int = Query(default=60, le=300),
206 |     collector: DiagnosticCollector = Depends(get_diagnostic_collector),
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
207 | ) -> dict[str, Any]:
208 |     """
    |

.github/scripts/api/diagnostic_endpoints.py:225:5: RUF006 Store a reference to the return value of `asyncio.create_task`
    |
223 |         collector.end_diagnostic(context.correlation_id)
224 |
225 |     asyncio.create_task(end_profiling())
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF006
226 |
227 |     return {
    |

.github/scripts/api/diagnostic_endpoints.py:238:38: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
236 | @router.get("/active-diagnostics")
237 | async def get_active_diagnostics(
238 |     collector: DiagnosticCollector = Depends(get_diagnostic_collector),
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
239 | ) -> list[dict[str, Any]]:
240 |     """Get list of active diagnostic sessions."""
    |

.github/scripts/api/diagnostic_endpoints.py:259:83: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
258 | @router.post("/test-connection/{component}")
259 | async def test_component_connection(component: str, container: ServiceContainer = Depends()) -> dict[str, Any]:
    |                                                                                   ^^^^^^^^^ B008
260 |     """Test connection to a specific component."""
261 |     start_time = datetime.utcnow()
    |

.github/scripts/api/diagnostic_endpoints.py:303:92: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
301 | @router.delete("/diagnostics/cleanup")
302 | async def cleanup_old_diagnostics(
303 |     older_than_hours: int = Query(default=24, ge=1, le=168), container: ServiceContainer = Depends()
    |                                                                                            ^^^^^^^^^ B008
304 | ) -> dict[str, Any]:
305 |     """Clean up old diagnostic data."""
    |

.github/scripts/claude_kiro_next.py:28:18: PTH123 `open()` should be replaced by `Path.open()`
   |
26 |                 continue
27 |
28 |             with open(tasks_file) as f:
   |                  ^^^^ PTH123
29 |                 content = f.read()
30 |                 lines = content.split("\n")
   |

.github/scripts/claude_kiro_next.py:78:18: PTH123 `open()` should be replaced by `Path.open()`
   |
76 |         """Mark a task as complete in the file."""
77 |         try:
78 |             with open(task["file"]) as f:
   |                  ^^^^ PTH123
79 |                 lines = f.readlines()
   |

.github/scripts/claude_kiro_next.py:84:18: PTH123 `open()` should be replaced by `Path.open()`
   |
82 |             lines[task["line"]] = lines[task["line"]].replace("- [ ]", "- [x]", 1)
83 |
84 |             with open(task["file"], "w") as f:
   |                  ^^^^ PTH123
85 |                 f.writelines(lines)
   |

.github/scripts/code_analyzer.py:118:80: ARG002 Unused method argument: `diff`
    |
116 |         self.temp_dir = None
117 |
118 |     def analyze_pr(self, pr_data: dict[str, Any], files: list[dict[str, Any]], diff: str) -> list[CodeIssue]:
    |                                                                                ^^^^ ARG002
119 |         """Analyze a pull request and return a list of issues."""
120 |         logger.info(f"Analyzing PR #{pr_data['number']} in {pr_data['repository']['full_name']}")
    |

.github/scripts/code_analyzer.py:156:25: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
155 |             # Create directory structure
156 |             full_path = os.path.join(self.temp_dir, file_path)
    |                         ^^^^^^^^^^^^ PTH118
157 |             os.makedirs(os.path.dirname(full_path), exist_ok=True)
    |

.github/scripts/code_analyzer.py:157:13: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
155 |             # Create directory structure
156 |             full_path = os.path.join(self.temp_dir, file_path)
157 |             os.makedirs(os.path.dirname(full_path), exist_ok=True)
    |             ^^^^^^^^^^^ PTH103
158 |
159 |             # Write file content
    |

.github/scripts/code_analyzer.py:157:25: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
    |
155 |             # Create directory structure
156 |             full_path = os.path.join(self.temp_dir, file_path)
157 |             os.makedirs(os.path.dirname(full_path), exist_ok=True)
    |                         ^^^^^^^^^^^^^^^ PTH120
158 |
159 |             # Write file content
    |

.github/scripts/code_analyzer.py:170:18: PTH123 `open()` should be replaced by `Path.open()`
    |
168 |                     logger.warning(f"Error fetching file content: {e!s}")
169 |
170 |             with open(full_path, "w") as f:
    |                  ^^^^ PTH123
171 |                 f.write(content)
    |

.github/scripts/code_analyzer.py:187:24: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    |
186 |             # Determine file type
187 |             file_ext = os.path.splitext(file_path)[1].lower()
    |                        ^^^^^^^^^^^^^^^^ PTH122
188 |
189 |             # Run appropriate syntax checker based on file type
    |

.github/scripts/code_analyzer.py:203:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
201 |     def _check_python_syntax(self, file_path: str) -> None:
202 |         """Check Python syntax using pyflakes."""
203 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
204 |
205 |         try:
    |

.github/scripts/code_analyzer.py:207:18: PTH123 `open()` should be replaced by `Path.open()`
    |
205 |         try:
206 |             # Use Python's built-in compile function to check syntax
207 |             with open(full_path) as f:
    |                  ^^^^ PTH123
208 |                 source = f.read()
    |

.github/scripts/code_analyzer.py:228:26: S603 `subprocess` call: check for execution of untrusted input
    |
226 |             # Try to run pyflakes if available
227 |             try:
228 |                 result = subprocess.run(["pyflakes", full_path], capture_output=True, text=True, check=False)
    |                          ^^^^^^^^^^^^^^ S603
229 |
230 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:228:41: S607 Starting a process with a partial executable path
    |
226 |             # Try to run pyflakes if available
227 |             try:
228 |                 result = subprocess.run(["pyflakes", full_path], capture_output=True, text=True, check=False)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^ S607
229 |
230 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:255:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
253 |     def _check_javascript_syntax(self, file_path: str) -> None:
254 |         """Check JavaScript/TypeScript syntax using ESLint if available."""
255 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
256 |
257 |         try:
    |

.github/scripts/code_analyzer.py:260:26: S603 `subprocess` call: check for execution of untrusted input
    |
258 |             # Try to run ESLint if available
259 |             try:
260 |                 result = subprocess.run(
    |                          ^^^^^^^^^^^^^^ S603
261 |                     ["eslint", "--format", "json", full_path], capture_output=True, text=True, check=False
262 |                 )
    |

.github/scripts/code_analyzer.py:261:21: S607 Starting a process with a partial executable path
    |
259 |             try:
260 |                 result = subprocess.run(
261 |                     ["eslint", "--format", "json", full_path], capture_output=True, text=True, check=False
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
262 |                 )
    |

.github/scripts/code_analyzer.py:299:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
297 |     def _check_java_syntax(self, file_path: str) -> None:
298 |         """Check Java syntax using javac if available."""
299 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
300 |
301 |         try:
    |

.github/scripts/code_analyzer.py:304:26: S603 `subprocess` call: check for execution of untrusted input
    |
302 |             # Try to run javac if available
303 |             try:
304 |                 result = subprocess.run(["javac", "-Xlint:all", full_path], capture_output=True, text=True, check=False)
    |                          ^^^^^^^^^^^^^^ S603
305 |
306 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:304:41: S607 Starting a process with a partial executable path
    |
302 |             # Try to run javac if available
303 |             try:
304 |                 result = subprocess.run(["javac", "-Xlint:all", full_path], capture_output=True, text=True, check=False)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
305 |
306 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:346:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
344 |     def _check_go_syntax(self, file_path: str) -> None:
345 |         """Check Go syntax using go vet if available."""
346 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
347 |
348 |         try:
    |

.github/scripts/code_analyzer.py:351:26: S603 `subprocess` call: check for execution of untrusted input
    |
349 |             # Try to run go vet if available
350 |             try:
351 |                 result = subprocess.run(["go", "vet", full_path], capture_output=True, text=True, check=False)
    |                          ^^^^^^^^^^^^^^ S603
352 |
353 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:351:41: S607 Starting a process with a partial executable path
    |
349 |             # Try to run go vet if available
350 |             try:
351 |                 result = subprocess.run(["go", "vet", full_path], capture_output=True, text=True, check=False)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ S607
352 |
353 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:379:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
377 |     def _check_ruby_syntax(self, file_path: str) -> None:
378 |         """Check Ruby syntax using ruby -c if available."""
379 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
380 |
381 |         try:
    |

.github/scripts/code_analyzer.py:384:26: S603 `subprocess` call: check for execution of untrusted input
    |
382 |             # Try to run ruby -c if available
383 |             try:
384 |                 result = subprocess.run(["ruby", "-c", full_path], capture_output=True, text=True, check=False)
    |                          ^^^^^^^^^^^^^^ S603
385 |
386 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:384:41: S607 Starting a process with a partial executable path
    |
382 |             # Try to run ruby -c if available
383 |             try:
384 |                 result = subprocess.run(["ruby", "-c", full_path], capture_output=True, text=True, check=False)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ S607
385 |
386 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:424:24: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    |
423 |             # Determine file type
424 |             file_ext = os.path.splitext(file_path)[1].lower()
    |                        ^^^^^^^^^^^^^^^^ PTH122
425 |
426 |             # Run appropriate style checker based on file type
    |

.github/scripts/code_analyzer.py:436:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
434 |     def _check_python_style(self, file_path: str) -> None:
435 |         """Check Python style using flake8 if available."""
436 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
437 |
438 |         try:
    |

.github/scripts/code_analyzer.py:441:26: S603 `subprocess` call: check for execution of untrusted input
    |
439 |             # Try to run flake8 if available
440 |             try:
441 |                 result = subprocess.run(
    |                          ^^^^^^^^^^^^^^ S603
442 |                     ["flake8", "--format", "default", full_path], capture_output=True, text=True, check=False
443 |                 )
    |

.github/scripts/code_analyzer.py:442:21: S607 Starting a process with a partial executable path
    |
440 |             try:
441 |                 result = subprocess.run(
442 |                     ["flake8", "--format", "default", full_path], capture_output=True, text=True, check=False
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
443 |                 )
    |

.github/scripts/code_analyzer.py:478:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
476 |     def _check_javascript_style(self, file_path: str) -> None:
477 |         """Check JavaScript/TypeScript style using prettier if available."""
478 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
479 |
480 |         try:
    |

.github/scripts/code_analyzer.py:483:26: S603 `subprocess` call: check for execution of untrusted input
    |
481 |             # Try to run prettier if available
482 |             try:
483 |                 result = subprocess.run(["prettier", "--check", full_path], capture_output=True, text=True, check=False)
    |                          ^^^^^^^^^^^^^^ S603
484 |
485 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:483:41: S607 Starting a process with a partial executable path
    |
481 |             # Try to run prettier if available
482 |             try:
483 |                 result = subprocess.run(["prettier", "--check", full_path], capture_output=True, text=True, check=False)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
484 |
485 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:507:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
505 |     def _check_java_style(self, file_path: str) -> None:
506 |         """Check Java style using checkstyle if available."""
507 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
508 |
509 |         try:
    |

.github/scripts/code_analyzer.py:512:26: S603 `subprocess` call: check for execution of untrusted input
    |
510 |             # Try to run checkstyle if available
511 |             try:
512 |                 result = subprocess.run(
    |                          ^^^^^^^^^^^^^^ S603
513 |                     ["checkstyle", "-f", "plain", full_path], capture_output=True, text=True, check=False
514 |                 )
    |

.github/scripts/code_analyzer.py:513:21: S607 Starting a process with a partial executable path
    |
511 |             try:
512 |                 result = subprocess.run(
513 |                     ["checkstyle", "-f", "plain", full_path], capture_output=True, text=True, check=False
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
514 |                 )
    |

.github/scripts/code_analyzer.py:554:17: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
552 |         try:
553 |             python_files = [
554 |                 os.path.join(self.temp_dir, file.get("filename"))
    |                 ^^^^^^^^^^^^ PTH118
555 |                 for file in files
556 |                 if file.get("filename", "").endswith(".py") and file.get("status") != "removed"
    |

.github/scripts/code_analyzer.py:561:30: S603 `subprocess` call: check for execution of untrusted input
    |
559 |             if python_files:
560 |                 try:
561 |                     result = subprocess.run(
    |                              ^^^^^^^^^^^^^^ S603
562 |                         ["bandit", "-f", "json", "-r", *python_files], capture_output=True, text=True, check=False
563 |                     )
    |

.github/scripts/code_analyzer.py:562:25: S607 Starting a process with a partial executable path
    |
560 |                 try:
561 |                     result = subprocess.run(
562 |                         ["bandit", "-f", "json", "-r", *python_files], capture_output=True, text=True, check=False
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
563 |                     )
    |

.github/scripts/code_analyzer.py:656:25: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
655 |             # Get file content
656 |             full_path = os.path.join(self.temp_dir, file_path)
    |                         ^^^^^^^^^^^^ PTH118
657 |             try:
658 |                 with open(full_path) as f:
    |

.github/scripts/code_analyzer.py:658:22: PTH123 `open()` should be replaced by `Path.open()`
    |
656 |             full_path = os.path.join(self.temp_dir, file_path)
657 |             try:
658 |                 with open(full_path) as f:
    |                      ^^^^ PTH123
659 |                     content = f.read()
    |

.github/scripts/code_analyzer.py:740:24: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    |
739 |             # Get file extension
740 |             file_ext = os.path.splitext(file_path)[1].lower()
    |                        ^^^^^^^^^^^^^^^^ PTH122
741 |
742 |             # Get file content
    |

.github/scripts/code_analyzer.py:743:25: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
742 |             # Get file content
743 |             full_path = os.path.join(self.temp_dir, file_path)
    |                         ^^^^^^^^^^^^ PTH118
744 |             try:
745 |                 with open(full_path) as f:
    |

.github/scripts/code_analyzer.py:745:22: PTH123 `open()` should be replaced by `Path.open()`
    |
743 |             full_path = os.path.join(self.temp_dir, file_path)
744 |             try:
745 |                 with open(full_path) as f:
    |                      ^^^^ PTH123
746 |                     content = f.read()
    |

.github/scripts/code_analyzer.py:795:24: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
793 |     import sys
794 |
795 |     if len(sys.argv) < 2:
    |                        ^ PLR2004
796 |         sys.exit(1)
    |

.github/scripts/code_analyzer.py:807:32: PTH119 `os.path.basename()` should be replaced by `Path.name`
    |
806 |     # Create a mock file structure
807 |     mock_files = [{"filename": os.path.basename(file_path), "status": "modified", "raw_url": f"file://{file_path}"}]
    |                                ^^^^^^^^^^^^^^^^ PTH119
808 |
809 |     # Analyze the file
    |

.github/scripts/comment_generator.py:66:58: ARG002 Unused method argument: `line_number`
   |
64 |         return {"summary_comment": summary_comment, "file_comments": file_comments}
65 |
66 |     def _generate_comment_for_line(self, file_path: str, line_number: int, issues: list[dict[str, Any]]) -> str:
   |                                                          ^^^^^^^^^^^ ARG002
67 |         """Generate a comment for a specific line with issues."""
68 |         if not issues:
   |

.github/scripts/comment_generator.py:75:23: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
   |
74 |         # Get file extension
75 |         _, file_ext = os.path.splitext(file_path)
   |                       ^^^^^^^^^^^^^^^^ PTH122
76 |
77 |         # Start with a header
   |

.github/scripts/comment_generator.py:143:55: ARG002 Unused method argument: `file_ext`
    |
141 |             return self._get_general_explanation(rule_id, file_ext)
142 |
143 |     def _get_security_explanation(self, rule_id: str, file_ext: str) -> str:
    |                                                       ^^^^^^^^ ARG002
144 |         """Get an explanation for a security issue."""
145 |         explanations = {
    |

.github/scripts/comment_generator.py:160:58: ARG002 Unused method argument: `file_ext`
    |
158 |         )
159 |
160 |     def _get_performance_explanation(self, rule_id: str, file_ext: str) -> str:
    |                                                          ^^^^^^^^ ARG002
161 |         """Get an explanation for a performance issue."""
162 |         explanations = {
    |

.github/scripts/comment_generator.py:227:54: ARG002 Unused method argument: `file_ext`
    |
225 |         )
226 |
227 |     def _get_general_explanation(self, rule_id: str, file_ext: str) -> str:
    |                                                      ^^^^^^^^ ARG002
228 |         """Get a general explanation for an issue."""
229 |         explanations = {
    |

.github/scripts/comment_generator.py:334:24: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
332 |     import sys
333 |
334 |     if len(sys.argv) < 2:
    |                        ^ PLR2004
335 |         sys.exit(1)
    |

.github/scripts/comment_generator.py:340:14: PTH123 `open()` should be replaced by `Path.open()`
    |
339 |     try:
340 |         with open(issues_file) as f:
    |              ^^^^ PTH123
341 |             issues = json.load(f)
    |

.github/scripts/config_cli.py:40:24: ARG002 Unused method argument: `params`
   |
38 |         self.config_path = config_path
39 |
40 |     def get(self, url, params=None):
   |                        ^^^^^^ ARG002
41 |         """Mock GET request."""
42 |         if "contents/.kiro/config/github.yml" in url and self.config_path:
   |

.github/scripts/config_cli.py:44:22: PTH123 `open()` should be replaced by `Path.open()`
   |
42 |         if "contents/.kiro/config/github.yml" in url and self.config_path:
43 |             try:
44 |                 with open(self.config_path) as f:
   |                      ^^^^ PTH123
45 |                     content = f.read()
   |

.github/scripts/config_cli.py:53:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
51 |                 return {"content": encoded_content, "sha": "mock-sha"}
52 |             except FileNotFoundError:
53 |                 raise Exception("File not found")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
54 |
55 |         raise Exception("Not implemented")
   |

.github/scripts/config_cli.py:61:27: F821 Undefined name `base64`
   |
59 |         if "contents/.kiro/config/github.yml" in url and self.config_path:
60 |             try:
61 |                 content = base64.b64decode(json["content"]).decode("utf-8")
   |                           ^^^^^^ F821
62 |
63 |                 # Write to file
   |

.github/scripts/config_cli.py:64:22: PTH123 `open()` should be replaced by `Path.open()`
   |
63 |                 # Write to file
64 |                 with open(self.config_path, "w") as f:
   |                      ^^^^ PTH123
65 |                     f.write(content)
   |

.github/scripts/config_cli.py:69:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
67 |                 return {"content": {"sha": "new-mock-sha"}}
68 |             except Exception as e:
69 |                 raise Exception(f"Error writing file: {e!s}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
70 |
71 |         raise Exception("Not implemented")
   |

.github/scripts/config_cli.py:163:28: S113 Probable use of `requests` call without timeout
    |
161 |                 import requests
162 |
163 |                 response = requests.put(url, headers=self.headers, json=json)
    |                            ^^^^^^^^^^^^ S113
164 |                 response.raise_for_status()
165 |                 return response.json()
    |

.github/scripts/config_cli.py:176:22: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
174 |     """Parse repository string into owner and name."""
175 |     parts = repo.split("/")
176 |     if len(parts) != 2:
    |                      ^ PLR2004
177 |         logger.error("Repository must be in format owner/name")
178 |         sys.exit(1)
    |

.github/scripts/config_cli.py:187:18: PTH123 `open()` should be replaced by `Path.open()`
    |
185 |     if data_file:
186 |         try:
187 |             with open(data_file) as f:
    |                  ^^^^ PTH123
188 |                 data_str = f.read()
189 |         except Exception as e:
    |

.github/scripts/config_cli.py:218:18: PTH123 `open()` should be replaced by `Path.open()`
    |
216 |         # Write to file or print to stdout
217 |         if args.output:
218 |             with open(args.output, "w") as f:
    |                  ^^^^ PTH123
219 |                 f.write(output)
220 |             logger.info(f"Configuration written to {args.output}")
    |

.github/scripts/config_cli.py:273:14: PTH123 `open()` should be replaced by `Path.open()`
    |
271 |     try:
272 |         # Load configuration
273 |         with open(args.config) as f:
    |              ^^^^ PTH123
274 |             config = json.load(f) if args.config.endswith(".json") else yaml.safe_load(f)
    |

.github/scripts/config_cli.py:347:18: PTH123 `open()` should be replaced by `Path.open()`
    |
345 |         # Write to file or print to stdout
346 |         if args.output:
347 |             with open(args.output, "w") as f:
    |                  ^^^^ PTH123
348 |                 f.write(output)
349 |             logger.info(f"Team standards written to {args.output}")
    |

.github/scripts/config_manager.py:24:23: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
23 | # Constants
24 | DEFAULT_CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.yml")
   |                       ^^^^^^^^^^^^ PTH118
25 | CONFIG_SCHEMA_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.schema.json")
   |

.github/scripts/config_manager.py:24:36: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
23 | # Constants
24 | DEFAULT_CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.yml")
   |                                    ^^^^^^^^^^^^^^^ PTH120
25 | CONFIG_SCHEMA_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.schema.json")
   |

.github/scripts/config_manager.py:25:22: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
23 | # Constants
24 | DEFAULT_CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.yml")
25 | CONFIG_SCHEMA_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.schema.json")
   |                      ^^^^^^^^^^^^ PTH118
   |

.github/scripts/config_manager.py:25:35: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
23 | # Constants
24 | DEFAULT_CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.yml")
25 | CONFIG_SCHEMA_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.schema.json")
   |                                   ^^^^^^^^^^^^^^^ PTH120
   |

.github/scripts/config_manager.py:40:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
38 |         """Load the default configuration."""
39 |         try:
40 |             if os.path.exists(DEFAULT_CONFIG_PATH):
   |                ^^^^^^^^^^^^^^ PTH110
41 |                 with open(DEFAULT_CONFIG_PATH) as f:
42 |                     return yaml.safe_load(f)
   |

.github/scripts/config_manager.py:41:22: PTH123 `open()` should be replaced by `Path.open()`
   |
39 |         try:
40 |             if os.path.exists(DEFAULT_CONFIG_PATH):
41 |                 with open(DEFAULT_CONFIG_PATH) as f:
   |                      ^^^^ PTH123
42 |                     return yaml.safe_load(f)
43 |         except Exception as e:
   |

.github/scripts/config_manager.py:68:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
66 |         """Load the configuration schema."""
67 |         try:
68 |             if os.path.exists(CONFIG_SCHEMA_PATH):
   |                ^^^^^^^^^^^^^^ PTH110
69 |                 with open(CONFIG_SCHEMA_PATH) as f:
70 |                     return json.load(f)
   |

.github/scripts/config_manager.py:69:22: PTH123 `open()` should be replaced by `Path.open()`
   |
67 |         try:
68 |             if os.path.exists(CONFIG_SCHEMA_PATH):
69 |                 with open(CONFIG_SCHEMA_PATH) as f:
   |                      ^^^^ PTH123
70 |                     return json.load(f)
71 |         except Exception as e:
   |

.github/scripts/config_manager.py:162:9: PLR0912 Too many branches (27 > 12)
    |
160 |         return result
161 |
162 |     def _validate_config(self, config: dict[str, Any]) -> bool:
    |         ^^^^^^^^^^^^^^^^ PLR0912
163 |         """Validate a configuration against the schema."""
164 |         try:
    |

.github/scripts/config_manager.py:162:9: PLR0915 Too many statements (65 > 50)
    |
160 |         return result
161 |
162 |     def _validate_config(self, config: dict[str, Any]) -> bool:
    |         ^^^^^^^^^^^^^^^^ PLR0915
163 |         """Validate a configuration against the schema."""
164 |         try:
    |

.github/scripts/config_manager.py:299:13: E722 Do not use bare `except`
    |
297 |                 logger.warning(f"Configuration file already exists in {repo_owner}/{repo_name}")
298 |                 return False
299 |             except:
    |             ^^^^^^ E722
300 |                 # File doesn't exist, create it
301 |                 pass
    |

.github/scripts/config_manager.py:299:13: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
297 |                   logger.warning(f"Configuration file already exists in {repo_owner}/{repo_name}")
298 |                   return False
299 | /             except:
300 | |                 # File doesn't exist, create it
301 | |                 pass
    | |____________________^ S110
302 |
303 |               # Create the file
    |

.github/scripts/config_manager.py:346:13: E722 Do not use bare `except`
    |
344 |                 response = self.github.get(contents_url)
345 |                 sha = response.get("sha")
346 |             except:
    |             ^^^^^^ E722
347 |                 # File doesn't exist, create it instead
348 |                 return self.create_default_config(repo_owner, repo_name)
    |

.github/scripts/config_manager.py:566:24: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
564 |     import sys
565 |
566 |     if len(sys.argv) < 3:
    |                        ^ PLR2004
567 |         sys.exit(1)
    |

.github/scripts/config_manager.py:574:23: ARG002 Unused method argument: `url`
    |
572 |     # Create a mock GitHub client
573 |     class MockGitHubClient:
574 |         def get(self, url, params=None):
    |                       ^^^ ARG002
575 |             raise Exception("File not found")
    |

.github/scripts/config_manager.py:574:28: ARG002 Unused method argument: `params`
    |
572 |     # Create a mock GitHub client
573 |     class MockGitHubClient:
574 |         def get(self, url, params=None):
    |                            ^^^^^^ ARG002
575 |             raise Exception("File not found")
    |

.github/scripts/config_manager.py:577:23: ARG002 Unused method argument: `url`
    |
575 |             raise Exception("File not found")
576 |
577 |         def put(self, url, json=None):
    |                       ^^^ ARG002
578 |             return {}
    |

.github/scripts/config_manager.py:577:28: ARG002 Unused method argument: `json`
    |
575 |             raise Exception("File not found")
576 |
577 |         def put(self, url, json=None):
    |                            ^^^^ ARG002
578 |             return {}
    |

.github/scripts/context_manager.py:62:1: W293 Blank line contains whitespace
   |
60 |     relevance_score: float = 0.0
61 |     token_count: int = 0
62 |     
   | ^^^^ W293
63 |     def to_dict(self) -> Dict[str, Any]:
64 |         """Convert to dictionary for storage"""
   |
   = help: Remove whitespace from blank line

.github/scripts/context_manager.py:76:1: W293 Blank line contains whitespace
   |
74 |             "token_count": self.token_count
75 |         }
76 |     
   | ^^^^ W293
77 |     @classmethod
78 |     def from_dict(cls, data: Dict[str, Any]) -> 'ContextItem':
   |
   = help: Remove whitespace from blank line

.github/scripts/context_manager.py:95:1: W293 Blank line contains whitespace
   |
93 | class ContextWindow:
94 |     """Manages a sliding context window with intelligent pruning"""
95 |     
   | ^^^^ W293
96 |     def __init__(self, max_tokens: int = 8000, target_tokens: int = 6000):
97 |         self.max_tokens = max_tokens
   |
   = help: Remove whitespace from blank line

.github/scripts/context_manager.py:101:1: W293 Blank line contains whitespace
    |
 99 |         self.items: List[ContextItem] = []
100 |         self.total_tokens = 0
101 |     
    | ^^^^ W293
102 |     def add_item(self, item: ContextItem) -> bool:
103 |         """Add item to context window"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:106:1: W293 Blank line contains whitespace
    |
104 |         if self.total_tokens + item.token_count > self.max_tokens:
105 |             self._prune_to_target()
106 |         
    | ^^^^^^^^ W293
107 |         if self.total_tokens + item.token_count <= self.max_tokens:
108 |             self.items.append(item)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:112:1: W293 Blank line contains whitespace
    |
110 |             return True
111 |         return False
112 |     
    | ^^^^ W293
113 |     def _prune_to_target(self):
114 |         """Prune context to target size based on relevance"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:117:1: W293 Blank line contains whitespace
    |
115 |         if self.total_tokens <= self.target_tokens:
116 |             return
117 |         
    | ^^^^^^^^ W293
118 |         # Sort by relevance score and recency
119 |         self.items.sort(
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:123:1: W293 Blank line contains whitespace
    |
121 |             reverse=True
122 |         )
123 |         
    | ^^^^^^^^ W293
124 |         # Keep most relevant items up to target tokens
125 |         new_items = []
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:127:1: W293 Blank line contains whitespace
    |
125 |         new_items = []
126 |         new_tokens = 0
127 |         
    | ^^^^^^^^ W293
128 |         for item in self.items:
129 |             if new_tokens + item.token_count <= self.target_tokens:
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:134:1: W293 Blank line contains whitespace
    |
132 |             else:
133 |                 break
134 |         
    | ^^^^^^^^ W293
135 |         self.items = new_items
136 |         self.total_tokens = new_tokens
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:137:1: W293 Blank line contains whitespace
    |
135 |         self.items = new_items
136 |         self.total_tokens = new_tokens
137 |     
    | ^^^^ W293
138 |     def get_context_string(self) -> str:
139 |         """Get formatted context string"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:148:1: W293 Blank line contains whitespace
    |
146 | class AdvancedContextManager:
147 |     """Advanced context management with semantic understanding"""
148 |     
    | ^^^^ W293
149 |     def __init__(self, redis_url: str = "redis://localhost:6379"):
150 |         self.redis_url = redis_url
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:155:1: W293 Blank line contains whitespace
    |
153 |         self.context_cache: Dict[str, ContextItem] = {}
154 |         self.embedding_cache: Dict[str, np.ndarray] = {}
155 |         
    | ^^^^^^^^ W293
156 |     async def initialize(self):
157 |         """Initialize Redis connection"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:159:1: W293 Blank line contains whitespace
    |
157 |         """Initialize Redis connection"""
158 |         self.redis = await aioredis.create_redis_pool(self.redis_url)
159 |     
    | ^^^^ W293
160 |     async def close(self):
161 |         """Close Redis connection"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:165:1: W293 Blank line contains whitespace
    |
163 |             self.redis.close()
164 |             await self.redis.wait_closed()
165 |     
    | ^^^^ W293
166 |     def _calculate_token_count(self, text: str) -> int:
167 |         """Estimate token count (rough approximation)"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:170:1: W293 Blank line contains whitespace
    |
168 |         # Rough estimation: 1 token ≈ 4 characters
169 |         return len(text) // 4
170 |     
    | ^^^^ W293
171 |     def _generate_embedding(self, text: str) -> np.ndarray:
172 |         """Generate sentence embedding for text"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:174:1: W293 Blank line contains whitespace
    |
172 |         """Generate sentence embedding for text"""
173 |         cache_key = hashlib.md5(text.encode()).hexdigest()
174 |         
    | ^^^^^^^^ W293
175 |         if cache_key in self.embedding_cache:
176 |             return self.embedding_cache[cache_key]
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:177:1: W293 Blank line contains whitespace
    |
175 |         if cache_key in self.embedding_cache:
176 |             return self.embedding_cache[cache_key]
177 |         
    | ^^^^^^^^ W293
178 |         embedding = self.model.encode([text])[0]
179 |         self.embedding_cache[cache_key] = embedding
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:180:1: W293 Blank line contains whitespace
    |
178 |         embedding = self.model.encode([text])[0]
179 |         self.embedding_cache[cache_key] = embedding
180 |         
    | ^^^^^^^^ W293
181 |         return embedding
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:182:1: W293 Blank line contains whitespace
    |
181 |         return embedding
182 |     
    | ^^^^ W293
183 |     def _calculate_relevance(
184 |         self,
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:193:1: W293 Blank line contains whitespace
    |
191 |         query_embedding = self._generate_embedding(query)
192 |         item_embedding = item.embedding or self._generate_embedding(item.content)
193 |         
    | ^^^^^^^^ W293
194 |         similarity = cosine_similarity(
195 |             query_embedding.reshape(1, -1),
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:198:1: W293 Blank line contains whitespace
    |
196 |             item_embedding.reshape(1, -1)
197 |         )[0][0]
198 |         
    | ^^^^^^^^ W293
199 |         # Type-based weight
200 |         type_weight = context_type_weight.get(item.type, 1.0)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:201:1: W293 Blank line contains whitespace
    |
199 |         # Type-based weight
200 |         type_weight = context_type_weight.get(item.type, 1.0)
201 |         
    | ^^^^^^^^ W293
202 |         # Recency factor (exponential decay)
203 |         age_hours = (datetime.utcnow() - item.accessed_at).total_seconds() / 3600
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:205:1: W293 Blank line contains whitespace
    |
203 |         age_hours = (datetime.utcnow() - item.accessed_at).total_seconds() / 3600
204 |         recency_factor = np.exp(-age_hours / 24)  # Half-life of 24 hours
205 |         
    | ^^^^^^^^ W293
206 |         # Access frequency factor
207 |         access_factor = min(1.0 + (item.access_count * 0.1), 2.0)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:208:1: W293 Blank line contains whitespace
    |
206 |         # Access frequency factor
207 |         access_factor = min(1.0 + (item.access_count * 0.1), 2.0)
208 |         
    | ^^^^^^^^ W293
209 |         # Combined relevance score
210 |         relevance = similarity * type_weight * recency_factor * access_factor
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:211:1: W293 Blank line contains whitespace
    |
209 |         # Combined relevance score
210 |         relevance = similarity * type_weight * recency_factor * access_factor
211 |         
    | ^^^^^^^^ W293
212 |         return relevance
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:213:1: W293 Blank line contains whitespace
    |
212 |         return relevance
213 |     
    | ^^^^ W293
214 |     async def add_context(
215 |         self,
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:229:1: W293 Blank line contains whitespace
    |
227 |             token_count=self._calculate_token_count(content)
228 |         )
229 |         
    | ^^^^^^^^ W293
230 |         # Generate embedding
231 |         item.embedding = self._generate_embedding(content)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:232:1: W293 Blank line contains whitespace
    |
230 |         # Generate embedding
231 |         item.embedding = self._generate_embedding(content)
232 |         
    | ^^^^^^^^ W293
233 |         # Store in cache and Redis
234 |         self.context_cache[context_id] = item
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:235:1: W293 Blank line contains whitespace
    |
233 |         # Store in cache and Redis
234 |         self.context_cache[context_id] = item
235 |         
    | ^^^^^^^^ W293
236 |         if self.redis:
237 |             await self.redis.setex(
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:242:1: W293 Blank line contains whitespace
    |
240 |                 json.dumps(item.to_dict())
241 |             )
242 |         
    | ^^^^^^^^ W293
243 |         logger.info(f"Added context item: {context_id} ({context_type.value})")
244 |         return item
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:245:1: W293 Blank line contains whitespace
    |
243 |         logger.info(f"Added context item: {context_id} ({context_type.value})")
244 |         return item
245 |     
    | ^^^^ W293
246 |     async def get_relevant_context(
247 |         self,
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:256:1: W293 Blank line contains whitespace
    |
254 |         # Define context type weights based on query
255 |         context_type_weight = self._infer_context_weights(query)
256 |         
    | ^^^^^^^^ W293
257 |         # Filter by context types if specified
258 |         items = list(self.context_cache.values())
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:261:1: W293 Blank line contains whitespace
    |
259 |         if context_types:
260 |             items = [item for item in items if item.type in context_types]
261 |         
    | ^^^^^^^^ W293
262 |         # Calculate relevance scores
263 |         for item in items:
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:267:1: W293 Blank line contains whitespace
    |
265 |                 item, query, context_type_weight
266 |             )
267 |         
    | ^^^^^^^^ W293
268 |         # Sort by relevance
269 |         items.sort(key=lambda x: x.relevance_score, reverse=True)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:270:1: W293 Blank line contains whitespace
    |
268 |         # Sort by relevance
269 |         items.sort(key=lambda x: x.relevance_score, reverse=True)
270 |         
    | ^^^^^^^^ W293
271 |         # Create context window
272 |         window = ContextWindow(max_tokens=max_tokens)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:273:1: W293 Blank line contains whitespace
    |
271 |         # Create context window
272 |         window = ContextWindow(max_tokens=max_tokens)
273 |         
    | ^^^^^^^^ W293
274 |         for item in items[:max_items]:
275 |             # Update access metadata
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:278:1: W293 Blank line contains whitespace
    |
276 |             item.accessed_at = datetime.utcnow()
277 |             item.access_count += 1
278 |             
    | ^^^^^^^^^^^^ W293
279 |             # Add to window
280 |             if window.add_item(item):
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:285:1: W293 Blank line contains whitespace
    |
283 |                     f"(relevance: {item.relevance_score:.3f})"
284 |                 )
285 |         
    | ^^^^^^^^ W293
286 |         return window
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:287:1: W293 Blank line contains whitespace
    |
286 |         return window
287 |     
    | ^^^^ W293
288 |     def _infer_context_weights(self, query: str) -> Dict[ContextType, float]:
289 |         """Infer context type weights based on query content"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:291:1: W293 Blank line contains whitespace
    |
289 |         """Infer context type weights based on query content"""
290 |         weights = defaultdict(lambda: 1.0)
291 |         
    | ^^^^^^^^ W293
292 |         # Keywords for different context types
293 |         code_keywords = ["function", "class", "method", "variable", "bug", "error"]
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:297:1: W293 Blank line contains whitespace
    |
295 |         discussion_keywords = ["discuss", "question", "opinion", "feedback"]
296 |         doc_keywords = ["document", "readme", "guide", "tutorial", "api"]
297 |         
    | ^^^^^^^^ W293
298 |         query_lower = query.lower()
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:299:1: W293 Blank line contains whitespace
    |
298 |         query_lower = query.lower()
299 |         
    | ^^^^^^^^ W293
300 |         # Adjust weights based on keywords
301 |         if any(kw in query_lower for kw in code_keywords):
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:304:1: W293 Blank line contains whitespace
    |
302 |             weights[ContextType.CODE_REVIEW] = 2.0
303 |             weights[ContextType.COMMIT] = 1.5
304 |         
    | ^^^^^^^^ W293
305 |         if any(kw in query_lower for kw in issue_keywords):
306 |             weights[ContextType.ISSUE] = 2.0
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:307:1: W293 Blank line contains whitespace
    |
305 |         if any(kw in query_lower for kw in issue_keywords):
306 |             weights[ContextType.ISSUE] = 2.0
307 |         
    | ^^^^^^^^ W293
308 |         if any(kw in query_lower for kw in discussion_keywords):
309 |             weights[ContextType.DISCUSSION] = 1.8
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:310:1: W293 Blank line contains whitespace
    |
308 |         if any(kw in query_lower for kw in discussion_keywords):
309 |             weights[ContextType.DISCUSSION] = 1.8
310 |         
    | ^^^^^^^^ W293
311 |         if any(kw in query_lower for kw in doc_keywords):
312 |             weights[ContextType.DOCUMENTATION] = 2.0
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:313:1: W293 Blank line contains whitespace
    |
311 |         if any(kw in query_lower for kw in doc_keywords):
312 |             weights[ContextType.DOCUMENTATION] = 2.0
313 |         
    | ^^^^^^^^ W293
314 |         return dict(weights)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:315:1: W293 Blank line contains whitespace
    |
314 |         return dict(weights)
315 |     
    | ^^^^ W293
316 |     async def prune_old_context(self, max_age_days: int = 7):
317 |         """Prune context older than specified days"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:319:1: W293 Blank line contains whitespace
    |
317 |         """Prune context older than specified days"""
318 |         cutoff_date = datetime.utcnow() - timedelta(days=max_age_days)
319 |         
    | ^^^^^^^^ W293
320 |         items_to_remove = []
321 |         for context_id, item in self.context_cache.items():
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:324:1: W293 Blank line contains whitespace
    |
322 |             if item.accessed_at < cutoff_date:
323 |                 items_to_remove.append(context_id)
324 |         
    | ^^^^^^^^ W293
325 |         for context_id in items_to_remove:
326 |             del self.context_cache[context_id]
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:329:1: W293 Blank line contains whitespace
    |
327 |             if self.redis:
328 |                 await self.redis.delete(f"context:{context_id}")
329 |         
    | ^^^^^^^^ W293
330 |         logger.info(f"Pruned {len(items_to_remove)} old context items")
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:331:1: W293 Blank line contains whitespace
    |
330 |         logger.info(f"Pruned {len(items_to_remove)} old context items")
331 |     
    | ^^^^ W293
332 |     async def get_context_summary(self) -> Dict[str, Any]:
333 |         """Get summary statistics about current context"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:336:1: W293 Blank line contains whitespace
    |
334 |         type_counts = defaultdict(int)
335 |         total_tokens = 0
336 |         
    | ^^^^^^^^ W293
337 |         for item in self.context_cache.values():
338 |             type_counts[item.type.value] += 1
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:340:1: W293 Blank line contains whitespace
    |
338 |             type_counts[item.type.value] += 1
339 |             total_tokens += item.token_count
340 |         
    | ^^^^^^^^ W293
341 |         return {
342 |             "total_items": len(self.context_cache),
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:347:1: W293 Blank line contains whitespace
    |
345 |             "cache_size_mb": len(str(self.context_cache)) / (1024 * 1024)
346 |         }
347 |     
    | ^^^^ W293
348 |     async def export_context(self, context_ids: List[str]) -> Dict[str, Any]:
349 |         """Export specific context items"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:351:1: W293 Blank line contains whitespace
    |
349 |         """Export specific context items"""
350 |         exported_items = []
351 |         
    | ^^^^^^^^ W293
352 |         for context_id in context_ids:
353 |             if context_id in self.context_cache:
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:356:1: W293 Blank line contains whitespace
    |
354 |                 item = self.context_cache[context_id]
355 |                 exported_items.append(item.to_dict())
356 |         
    | ^^^^^^^^ W293
357 |         return {
358 |             "exported_at": datetime.utcnow().isoformat(),
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:361:1: W293 Blank line contains whitespace
    |
359 |             "items": exported_items
360 |         }
361 |     
    | ^^^^ W293
362 |     async def import_context(self, context_data: Dict[str, Any]):
363 |         """Import context items"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:365:1: W293 Blank line contains whitespace
    |
363 |         """Import context items"""
364 |         imported_count = 0
365 |         
    | ^^^^^^^^ W293
366 |         for item_data in context_data.get("items", []):
367 |             try:
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:374:1: W293 Blank line contains whitespace
    |
372 |             except Exception as e:
373 |                 logger.error(f"Failed to import context item: {e}")
374 |         
    | ^^^^^^^^ W293
375 |         logger.info(f"Imported {imported_count} context items")
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:383:1: W293 Blank line contains whitespace
    |
381 |     manager = AdvancedContextManager()
382 |     await manager.initialize()
383 |     
    | ^^^^ W293
384 |     try:
385 |         # Add some context
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:392:1: W293 Blank line contains whitespace
    |
390 |             {"pr_number": 123, "author": "john_doe"}
391 |         )
392 |         
    | ^^^^^^^^ W293
393 |         await manager.add_context(
394 |             "issue-456",
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:399:1: W293 Blank line contains whitespace
    |
397 |             {"issue_number": 456, "severity": "high"}
398 |         )
399 |         
    | ^^^^^^^^ W293
400 |         # Get relevant context
401 |         query = "authentication problems and memory issues"
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:403:1: W293 Blank line contains whitespace
    |
401 |         query = "authentication problems and memory issues"
402 |         context_window = await manager.get_relevant_context(query)
403 |         
    | ^^^^^^^^ W293
404 |         print("Relevant context:")
405 |         print(context_window.get_context_string())
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:406:1: W293 Blank line contains whitespace
    |
404 |         print("Relevant context:")
405 |         print(context_window.get_context_string())
406 |         
    | ^^^^^^^^ W293
407 |         # Get summary
408 |         summary = await manager.get_context_summary()
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:410:1: W293 Blank line contains whitespace
    |
408 |         summary = await manager.get_context_summary()
409 |         print(f"\nContext summary: {json.dumps(summary, indent=2)}")
410 |         
    | ^^^^^^^^ W293
411 |     finally:
412 |         await manager.close()
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:416:23: SyntaxError: unexpected EOF while parsing
    |
415 | if __name__ == "__main__":
416 |     asyncio.run(main()
    |                       ^
    |

.github/scripts/context_manager.py:416:23: W292 No newline at end of file
    |
415 | if __name__ == "__main__":
416 |     asyncio.run(main()
    |                       ^ W292
    |
    = help: Add trailing newline

.github/scripts/core/__init__.py:1:1: N999 Invalid module name: '.github'
.github/scripts/core/container.py:29:36: F821 Undefined name `Tuple`
   |
28 |     def __init__(self):
29 |         self._services: dict[type, Tuple[Any, bool]] = {}
   |                                    ^^^^^ F821
30 |         self._singletons: dict[type, Any] = {}
31 |         self._factories: dict[type, Callable] = {}
   |

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/exceptions.py:11:7: N818 Exception name `KiroException` should be named with an Error suffix
   |
11 | class KiroException(Exception):
   |       ^^^^^^^^^^^^^ N818
12 |     """Base exception for all Kiro-related errors."""
   |

.github/scripts/core/logging.py:96:14: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
 95 |       # ANSI color codes
 96 |       COLORS = {
    |  ______________^
 97 | |         "DEBUG": "\033[36m",  # Cyan
 98 | |         "INFO": "\033[32m",  # Green
 99 | |         "WARNING": "\033[33m",  # Yellow
100 | |         "ERROR": "\033[31m",  # Red
101 | |         "CRITICAL": "\033[35m",  # Magenta
102 | |     }
    | |_____^ RUF012
103 |       RESET = "\033[0m"
    |

.github/scripts/demo_documentation_analysis.py:13:20: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
12 | # Add the current directory to the Python path
13 | sys.path.insert(0, os.path.dirname(__file__))
   |                    ^^^^^^^^^^^^^^^ PTH120
14 |
15 | import contextlib
   |

.github/scripts/demo_documentation_analysis.py:305:5: PLR0912 Too many branches (27 > 12)
    |
305 | def run_demo():
    |     ^^^^^^^^ PLR0912
306 |     """Run the documentation analysis demo."""
    |

.github/scripts/demo_documentation_analysis.py:356:22: B007 Loop control variable `doc` not used within loop body
    |
354 |         results_search = system.search_documentation(query, top_k=3)
355 |         if results_search:
356 |             for _i, (doc, _score) in enumerate(results_search, 1):
    |                      ^^^ B007
357 |                 pass
358 |         else:
    |
    = help: Rename unused `doc` to `_doc`

.github/scripts/demo_improvements.py:35:29: ARG002 Unused method argument: `key`
   |
33 |             return f"cached_{key}"
34 |
35 |         async def set(self, key, value, ttl=None):
   |                             ^^^ ARG002
36 |             return True
   |

.github/scripts/demo_improvements.py:35:34: ARG002 Unused method argument: `value`
   |
33 |             return f"cached_{key}"
34 |
35 |         async def set(self, key, value, ttl=None):
   |                                  ^^^^^ ARG002
36 |             return True
   |

.github/scripts/demo_improvements.py:35:41: ARG002 Unused method argument: `ttl`
   |
33 |             return f"cached_{key}"
34 |
35 |         async def set(self, key, value, ttl=None):
   |                                         ^^^ ARG002
36 |             return True
   |

.github/scripts/demo_improvements.py:86:9: ERA001 Found commented-out code
   |
84 |         # In production, this would use the actual signature
85 |         logger.info("Validating webhook signature...")
86 |         # is_valid = validator.validate_signature(payload, signature)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
87 |         logger.info("✅ Webhook validation passed")
88 |     except Exception as e:
   |
   = help: Remove commented-out code

.github/scripts/demo_improvements.py:117:5: ERA001 Found commented-out code
    |
116 |     # In production, this would save to database
117 |     # repository = ReviewRepository(db_path)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
118 |     # await repository.save(review)
    |
    = help: Remove commented-out code

.github/scripts/demo_improvements.py:118:5: ERA001 Found commented-out code
    |
116 |     # In production, this would save to database
117 |     # repository = ReviewRepository(db_path)
118 |     # await repository.save(review)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
    |
    = help: Remove commented-out code

.github/scripts/diagnostics/__init__.py:1:1: N999 Invalid module name: '.github'
.github/scripts/diagnostics/diagnostic_collector.py:27:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
25 | import psutil
26 |
27 | from ..core.interfaces import CacheInterface, DatabaseInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
28 | from ..core.logging import get_correlation_id, get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/diagnostics/diagnostic_collector.py:27:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
25 | import psutil
26 |
27 | from ..core.interfaces import CacheInterface, DatabaseInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
28 | from ..core.logging import get_correlation_id, get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/diagnostics/diagnostic_collector.py:28:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
27 | from ..core.interfaces import CacheInterface, DatabaseInterface
28 | from ..core.logging import get_correlation_id, get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
29 |
30 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/diagnostics/diagnostic_collector.py:28:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
27 | from ..core.interfaces import CacheInterface, DatabaseInterface
28 | from ..core.logging import get_correlation_id, get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
29 |
30 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/diagnostics/diagnostic_collector.py:123:13: RUF006 Store a reference to the return value of `asyncio.create_task`
    |
121 |             self.end_diagnostic(context.correlation_id)
122 |             # Store diagnostic data
123 |             asyncio.create_task(self._store_diagnostic(context))
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF006
124 |
125 |     async def _store_diagnostic(self, context: DiagnosticContext):
    |

.github/scripts/diagnostics/diagnostic_collector.py:314:9: PLR0911 Too many return statements (8 > 6)
    |
312 |         }
313 |
314 |     def _identify_root_cause(self, error: Exception, context: dict[str, Any]) -> str:
    |         ^^^^^^^^^^^^^^^^^^^^ PLR0911
315 |         """Identify likely root cause of error."""
316 |         type(error).__name__
    |

.github/scripts/diagnostics/diagnostic_collector.py:314:54: ARG002 Unused method argument: `context`
    |
312 |         }
313 |
314 |     def _identify_root_cause(self, error: Exception, context: dict[str, Any]) -> str:
    |                                                      ^^^^^^^ ARG002
315 |         """Identify likely root cause of error."""
316 |         type(error).__name__
    |

.github/scripts/diagnostics/diagnostic_collector.py:316:9: B018 Found useless attribute access. Either assign it to a variable or remove it.
    |
314 |     def _identify_root_cause(self, error: Exception, context: dict[str, Any]) -> str:
315 |         """Identify likely root cause of error."""
316 |         type(error).__name__
    |         ^^^^^^^^^^^^^^^^^^^^ B018
317 |         error_msg = str(error).lower()
    |

.github/scripts/diagnostics/diagnostic_collector.py:337:32: ARG002 Unused method argument: `error_type`
    |
335 |             return "unknown"
336 |
337 |     def _get_suggestions(self, error_type: str, root_cause: str) -> list[str]:
    |                                ^^^^^^^^^^ ARG002
338 |         """Get suggestions for fixing the error."""
339 |         suggestions = []
    |

.github/scripts/diagnostics/diagnostic_collector.py:398:26: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
397 |         # Log slow operations
398 |         if duration_ms > 1000:  # > 1 second
    |                          ^^^^ PLR2004
399 |             logger.warning("Slow operation detected", operation=operation, duration_ms=duration_ms, metadata=metadata)
    |

.github/scripts/diagnostics/diagnostic_collector.py:425:34: PLR2004 Magic value used in comparison, consider replacing `500` with a constant variable
    |
424 |         for operation, stats in self.get_performance_summary().items():
425 |             if stats["p95_ms"] > 500:  # Operations taking > 500ms at P95
    |                                  ^^^ PLR2004
426 |                 bottlenecks.append((operation, stats["p95_ms"]))
    |

.github/scripts/email_templates.py:111:29: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
109 |             status_text = "Critical Issues Found"
110 |             status_emoji = "🔴"
111 |         elif total_issues > 5:
    |                             ^ PLR2004
112 |             status_color = "#fd7e14"
113 |             status_text = "Multiple Issues Found"
    |

.github/scripts/email_templates.py:424:39: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
422 |                 """
423 |
424 |             if len(pending_reviews) > 5:
    |                                       ^ PLR2004
425 |                 content += f"""
426 |             <p style="text-align: center; margin: 15px 0 0 0;">
    |

.github/scripts/fix_suggester.py:185:37: PLR2004 Magic value used in comparison, consider replacing `79` with a constant variable
    |
183 |         elif rule_id == "flake8-E501":
184 |             # Fix long lines by breaking at appropriate points
185 |             if len(original_text) > 79 and "," in original_text:
    |                                     ^^ PLR2004
186 |                 # Try to break at commas
187 |                 parts = original_text.split(",")
    |

.github/scripts/fix_suggester.py:196:58: PLR2004 Magic value used in comparison, consider replacing `75` with a constant variable
    |
195 |                 for part in parts[1:]:
196 |                     if current_line_length + len(part) > 75:  # Leave some margin
    |                                                          ^^ PLR2004
197 |                         result += f"\n{indent_str}{part.lstrip()},"
198 |                         current_line_length = indentation + len(part.lstrip()) + 1
    |

.github/scripts/fix_suggester.py:270:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
268 |           elif rule_id == "sql-injection":
269 |               # Replace string concatenation in SQL with parameterized query
270 | /             if (
271 | |                 "SELECT" in original_text
272 | |                 or "INSERT" in original_text
273 | |                 or "UPDATE" in original_text
274 | |                 or "DELETE" in original_text
275 | |             ):
276 | |                 # This is a simplified example - real SQL parsing would be more complex
277 | |                 if "+" in original_text and "'" in original_text:
    | |_________________________________________________________________^ SIM102
278 |                       # Replace string concatenation with parameter placeholder
279 |                       replacement_text = re.sub(r"'([^']*)'\s*\+\s*([^']+)\s*\+\s*'([^']*)'", r"'\1?\3'", original_text)
    |
    = help: Combine `if` statements using `and`

.github/scripts/fix_suggester.py:336:9: SIM102 Use a single `if` statement instead of nested `if` statements
    |
334 |                           }
335 |
336 | /         elif rule_id == "select-all":
337 | |             # Replace SELECT * with specific columns
338 | |             if "SELECT *" in original_text:
    | |___________________________________________^ SIM102
339 |                   # This is a placeholder - in a real implementation, we would need to analyze the schema
340 |                   replacement_text = original_text.replace("SELECT *", "SELECT id, name, created_at")
    |
    = help: Combine `if` statements using `and`

.github/scripts/fix_suggester.py:527:24: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
525 |     import sys
526 |
527 |     if len(sys.argv) < 3:
    |                        ^ PLR2004
528 |         sys.exit(1)
    |

.github/scripts/fix_suggester.py:534:14: PTH123 `open()` should be replaced by `Path.open()`
    |
533 |     try:
534 |         with open(issue_file) as f:
    |              ^^^^ PTH123
535 |             issues = json.load(f)
    |

.github/scripts/fix_suggester.py:537:14: PTH123 `open()` should be replaced by `Path.open()`
    |
535 |             issues = json.load(f)
536 |
537 |         with open(file_path) as f:
    |              ^^^^ PTH123
538 |             file_content = f.read()
    |

.github/scripts/fix_suggester.py:541:31: PTH119 `os.path.basename()` should be replaced by `Path.name`
    |
540 |         # Create a mock file structure
541 |         files = [{"filename": os.path.basename(file_path), "content": file_content}]
    |                               ^^^^^^^^^^^^^^^^ PTH119
542 |
543 |         # Create a mock GitHub client
    |

.github/scripts/fix_suggester.py:545:27: ARG002 Unused method argument: `url`
    |
543 |         # Create a mock GitHub client
544 |         class MockGitHubClient:
545 |             def get(self, url, params=None):
    |                           ^^^ ARG002
546 |                 return {}
    |

.github/scripts/fix_suggester.py:545:32: ARG002 Unused method argument: `params`
    |
543 |         # Create a mock GitHub client
544 |         class MockGitHubClient:
545 |             def get(self, url, params=None):
    |                                ^^^^^^ ARG002
546 |                 return {}
    |

.github/scripts/fix_suggester.py:548:28: ARG002 Unused method argument: `url`
    |
546 |                 return {}
547 |
548 |             def post(self, url, json=None):
    |                            ^^^ ARG002
549 |                 return {}
    |

.github/scripts/fix_suggester.py:548:33: ARG002 Unused method argument: `json`
    |
546 |                 return {}
547 |
548 |             def post(self, url, json=None):
    |                                 ^^^^ ARG002
549 |                 return {}
    |

.github/scripts/fix_suggester.py:551:29: ARG002 Unused method argument: `url`
    |
549 |                 return {}
550 |
551 |             def patch(self, url, json=None):
    |                             ^^^ ARG002
552 |                 return {}
    |

.github/scripts/fix_suggester.py:551:34: ARG002 Unused method argument: `json`
    |
549 |                 return {}
550 |
551 |             def patch(self, url, json=None):
    |                                  ^^^^ ARG002
552 |                 return {}
    |

.github/scripts/github_auth.py:29:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
28 |         # Ensure directory exists
29 |         os.makedirs(os.path.dirname(self.storage_path), exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
30 |
31 |         # Set up encryption
   |

.github/scripts/github_auth.py:29:21: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
28 |         # Ensure directory exists
29 |         os.makedirs(os.path.dirname(self.storage_path), exist_ok=True)
   |                     ^^^^^^^^^^^^^^^ PTH120
30 |
31 |         # Set up encryption
   |

.github/scripts/github_auth.py:61:14: PTH123 `open()` should be replaced by `Path.open()`
   |
60 |         # Write to file
61 |         with open(self.storage_path, "wb") as f:
   |              ^^^^ PTH123
62 |             f.write(encrypted_data)
   |

.github/scripts/github_auth.py:65:9: PTH101 `os.chmod()` should be replaced by `Path.chmod()`
   |
64 |         # Set secure permissions
65 |         os.chmod(self.storage_path, 0o600)
   |         ^^^^^^^^ PTH101
66 |
67 |         return True
   |

.github/scripts/github_auth.py:71:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
69 |     def get_credentials(self):
70 |         """Retrieve GitHub App credentials."""
71 |         if not os.path.exists(self.storage_path):
   |                ^^^^^^^^^^^^^^ PTH110
72 |             return None
   |

.github/scripts/github_auth.py:76:18: PTH123 `open()` should be replaced by `Path.open()`
   |
74 |         try:
75 |             # Read encrypted data
76 |             with open(self.storage_path, "rb") as f:
   |                  ^^^^ PTH123
77 |                 encrypted_data = f.read()
   |

.github/scripts/github_auth.py:104:14: PTH123 `open()` should be replaced by `Path.open()`
    |
103 |         # Write to file
104 |         with open(self.storage_path, "wb") as f:
    |              ^^^^ PTH123
105 |             f.write(encrypted_data)
    |

.github/scripts/github_auth.py:127:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
125 |     def clear_credentials(self):
126 |         """Clear all stored credentials."""
127 |         if os.path.exists(self.storage_path):
    |            ^^^^^^^^^^^^^^ PTH110
128 |             os.remove(self.storage_path)
129 |         return True
    |

.github/scripts/github_auth.py:128:13: PTH107 `os.remove()` should be replaced by `Path.unlink()`
    |
126 |         """Clear all stored credentials."""
127 |         if os.path.exists(self.storage_path):
128 |             os.remove(self.storage_path)
    |             ^^^^^^^^^ PTH107
129 |         return True
    |

.github/scripts/github_auth.py:144:29: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
142 |     private_key_base64 = os.environ.get("GITHUB_PRIVATE_KEY_BASE64")
143 |
144 |     if private_key_path and os.path.exists(private_key_path):
    |                             ^^^^^^^^^^^^^^ PTH110
145 |         with open(private_key_path) as f:
146 |             private_key = f.read()
    |

.github/scripts/github_auth.py:145:14: PTH123 `open()` should be replaced by `Path.open()`
    |
144 |     if private_key_path and os.path.exists(private_key_path):
145 |         with open(private_key_path) as f:
    |              ^^^^ PTH123
146 |             private_key = f.read()
147 |     elif private_key_base64:
    |

.github/scripts/github_event_handlers.py:91:24: S113 Probable use of `requests` call without timeout
   |
90 |         def patch(self, url, data=None, json=None):
91 |             response = requests.patch(url, headers=self.headers, data=data, json=json)
   |                        ^^^^^^^^^^^^^^ S113
92 |             response.raise_for_status()
93 |             return response.json()
   |

.github/scripts/github_event_handlers.py:259:9: E722 Do not use bare `except`
    |
257 |             reply_data = {"body": f"❌ Error applying suggestion: {e!s}", "in_reply_to": comment_id}
258 |             github.post(reply_url, json=reply_data)
259 |         except:
    |         ^^^^^^ E722
260 |             logger.error("Failed to add error reply")
    |

.github/scripts/github_event_handlers.py:445:46: F821 Undefined name `Tuple`
    |
445 | def analyze_feedback_sentiment(text: str) -> Tuple[str, int]:
    |                                              ^^^^^ F821
446 |     """Analyze the sentiment of feedback text."""
447 |     text_lower = text.lower()
    |

.github/scripts/github_event_handlers.py:475:43: F821 Undefined name `List`
    |
475 | def extract_mentioned_rules(text: str) -> List[Tuple[str, str]]:
    |                                           ^^^^ F821
476 |     """Extract mentioned rules from feedback text."""
477 |     # Look for rule patterns in the text
    |

.github/scripts/github_event_handlers.py:475:48: F821 Undefined name `Tuple`
    |
475 | def extract_mentioned_rules(text: str) -> List[Tuple[str, str]]:
    |                                                ^^^^^ F821
476 |     """Extract mentioned rules from feedback text."""
477 |     # Look for rule patterns in the text
    |

.github/scripts/github_webhook_handler.py:43:14: PTH123 `open()` should be replaced by `Path.open()`
   |
42 |     try:
43 |         with open(GITHUB_PRIVATE_KEY_PATH) as key_file:
   |              ^^^^ PTH123
44 |             private_key = key_file.read()
45 |     except Exception:
   |

.github/scripts/github_webhook_handler.py:103:60: ARG001 Unused function argument: `is_update`
    |
103 | def process_pr_for_review(pr, repository, installation_id, is_update=False):
    |                                                            ^^^^^^^^^ ARG001
104 |     """Process a pull request for review by Kiro."""
105 |     # Get installation token
    |

.github/scripts/github_webhook_handler.py:158:14: PTH123 `open()` should be replaced by `Path.open()`
    |
156 |     """Main entry point for the webhook handler."""
157 |     try:
158 |         with open(payload_path) as f:
    |              ^^^^ PTH123
159 |             payload = json.load(f)
    |

.github/scripts/github_webhook_handler.py:173:24: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
172 | if __name__ == "__main__":
173 |     if len(sys.argv) < 3:
    |                        ^ PLR2004
174 |         sys.exit(1)
    |

.github/scripts/issue_to_spec.py:110:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
108 |             response = requests.post(f"{KIRO_API_URL}/v1/specs/generate", headers=headers, json=payload, timeout=30)
109 |
110 |             if response.status_code == 200:
    |                                        ^^^ PLR2004
111 |                 result = response.json()
112 |                 return {
    |

.github/scripts/issue_to_spec.py:120:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
118 |                   pass
119 |                   # Fall back to placeholder documents
120 | /         except Exception:
121 | |             pass
    | |________________^ S110
122 |       else:
123 |           pass
    |

.github/scripts/issue_to_spec.py:133:31: ARG001 Unused function argument: `feature_name`
    |
133 | def generate_requirements_doc(feature_name, issue_details, capabilities):
    |                               ^^^^^^^^^^^^ ARG001
134 |     """Generate a basic requirements document based on the issue."""
135 |     title = issue_details.get("title", "Unknown Feature")
    |

.github/scripts/issue_to_spec.py:196:24: ARG001 Unused function argument: `feature_name`
    |
196 | def generate_tasks_doc(feature_name):
    |                        ^^^^^^^^^^^^ ARG001
197 |     """Generate a placeholder tasks document."""
198 |     return """# Implementation Plan
    |

.github/scripts/issue_to_spec.py:235:14: PTH123 `open()` should be replaced by `Path.open()`
    |
233 |     # Write the spec files
234 |     for filename, content in spec_content.items():
235 |         with open(spec_dir / filename, "w") as f:
    |              ^^^^ PTH123
236 |             f.write(content)
    |

.github/scripts/issue_to_spec.py:253:5: ERA001 Found commented-out code
    |
252 |     # Regular expression to match top-level tasks (those with single digit numbers)
253 |     # Format: "- [ ] 1. Task title"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
254 |     task_pattern = re.compile(r"- \[ \] (\d+)\. (.*?)$", re.MULTILINE)
    |
    = help: Remove commented-out code

.github/scripts/issue_to_spec.py:332:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
330 |               issue = response.json()
331 |               created_issues.append({"number": issue["number"], "title": issue["title"], "html_url": issue["html_url"]})
332 | /         except Exception:
333 | |             pass
    | |________________^ S110
334 |
335 |       return created_issues
    |

.github/scripts/kiro_next.py:35:18: PTH123 `open()` should be replaced by `Path.open()`
   |
34 |             spec_tasks = []
35 |             with open(tasks_file) as f:
   |                  ^^^^ PTH123
36 |                 lines = f.readlines()
   |

.github/scripts/kiro_next.py:59:18: PTH123 `open()` should be replaced by `Path.open()`
   |
58 |         try:
59 |             with open(file_path) as f:
   |                  ^^^^ PTH123
60 |                 lines = f.readlines()
   |

.github/scripts/kiro_next.py:65:18: PTH123 `open()` should be replaced by `Path.open()`
   |
63 |             lines[line_num] = lines[line_num].replace("- [ ]", "- [x]", 1)
64 |
65 |             with open(file_path, "w") as f:
   |                  ^^^^ PTH123
66 |                 f.writelines(lines)
   |

.github/scripts/kiro_task_implementation.py:20:57: ARG002 Unused method argument: `description`
   |
18 |             dir_path.mkdir(parents=True, exist_ok=True)
19 |
20 |     def write_file(self, file_path: Path, content: str, description: str):
   |                                                         ^^^^^^^^^^^ ARG002
21 |         """Write content to a file."""
22 |         file_path.parent.mkdir(parents=True, exist_ok=True)
   |

.github/scripts/kiro_task_implementation.py:1005:25: F821 Undefined name `resources_dir`
     |
1003 |     </root>
1004 | </configuration>"""
1005 |         self.write_file(resources_dir / "logback.xml", logback_config, "Logback configuration")
     |                         ^^^^^^^^^^^^^ F821
1006 |
1007 |         return True
     |

.github/scripts/kiro_task_implementation.py:1494:9: S110 `try`-`except`-`pass` detected, consider logging the exception
     |
1492 |               if task_func():
1493 |                   completed += 1
1494 | /         except Exception:
1495 | |             pass
     | |________________^ S110
     |

.github/scripts/learning_system.py:23:19: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
22 | # Constants
23 | DEFAULT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "analytics.db")
   |                   ^^^^^^^^^^^^ PTH118
24 | LEARNING_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "learning.db")
   |

.github/scripts/learning_system.py:23:32: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
22 | # Constants
23 | DEFAULT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "analytics.db")
   |                                ^^^^^^^^^^^^^^^ PTH120
24 | LEARNING_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "learning.db")
   |

.github/scripts/learning_system.py:24:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
22 | # Constants
23 | DEFAULT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "analytics.db")
24 | LEARNING_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "learning.db")
   |                    ^^^^^^^^^^^^ PTH118
   |

.github/scripts/learning_system.py:24:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
22 | # Constants
23 | DEFAULT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "analytics.db")
24 | LEARNING_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "learning.db")
   |                                 ^^^^^^^^^^^^^^^ PTH120
   |

.github/scripts/learning_system.py:36:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
35 |         # Ensure directory exists
36 |         os.makedirs(os.path.dirname(self.learning_db_path), exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
37 |
38 |         # Initialize learning database
   |

.github/scripts/learning_system.py:36:21: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
35 |         # Ensure directory exists
36 |         os.makedirs(os.path.dirname(self.learning_db_path), exist_ok=True)
   |                     ^^^^^^^^^^^^^^^ PTH120
37 |
38 |         # Initialize learning database
   |

.github/scripts/learning_system.py:235:9: SIM108 Use ternary operator `feedback_score = positive_feedback / total_feedback if total_feedback > 0 else 0.5` instead of `if`-`else`-block
    |
233 |           # Calculate feedback score
234 |           total_feedback = positive_feedback + negative_feedback
235 | /         if total_feedback > 0:
236 | |             feedback_score = positive_feedback / total_feedback
237 | |         else:
238 | |             feedback_score = 0.5  # Neutral if no feedback
    | |________________________________^ SIM108
239 |
240 |           # Calculate suggestion score
    |
    = help: Replace `if`-`else`-block with `feedback_score = positive_feedback / total_feedback if total_feedback > 0 else 0.5`

.github/scripts/learning_system.py:242:9: SIM108 Use ternary operator `suggestion_score = suggestions_applied / total_suggestions if total_suggestions > 0 else 0.5` instead of `if`-`else`-block
    |
240 |           # Calculate suggestion score
241 |           total_suggestions = suggestions_applied + suggestions_rejected
242 | /         if total_suggestions > 0:
243 | |             suggestion_score = suggestions_applied / total_suggestions
244 | |         else:
245 | |             suggestion_score = 0.5  # Neutral if no suggestions
    | |__________________________________^ SIM108
246 |
247 |           # Combine scores
    |
    = help: Replace `if`-`else`-block with `suggestion_score = suggestions_applied / total_suggestions if total_suggestions > 0 else 0.5`

.github/scripts/learning_system.py:490:37: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
488 |                 # Adjust confidence based on sample size
489 |                 total_attempts = success_count + failure_count
490 |                 if total_attempts < 5:
    |                                     ^ PLR2004
491 |                     # Reduce confidence for small sample sizes
492 |                     confidence_score *= total_attempts / 5.0
    |

.github/scripts/learning_system.py:507:30: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    |
505 |             # Get file extension from context
506 |             file_path = context.get("file_path", "")
507 |             file_extension = os.path.splitext(file_path)[1].lower()
    |                              ^^^^^^^^^^^^^^^^ PTH122
508 |
509 |             # Check for learned improvements
    |

.github/scripts/learning_system.py:582:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
580 |           for line in lines:
581 |               stripped = line.strip()
582 | /             if stripped and not stripped.endswith((";", "{", "}", ",")):
583 | |                 if not stripped.startswith(("if", "for", "while", "function", "class")):
    | |________________________________________________________________________________________^ SIM102
584 |                       line += ";"
585 |               improved_lines.append(line)
    |
    = help: Combine `if` statements using `and`

.github/scripts/learning_system.py:584:21: PLW2901 `for` loop variable `line` overwritten by assignment target
    |
582 |             if stripped and not stripped.endswith((";", "{", "}", ",")):
583 |                 if not stripped.startswith(("if", "for", "while", "function", "class")):
584 |                     line += ";"
    |                     ^^^^ PLW2901
585 |             improved_lines.append(line)
    |

.github/scripts/learning_system.py:674:37: ARG002 Unused method argument: `repo_owner`
    |
672 |             return False
673 |
674 |     def get_learning_insights(self, repo_owner: str | None = None, repo_name: str | None = None) -> dict[str, Any]:
    |                                     ^^^^^^^^^^ ARG002
675 |         """Get insights from the learning system."""
676 |         try:
    |

.github/scripts/learning_system.py:674:68: ARG002 Unused method argument: `repo_name`
    |
672 |             return False
673 |
674 |     def get_learning_insights(self, repo_owner: str | None = None, repo_name: str | None = None) -> dict[str, Any]:
    |                                                                    ^^^^^^^^^ ARG002
675 |         """Get insights from the learning system."""
676 |         try:
    |

.github/scripts/main_with_diagnostics.py:22:20: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
21 | # Add parent directory to path
22 | sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
   |                    ^^^^^^^^^^^^^^^ PTH120
23 |
24 | from scripts.api import diagnostic_endpoints, review_endpoints, webhook_endpoints
   |

.github/scripts/main_with_diagnostics.py:22:36: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
21 | # Add parent directory to path
22 | sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
   |                                    ^^^^^^^^^^^^^^^ PTH120
23 |
24 | from scripts.api import diagnostic_endpoints, review_endpoints, webhook_endpoints
   |

.github/scripts/main_with_diagnostics.py:22:52: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
21 | # Add parent directory to path
22 | sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
   |                                                    ^^^^^^^^^^^^^^^ PTH100
23 |
24 | from scripts.api import diagnostic_endpoints, review_endpoints, webhook_endpoints
   |

.github/scripts/main_with_diagnostics.py:52:12: PLW0603 Using the global statement to update `container` is discouraged
   |
50 | async def lifespan(app: FastAPI):
51 |     """Application lifespan manager."""
52 |     global container, diagnostic_collector, request_tracer, error_analyzer, performance_profiler
   |            ^^^^^^^^^ PLW0603
53 |
54 |     logger.info("Starting application with diagnostics")
   |

.github/scripts/main_with_diagnostics.py:52:23: PLW0603 Using the global statement to update `diagnostic_collector` is discouraged
   |
50 | async def lifespan(app: FastAPI):
51 |     """Application lifespan manager."""
52 |     global container, diagnostic_collector, request_tracer, error_analyzer, performance_profiler
   |                       ^^^^^^^^^^^^^^^^^^^^ PLW0603
53 |
54 |     logger.info("Starting application with diagnostics")
   |

.github/scripts/main_with_diagnostics.py:52:45: PLW0603 Using the global statement to update `request_tracer` is discouraged
   |
50 | async def lifespan(app: FastAPI):
51 |     """Application lifespan manager."""
52 |     global container, diagnostic_collector, request_tracer, error_analyzer, performance_profiler
   |                                             ^^^^^^^^^^^^^^ PLW0603
53 |
54 |     logger.info("Starting application with diagnostics")
   |

.github/scripts/main_with_diagnostics.py:52:61: PLW0603 Using the global statement to update `error_analyzer` is discouraged
   |
50 | async def lifespan(app: FastAPI):
51 |     """Application lifespan manager."""
52 |     global container, diagnostic_collector, request_tracer, error_analyzer, performance_profiler
   |                                                             ^^^^^^^^^^^^^^ PLW0603
53 |
54 |     logger.info("Starting application with diagnostics")
   |

.github/scripts/main_with_diagnostics.py:52:77: PLW0603 Using the global statement to update `performance_profiler` is discouraged
   |
50 | async def lifespan(app: FastAPI):
51 |     """Application lifespan manager."""
52 |     global container, diagnostic_collector, request_tracer, error_analyzer, performance_profiler
   |                                                                             ^^^^^^^^^^^^^^^^^^^^ PLW0603
53 |
54 |     logger.info("Starting application with diagnostics")
   |

.github/scripts/main_with_diagnostics.py:204:29: ARG001 Unused function argument: `frame`
    |
204 | def handle_shutdown(signum, frame):
    |                             ^^^^^ ARG001
205 |     """Handle shutdown signals."""
206 |     logger.info("Received shutdown signal", signal=signum)
    |

.github/scripts/main_with_diagnostics.py:217:30: S104 Possible binding to all interfaces
    |
216 |     # Get configuration
217 |     host = os.getenv("HOST", "0.0.0.0")
    |                              ^^^^^^^^^ S104
218 |     port = int(os.getenv("PORT", "5000"))
219 |     workers = int(os.getenv("WORKERS", "4"))
    |

.github/scripts/main_with_documentation.py:19:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
18 | # Add the scripts directory to the Python path
19 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))
   |                    ^^^^^^^^^^^^ PTH118
20 |
21 | # Import existing analysis modules
   |

.github/scripts/main_with_documentation.py:19:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
18 | # Add the scripts directory to the Python path
19 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))
   |                                 ^^^^^^^^^^^^^^^ PTH120
20 |
21 | # Import existing analysis modules
   |

.github/scripts/main_with_documentation.py:53:9: E722 Do not use bare `except`
   |
51 |         try:
52 |             self.repo_analyzer = RepositoryAnalyzer(str(self.project_path))
53 |         except:
   |         ^^^^^^ E722
54 |             logger.warning("Repository analyzer not available")
   |

.github/scripts/main_with_documentation.py:60:13: E722 Do not use bare `except`
   |
58 |                 self.github_client = GitHubAPIClient(github_token)
59 |                 self.issue_tracker = IssueTracker(github_token)
60 |             except:
   |             ^^^^^^ E722
61 |                 logger.warning("GitHub integration not available")
   |

.github/scripts/main_with_documentation.py:254:62: ARG002 Unused method argument: `repo_results`
    |
252 |         return integration_data
253 |
254 |     def _analyze_doc_code_alignment(self, doc_results: dict, repo_results: dict) -> dict[str, Any]:
    |                                                              ^^^^^^^^^^^^ ARG002
255 |         """Analyze alignment between documentation and code."""
256 |         alignment_data = {
    |

.github/scripts/main_with_documentation.py:408:60: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
    |
406 |             # Documentation Gaps
407 |             doc_metrics = doc_results.get("metrics", {})
408 |             if doc_metrics.get("coverage_percentage", 0) < 50:
    |                                                            ^^ PLR2004
409 |                 gaps.append(
410 |                     {
    |

.github/scripts/main_with_documentation.py:421:62: PLR2004 Magic value used in comparison, consider replacing `0.5` with a constant variable
    |
419 |             # GitHub Activity Gaps
420 |             activity_metrics = github_results.get("activity_metrics", {})
421 |             if activity_metrics.get("issue_close_rate", 0) < 0.5:
    |                                                              ^^^ PLR2004
422 |                 gaps.append(
423 |                     {
    |

.github/scripts/main_with_documentation.py:434:36: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
432 |             # Community Engagement Gaps
433 |             contributors = github_results.get("contributors", [])
434 |             if len(contributors) < 3:
    |                                    ^ PLR2004
435 |                 gaps.append(
436 |                     {
    |

.github/scripts/main_with_documentation.py:447:34: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
445 |             # API Documentation Gaps
446 |             doc_issues = github_results.get("documentation_issues", [])
447 |             if len(doc_issues) > 3:
    |                                  ^ PLR2004
448 |                 gaps.append(
449 |                     {
    |

.github/scripts/main_with_documentation.py:475:30: PLR2004 Magic value used in comparison, consider replacing `70` with a constant variable
    |
473 |             contributors = github_results.get("contributors", [])
474 |
475 |             if doc_quality > 70 and len(contributors) > 5:
    |                              ^^ PLR2004
476 |                 insights.append(
477 |                     {
    |

.github/scripts/main_with_documentation.py:475:57: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
473 |             contributors = github_results.get("contributors", [])
474 |
475 |             if doc_quality > 70 and len(contributors) > 5:
    |                                                         ^ PLR2004
476 |                 insights.append(
477 |                     {
    |

.github/scripts/main_with_documentation.py:484:32: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
    |
482 |                     }
483 |                 )
484 |             elif doc_quality < 50 and len(contributors) < 3:
    |                                ^^ PLR2004
485 |                 insights.append(
486 |                     {
    |

.github/scripts/main_with_documentation.py:484:59: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
482 |                     }
483 |                 )
484 |             elif doc_quality < 50 and len(contributors) < 3:
    |                                                           ^ PLR2004
485 |                 insights.append(
486 |                     {
    |

.github/scripts/main_with_documentation.py:498:62: PLR2004 Magic value used in comparison, consider replacing `0.8` with a constant variable
    |
496 |             doc_issues = github_results.get("documentation_issues", [])
497 |
498 |             if activity_metrics.get("issue_close_rate", 0) > 0.8 and len(doc_issues) > 0:
    |                                                              ^^^ PLR2004
499 |                 insights.append(
500 |                     {
    |

.github/scripts/main_with_documentation.py:512:31: PLR2004 Magic value used in comparison, consider replacing `70` with a constant variable
    |
510 |             pr_merge_rate = activity_metrics.get("pr_merge_rate", 0)
511 |
512 |             if doc_coverage > 70 and pr_merge_rate > 0.7:
    |                               ^^ PLR2004
513 |                 insights.append(
514 |                     {
    |

.github/scripts/main_with_documentation.py:512:54: PLR2004 Magic value used in comparison, consider replacing `0.7` with a constant variable
    |
510 |             pr_merge_rate = activity_metrics.get("pr_merge_rate", 0)
511 |
512 |             if doc_coverage > 70 and pr_merge_rate > 0.7:
    |                                                      ^^^ PLR2004
513 |                 insights.append(
514 |                     {
    |

.github/scripts/main_with_documentation.py:603:66: PLR2004 Magic value used in comparison, consider replacing `40` with a constant variable
    |
602 |             # Critical recommendations based on combined metrics
603 |             if combined_metrics.get("overall_health_score", 0) < 40:
    |                                                                  ^^ PLR2004
604 |                 recommendations["critical"].append(
605 |                     {
    |

.github/scripts/main_with_documentation.py:624:66: PLR2004 Magic value used in comparison, consider replacing `60` with a constant variable
    |
623 |             # Strategic recommendations
624 |             if combined_metrics.get("documentation_health", 0) < 60:
    |                                                                  ^^ PLR2004
625 |                 recommendations["strategic"].append(
626 |                     {
    |

.github/scripts/main_with_documentation.py:638:66: PLR2004 Magic value used in comparison, consider replacing `40` with a constant variable
    |
636 |                 )
637 |
638 |             if combined_metrics.get("community_engagement", 0) < 40:
    |                                                                  ^^ PLR2004
639 |                 recommendations["strategic"].append(
640 |                     {
    |

.github/scripts/main_with_documentation.py:675:14: PTH123 `open()` should be replaced by `Path.open()`
    |
673 |         # JSON export
674 |         json_path = output_path / "comprehensive_analysis.json"
675 |         with open(json_path, "w", encoding="utf-8") as f:
    |              ^^^^ PTH123
676 |             json.dump(analysis_results, f, indent=2, default=str)
    |

.github/scripts/main_with_documentation.py:681:14: PTH123 `open()` should be replaced by `Path.open()`
    |
679 |         report_path = output_path / "analysis_report.md"
680 |         report_content = self._generate_markdown_report(analysis_results)
681 |         with open(report_path, "w", encoding="utf-8") as f:
    |              ^^^^ PTH123
682 |             f.write(report_content)
    |

.github/scripts/main_with_documentation.py:689:9: PLR0915 Too many statements (65 > 50)
    |
687 |         logger.info(f"Analysis results exported to {output_path}")
688 |
689 |     def _generate_markdown_report(self, analysis_results: dict[str, Any]) -> str:
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
690 |         """Generate a comprehensive markdown report."""
691 |         report = []
    |

.github/scripts/main_with_documentation.py:788:18: PTH123 `open()` should be replaced by `Path.open()`
    |
786 |         if combined_metrics:
787 |             csv_path = output_path / "combined_metrics.csv"
788 |             with open(csv_path, "w", newline="", encoding="utf-8") as f:
    |                  ^^^^ PTH123
789 |                 writer = csv.writer(f)
790 |                 writer.writerow(["Metric", "Value"])
    |

.github/scripts/main_with_documentation.py:798:18: PTH123 `open()` should be replaced by `Path.open()`
    |
796 |         if doc_metrics:
797 |             csv_path = output_path / "documentation_metrics.csv"
798 |             with open(csv_path, "w", newline="", encoding="utf-8") as f:
    |                  ^^^^ PTH123
799 |                 writer = csv.writer(f)
800 |                 writer.writerow(["Metric", "Value"])
    |

.github/scripts/notification_service.py:147:43: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
145 |                 ) as response,
146 |             ):
147 |                 return response.status == 200
    |                                           ^^^ PLR2004
148 |         except Exception as e:
149 |             logger.error(f"Slack notification error: {e!s}")
    |

.github/scripts/notification_service.py:372:47: ARG002 Unused method argument: `recipient`
    |
370 |         return text
371 |
372 |     async def _send_github_notification(self, recipient: NotificationRecipient, content: NotificationContent) -> bool:
    |                                               ^^^^^^^^^ ARG002
373 |         """Send a notification via GitHub (comment or status)."""
374 |         if not self.github_token or not content.repository:
    |

.github/scripts/notification_service.py:391:47: PLR2004 Magic value used in comparison, consider replacing `201` with a constant variable
    |
389 |                     session.post(url, headers=headers, json={"body": comment_body}) as response,
390 |                 ):
391 |                     return response.status == 201
    |                                               ^^^ PLR2004
392 |
393 |             return False
    |

.github/scripts/notification_service.py:506:14: B007 Loop control variable `recipient_id` not used within loop body
    |
505 |         # Send individual or digest notifications
506 |         for (recipient_id, notif_type), group in grouped.items():
    |              ^^^^^^^^^^^^ B007
507 |             if len(group) == 1:
508 |                 # Send individual notification
    |
    = help: Rename unused `recipient_id` to `_recipient_id`

.github/scripts/notification_service.py:533:20: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
531 |                 message_parts.append(f"   Repository: {content.repository}")
532 |
533 |         if count > 5:
    |                    ^ PLR2004
534 |             message_parts.append(f"\n... and {count - 5} more")
    |

.github/scripts/pr_processor.py:143:25: S113 Probable use of `requests` call without timeout
    |
141 |         # Get PR diff
142 |         diff_url = self.pr_data.get("diff_url")
143 |         diff_response = requests.get(diff_url)
    |                         ^^^^^^^^^^^^ S113
144 |         diff_response.raise_for_status()
145 |         self.diff = diff_response.text
    |

.github/scripts/pr_processor.py:439:12: PLW0602 Using global for `processing_threads` but no assignment is done
    |
437 | def start_processing_threads():
438 |     """Start processing threads for the queue."""
439 |     global processing_threads
    |            ^^^^^^^^^^^^^^^^^^ PLW0602
440 |     global is_running
    |

.github/scripts/pr_processor.py:440:12: PLW0603 Using the global statement to update `is_running` is discouraged
    |
438 |     """Start processing threads for the queue."""
439 |     global processing_threads
440 |     global is_running
    |            ^^^^^^^^^^ PLW0603
441 |
442 |     is_running = True
    |

.github/scripts/pr_processor.py:455:12: PLW0603 Using the global statement to update `is_running` is discouraged
    |
453 | def stop_processing_threads():
454 |     """Stop processing threads."""
455 |     global is_running
    |            ^^^^^^^^^^ PLW0603
456 |
457 |     is_running = False
    |

.github/scripts/pr_processor.py:470:1: E402 Module level import not at top of file
    |
469 | # Register shutdown function
470 | import atexit
    | ^^^^^^^^^^^^^ E402
471 |
472 | atexit.register(stop_processing_threads)
    |

.github/scripts/repositories/__init__.py:1:1: N999 Invalid module name: '.github'
.github/scripts/repositories/base_repository.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from typing import Any, TypeVar
12 |
13 | from ..core.exceptions import DatabaseError, EntityNotFoundError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..core.interfaces import DatabaseInterface, RepositoryInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/repositories/base_repository.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from typing import Any, TypeVar
12 |
13 | from ..core.exceptions import DatabaseError, EntityNotFoundError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..core.interfaces import DatabaseInterface, RepositoryInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/repositories/base_repository.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..core.exceptions import DatabaseError, EntityNotFoundError
14 | from ..core.interfaces import DatabaseInterface, RepositoryInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 |
16 | T = TypeVar("T")
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/repositories/base_repository.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..core.exceptions import DatabaseError, EntityNotFoundError
14 | from ..core.interfaces import DatabaseInterface, RepositoryInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 |
16 | T = TypeVar("T")
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/repositories/base_repository.py:56:17: S608 Possible SQL injection vector through string-based query construction
   |
54 |     async def find_by_id(self, entity_id: str) -> Entity | None:
55 |         """Find entity by ID."""
56 |         query = f"SELECT * FROM {self.table_name} WHERE id = ?"
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S608
57 |         result = await self.database.execute(query, {"id": entity_id})
   |

.github/scripts/repositories/base_repository.py:72:24: S608 Possible SQL injection vector through string-based query construction
   |
70 |     ) -> list[Entity]:
71 |         """Find all entities matching filters."""
72 |         query_parts = [f"SELECT * FROM {self.table_name}"]
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S608
73 |         params = {}
   |

.github/scripts/repositories/base_repository.py:120:17: S608 Possible SQL injection vector through string-based query construction
    |
118 |           placeholders = [f":{col}" for col in columns]
119 |
120 |           query = f"""
    |  _________________^
121 | |             INSERT INTO {self.table_name} ({", ".join(columns)})
122 | |             VALUES ({", ".join(placeholders)})
123 | |         """
    | |___________^ S608
124 |
125 |           await self.database.execute(query, data)
    |

.github/scripts/repositories/base_repository.py:140:17: S608 Possible SQL injection vector through string-based query construction
    |
138 |           # Build update query
139 |           set_clauses = [f"{col} = :{col}" for col in updates]
140 |           query = f"""
    |  _________________^
141 | |             UPDATE {self.table_name}
142 | |             SET {", ".join(set_clauses)}
143 | |             WHERE id = :id
144 | |         """
    | |___________^ S608
145 |
146 |           params = {**updates, "id": entity_id}
    |

.github/scripts/repositories/base_repository.py:153:17: S608 Possible SQL injection vector through string-based query construction
    |
151 |     async def delete(self, entity_id: str) -> bool:
152 |         """Delete entity."""
153 |         query = f"DELETE FROM {self.table_name} WHERE id = ?"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S608
154 |         result = await self.database.execute(query, {"id": entity_id})
    |

.github/scripts/repositories/base_repository.py:160:24: S608 Possible SQL injection vector through string-based query construction
    |
158 |     async def count(self, filters: dict[str, Any] | None = None) -> int:
159 |         """Count entities matching filters."""
160 |         query_parts = [f"SELECT COUNT(*) FROM {self.table_name}"]
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S608
161 |         params = {}
    |

.github/scripts/repositories/base_repository.py:182:17: S608 Possible SQL injection vector through string-based query construction
    |
180 |     async def exists(self, entity_id: str) -> bool:
181 |         """Check if entity exists."""
182 |         query = f"SELECT 1 FROM {self.table_name} WHERE id = ? LIMIT 1"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S608
183 |         result = await self.database.execute(query, {"id": entity_id})
    |

.github/scripts/repositories/base_repository.py:223:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
222 |     def __init__(self, db_path: str, table_name: str):
223 |         from ..implementations.sqlite_database import SQLiteDatabase
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
224 |
225 |         database = SQLiteDatabase(db_path)
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/repositories/review_repository.py:286:1: E402 Module level import not at top of file
    |
285 | # Import json at the top of file
286 | import json
    | ^^^^^^^^^^^ E402
    |

.github/scripts/run_documentation_analysis.py:14:20: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
13 | # Add the current directory to the Python path
14 | sys.path.insert(0, os.path.dirname(__file__))
   |                    ^^^^^^^^^^^^^^^ PTH120
15 |
16 | from analyzers.documentation_analyzer import DocumentationAnalysisSystem
   |

.github/scripts/run_documentation_analysis.py:29:5: PLR0912 Too many branches (21 > 12)
   |
29 | def main():
   |     ^^^^ PLR0912
30 |     """Main function."""
31 |     parser = argparse.ArgumentParser(
   |

.github/scripts/run_documentation_analysis.py:29:5: PLR0915 Too many statements (78 > 50)
   |
29 | def main():
   |     ^^^^ PLR0915
30 |     """Main function."""
31 |     parser = argparse.ArgumentParser(
   |

.github/scripts/run_documentation_analysis.py:128:18: PTH123 `open()` should be replaced by `Path.open()`
    |
126 |             report_path = output_dir / "documentation_analysis_report.md"
127 |             report_content = system.generate_report(results)
128 |             with open(report_path, "w", encoding="utf-8") as f:
    |                  ^^^^ PTH123
129 |                 f.write(report_content)
130 |             logger.info(f"Markdown report exported to: {report_path}")
    |

.github/scripts/run_documentation_analysis.py:135:18: PTH123 `open()` should be replaced by `Path.open()`
    |
133 |             html_path = output_dir / "documentation_analysis_report.html"
134 |             html_content = generate_html_report(results)
135 |             with open(html_path, "w", encoding="utf-8") as f:
    |                  ^^^^ PTH123
136 |                 f.write(html_content)
137 |             logger.info(f"HTML report exported to: {html_path}")
    |

.github/scripts/security_manager.py:30:17: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
29 | # Constants
30 | AUDIT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "audit.db")
   |                 ^^^^^^^^^^^^ PTH118
31 | ENCRYPTION_KEY_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "security", "encryption.key")
   |

.github/scripts/security_manager.py:30:30: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
29 | # Constants
30 | AUDIT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "audit.db")
   |                              ^^^^^^^^^^^^^^^ PTH120
31 | ENCRYPTION_KEY_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "security", "encryption.key")
   |

.github/scripts/security_manager.py:31:23: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
29 | # Constants
30 | AUDIT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "audit.db")
31 | ENCRYPTION_KEY_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "security", "encryption.key")
   |                       ^^^^^^^^^^^^ PTH118
   |

.github/scripts/security_manager.py:31:36: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
29 | # Constants
30 | AUDIT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "audit.db")
31 | ENCRYPTION_KEY_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "security", "encryption.key")
   |                                    ^^^^^^^^^^^^^^^ PTH120
   |

.github/scripts/security_manager.py:43:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
42 |         # Ensure directories exist
43 |         os.makedirs(os.path.dirname(self.audit_db_path), exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
44 |         os.makedirs(os.path.dirname(self.encryption_key_path), exist_ok=True)
   |

.github/scripts/security_manager.py:43:21: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
42 |         # Ensure directories exist
43 |         os.makedirs(os.path.dirname(self.audit_db_path), exist_ok=True)
   |                     ^^^^^^^^^^^^^^^ PTH120
44 |         os.makedirs(os.path.dirname(self.encryption_key_path), exist_ok=True)
   |

.github/scripts/security_manager.py:44:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
42 |         # Ensure directories exist
43 |         os.makedirs(os.path.dirname(self.audit_db_path), exist_ok=True)
44 |         os.makedirs(os.path.dirname(self.encryption_key_path), exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
45 |
46 |         # Initialize encryption
   |

.github/scripts/security_manager.py:44:21: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
42 |         # Ensure directories exist
43 |         os.makedirs(os.path.dirname(self.audit_db_path), exist_ok=True)
44 |         os.makedirs(os.path.dirname(self.encryption_key_path), exist_ok=True)
   |                     ^^^^^^^^^^^^^^^ PTH120
45 |
46 |         # Initialize encryption
   |

.github/scripts/security_manager.py:56:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
54 |         try:
55 |             # Try to load existing key
56 |             if os.path.exists(self.encryption_key_path):
   |                ^^^^^^^^^^^^^^ PTH110
57 |                 with open(self.encryption_key_path, "rb") as f:
58 |                     key = f.read()
   |

.github/scripts/security_manager.py:57:22: PTH123 `open()` should be replaced by `Path.open()`
   |
55 |             # Try to load existing key
56 |             if os.path.exists(self.encryption_key_path):
57 |                 with open(self.encryption_key_path, "rb") as f:
   |                      ^^^^ PTH123
58 |                     key = f.read()
59 |             else:
   |

.github/scripts/security_manager.py:62:22: PTH123 `open()` should be replaced by `Path.open()`
   |
60 |                 # Generate new key
61 |                 key = Fernet.generate_key()
62 |                 with open(self.encryption_key_path, "wb") as f:
   |                      ^^^^ PTH123
63 |                     f.write(key)
64 |                 # Set secure permissions
   |

.github/scripts/security_manager.py:65:17: PTH101 `os.chmod()` should be replaced by `Path.chmod()`
   |
63 |                     f.write(key)
64 |                 # Set secure permissions
65 |                 os.chmod(self.encryption_key_path, 0o600)
   |                 ^^^^^^^^ PTH101
66 |                 logger.info("Generated new encryption key")
   |

.github/scripts/security_manager.py:595:21: E722 Do not use bare `except`
    |
593 |                         decrypted_details = self.cipher.decrypt(row[7].encode()).decode()
594 |                         log_entry["details"] = json.loads(decrypted_details)
595 |                     except:
    |                     ^^^^^^ E722
596 |                         log_entry["details"] = {"error": "Failed to decrypt details"}
    |

.github/scripts/services/__init__.py:1:1: N999 Invalid module name: '.github'
.github/scripts/services/authentication_service.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | import jwt
13 |
14 | from ..core.exceptions import AuthenticationError, ConfigurationError, TokenError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..core.interfaces import AuthenticationInterface, CacheInterface, DatabaseInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/authentication_service.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | import jwt
13 |
14 | from ..core.exceptions import AuthenticationError, ConfigurationError, TokenError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..core.interfaces import AuthenticationInterface, CacheInterface, DatabaseInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/authentication_service.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | import jwt
13 |
14 | from ..core.exceptions import AuthenticationError, ConfigurationError, TokenError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..core.interfaces import AuthenticationInterface, CacheInterface, DatabaseInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/authentication_service.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..core.exceptions import AuthenticationError, ConfigurationError, TokenError
15 | from ..core.interfaces import AuthenticationInterface, CacheInterface, DatabaseInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/authentication_service.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..core.exceptions import AuthenticationError, ConfigurationError, TokenError
15 | from ..core.interfaces import AuthenticationInterface, CacheInterface, DatabaseInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/authentication_service.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..core.exceptions import AuthenticationError, ConfigurationError, TokenError
15 | from ..core.interfaces import AuthenticationInterface, CacheInterface, DatabaseInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/authentication_service.py:28:48: PLR2004 Magic value used in comparison, consider replacing `32` with a constant variable
   |
26 |         refresh_token_expire_days: int = 30,
27 |     ):
28 |         if not secret_key or len(secret_key) < 32:
   |                                                ^^ PLR2004
29 |             raise ConfigurationError("JWT secret key must be at least 32 characters")
   |

.github/scripts/services/authentication_service.py:53:57: F821 Undefined name `Any`
   |
51 |         self.cache = cache
52 |
53 |     async def authenticate(self, credentials: dict[str, Any]) -> str | None:
   |                                                         ^^^ F821
54 |         """
55 |         Authenticate user and return access token.
   |

.github/scripts/services/authentication_service.py:76:61: F821 Undefined name `Any`
   |
74 |         raise AuthenticationError("Invalid credentials format")
75 |
76 |     async def validate_token(self, token: str) -> dict[str, Any] | None:
   |                                                             ^^^ F821
77 |         """
78 |         Validate token and return claims.
   |

.github/scripts/services/authentication_service.py:138:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
137 |         except jwt.ExpiredSignatureError:
138 |             raise TokenError("Refresh token has expired")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
139 |         except jwt.InvalidTokenError:
140 |             raise TokenError("Invalid refresh token")
    |

.github/scripts/services/authentication_service.py:140:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
138 |             raise TokenError("Refresh token has expired")
139 |         except jwt.InvalidTokenError:
140 |             raise TokenError("Invalid refresh token")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
141 |
142 |     async def revoke_token(self, token: str) -> bool:
    |

.github/scripts/services/webhook_service.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from typing import Any
15 |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from typing import Any
15 |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from typing import Any
15 |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | logger = logging.getLogger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | logger = logging.getLogger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | logger = logging.getLogger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | logger = logging.getLogger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:133:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
131 |             payload = json.loads(body.decode("utf-8"))
132 |         except json.JSONDecodeError as e:
133 |             raise WebhookValidationError(f"Invalid JSON payload: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
134 |
135 |         # Create event object
    |

.github/scripts/services/webhook_service.py:182:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
180 |             self.metrics.increment("webhook.processed", tags={"event": event.event_type, "status": "error"})
181 |
182 |             raise WebhookProcessingError(f"Failed to process {event.event_type}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
183 |
184 |     async def _handle_pull_request(self, event: WebhookEvent) -> dict[str, Any]:
    |

.github/scripts/services/webhook_service.py:238:49: ARG002 Unused method argument: `event`
    |
236 |         return {"processed": False, "reason": "no_kiro_mention"}
237 |
238 |     async def _handle_pull_request_review(self, event: WebhookEvent) -> dict[str, Any]:
    |                                                 ^^^^^ ARG002
239 |         """Handle pull request review events."""
240 |         # Implementation for review events
    |

.github/scripts/services/webhook_service.py:243:34: ARG002 Unused method argument: `event`
    |
241 |         return {"processed": True, "action": "review_recorded"}
242 |
243 |     async def _handle_push(self, event: WebhookEvent) -> dict[str, Any]:
    |                                  ^^^^^ ARG002
244 |         """Handle push events."""
245 |         # Implementation for push events
    |

.github/scripts/services/webhook_service.py:248:37: ARG002 Unused method argument: `event`
    |
246 |         return {"processed": False, "reason": "push_events_not_supported"}
247 |
248 |     async def _handle_release(self, event: WebhookEvent) -> dict[str, Any]:
    |                                     ^^^^^ ARG002
249 |         """Handle release events."""
250 |         # Implementation for release events
    |

.github/scripts/services/webhook_service.py:281:62: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
279 |         # Higher priority for smaller PRs
280 |         pr = pr_data["pr_data"]
281 |         if pr.get("additions", 0) + pr.get("deletions", 0) < 100:
    |                                                              ^^^ PLR2004
282 |             priority += 2
    |

.github/scripts/slack_integration.py:107:29: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
105 |             status_emoji = "🔴"
106 |             status_text = "Critical Issues Found"
107 |         elif total_issues > 5:
    |                             ^ PLR2004
108 |             status_emoji = "🟡"
109 |             status_text = "Multiple Issues Found"
    |

.github/scripts/slack_integration.py:288:26: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
287 |         parts = command["text"].strip().split()
288 |         if len(parts) != 2:
    |                          ^ PLR2004
289 |             await client.chat_postEphemeral(
290 |                 channel=command["channel_id"],
    |

.github/scripts/slack_integration.py:358:38: ARG002 Unused method argument: `repository`
    |
356 |         await client.chat_postMessage(channel=command["channel_id"], text="Kiro statistics", blocks=blocks)
357 |
358 |     def _generate_sample_stats(self, repository: str | None) -> dict[str, Any]:
    |                                      ^^^^^^^^^^ ARG002
359 |         """Generate sample statistics (would be replaced with real data)."""
360 |         return {
    |

.github/scripts/webhook_server.py:53:5: PLR0911 Too many return statements (7 > 6)
   |
52 | @app.route("/api/webhooks/github", methods=["POST"])
53 | def github_webhook():
   |     ^^^^^^^^^^^^^^ PLR0911
54 |     """Handle GitHub webhook events."""
55 |     # Verify signature
   |

.github/scripts/webhook_server.py:110:39: PLW1508 Invalid type for environment variable default; expected `str` or `None`
    |
108 | def main():
109 |     """Run the webhook server."""
110 |     port = int(os.environ.get("PORT", 5000))
    |                                       ^^^^ PLW1508
111 |     app.run(host="0.0.0.0", port=port)
    |

.github/scripts/webhook_server.py:111:18: S104 Possible binding to all interfaces
    |
109 |     """Run the webhook server."""
110 |     port = int(os.environ.get("PORT", 5000))
111 |     app.run(host="0.0.0.0", port=port)
    |                  ^^^^^^^^^ S104
    |

.github/tests/e2e/test_complete_flows.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | import pytest
15 |
16 | from ...scripts.core.container import ServiceContainer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ...scripts.core.logging import configure_logging, get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ...scripts.core.container import ServiceContainer
17 | from ...scripts.core.logging import configure_logging, get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | # Configure logging for tests
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ...scripts.core.container import ServiceContainer
17 | from ...scripts.core.logging import configure_logging, get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | # Configure logging for tests
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:37:9: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |           """Set up test environment."""
36 |           # Register mock services
37 | /         from ...scripts.core.interfaces import (
38 | |             CacheInterface,
39 | |             DatabaseInterface,
40 | |             GitHubClientInterface,
41 | |             MetricsInterface,
42 | |             NotificationInterface,
43 | |             QueueInterface,
44 | |         )
   | |_________^ TID252
45 |
46 |           # Mock implementations
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:37:9: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |           """Set up test environment."""
36 |           # Register mock services
37 | /         from ...scripts.core.interfaces import (
38 | |             CacheInterface,
39 | |             DatabaseInterface,
40 | |             GitHubClientInterface,
41 | |             MetricsInterface,
42 | |             NotificationInterface,
43 | |             QueueInterface,
44 | |         )
   | |_________^ TID252
45 |
46 |           # Mock implementations
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:37:9: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |           """Set up test environment."""
36 |           # Register mock services
37 | /         from ...scripts.core.interfaces import (
38 | |             CacheInterface,
39 | |             DatabaseInterface,
40 | |             GitHubClientInterface,
41 | |             MetricsInterface,
42 | |             NotificationInterface,
43 | |             QueueInterface,
44 | |         )
   | |_________^ TID252
45 |
46 |           # Mock implementations
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:37:9: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |           """Set up test environment."""
36 |           # Register mock services
37 | /         from ...scripts.core.interfaces import (
38 | |             CacheInterface,
39 | |             DatabaseInterface,
40 | |             GitHubClientInterface,
41 | |             MetricsInterface,
42 | |             NotificationInterface,
43 | |             QueueInterface,
44 | |         )
   | |_________^ TID252
45 |
46 |           # Mock implementations
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:37:9: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |           """Set up test environment."""
36 |           # Register mock services
37 | /         from ...scripts.core.interfaces import (
38 | |             CacheInterface,
39 | |             DatabaseInterface,
40 | |             GitHubClientInterface,
41 | |             MetricsInterface,
42 | |             NotificationInterface,
43 | |             QueueInterface,
44 | |         )
   | |_________^ TID252
45 |
46 |           # Mock implementations
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:37:9: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |           """Set up test environment."""
36 |           # Register mock services
37 | /         from ...scripts.core.interfaces import (
38 | |             CacheInterface,
39 | |             DatabaseInterface,
40 | |             GitHubClientInterface,
41 | |             MetricsInterface,
42 | |             NotificationInterface,
43 | |             QueueInterface,
44 | |         )
   | |_________^ TID252
45 |
46 |           # Mock implementations
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:71:69: ARG002 Unused method argument: `kwargs`
   |
69 |         self.notifications.send.side_effect = self._send_notification
70 |
71 |     async def _queue_publish(self, queue_name: str, message: Any, **kwargs):
   |                                                                     ^^^^^^ ARG002
72 |         """Mock queue publish."""
73 |         msg_id = f"msg-{len(self.webhook_events)}"
   |

.github/tests/e2e/test_complete_flows.py:95:86: ARG002 Unused method argument: `kwargs`
   |
93 |         }
94 |
95 |     async def _send_notification(self, recipient: str, subject: str, message: str, **kwargs):
   |                                                                                      ^^^^^^ ARG002
96 |         """Mock notification sending."""
97 |         notification = {
   |

.github/tests/e2e/test_complete_flows.py:145:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
144 |         # 2. Process webhook
145 |         from ...scripts.services.webhook_service import WebhookService, WebhookValidator
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
146 |
147 |         validator = WebhookValidator("test-secret")
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:145:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
144 |         # 2. Process webhook
145 |         from ...scripts.services.webhook_service import WebhookService, WebhookValidator
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
146 |
147 |         validator = WebhookValidator("test-secret")
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_e2e_scenarios.py:16:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
15 | # Add parent directory to path for imports
16 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "scripts"))
   |                    ^^^^^^^^^^^^ PTH118
   |

.github/tests/e2e/test_e2e_scenarios.py:16:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
15 | # Add parent directory to path for imports
16 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "scripts"))
   |                                 ^^^^^^^^^^^^^^^ PTH120
   |

.github/tests/e2e/test_e2e_scenarios.py:53:55: ARG002 Unused method argument: `e2e_config`
   |
52 |     @pytest.mark.asyncio
53 |     async def test_new_pr_complete_review_cycle(self, e2e_config, mock_github_api):
   |                                                       ^^^^^^^^^^ ARG002
54 |         """Test complete cycle: PR opened -> analysis -> review -> notification."""
55 |         # Simulate webhook payload for new PR
   |

.github/tests/e2e/test_e2e_scenarios.py:96:59: ARG002 Unused method argument: `e2e_config`
   |
95 |     @pytest.mark.asyncio
96 |     async def test_pr_with_incremental_improvements(self, e2e_config, mock_github_api):
   |                                                           ^^^^^^^^^^ ARG002
97 |         """Test PR that gets updated based on review feedback."""
98 |         # Initial PR with issues
   |

.github/tests/e2e/test_e2e_scenarios.py:137:44: ARG002 Unused method argument: `e2e_config`
    |
136 |     @pytest.mark.asyncio
137 |     async def test_large_pr_handling(self, e2e_config, mock_github_api):
    |                                            ^^^^^^^^^^ ARG002
138 |         """Test handling of large PRs with many files."""
139 |         # Create a large PR with 50+ files
    |

.github/tests/e2e/test_e2e_scenarios.py:164:44: ARG002 Unused method argument: `e2e_config`
    |
163 |     @pytest.mark.asyncio
164 |     async def test_multi_language_pr(self, e2e_config, mock_github_api):
    |                                            ^^^^^^^^^^ ARG002
165 |         """Test PR with multiple programming languages."""
166 |         multi_lang_files = [
    |

.github/tests/e2e/test_e2e_scenarios.py:198:56: ARG002 Unused method argument: `e2e_config`
    |
197 |     @pytest.mark.asyncio
198 |     async def test_emergency_security_alert_flow(self, e2e_config, mock_github_api):
    |                                                        ^^^^^^^^^^ ARG002
199 |         """Test critical security issue triggers emergency flow."""
200 |         critical_security_pr = {
    |

.github/tests/e2e/test_e2e_scenarios.py:249:59: ARG002 Unused method argument: `e2e_config`
    |
248 |     @pytest.mark.asyncio
249 |     async def test_performance_regression_detection(self, e2e_config, mock_github_api):
    |                                                           ^^^^^^^^^^ ARG002
250 |         """Test detection of performance regressions."""
251 |         pr_with_perf_issue = {
    |

.github/tests/e2e/test_e2e_scenarios.py:289:52: ARG002 Unused method argument: `e2e_config`
    |
288 |     @pytest.mark.asyncio
289 |     async def test_custom_rule_configuration(self, e2e_config, mock_github_api):
    |                                                    ^^^^^^^^^^ ARG002
290 |         """Test repository-specific custom rules."""
    |

.github/tests/integration/test_github_api_integration.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | import pytest
14 |
15 | from ...scripts.core.interfaces import GitHubClientInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ...scripts.repositories.review_repository import Review, ReviewRepository
17 | from ...scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...scripts.core.interfaces import GitHubClientInterface
16 | from ...scripts.repositories.review_repository import Review, ReviewRepository
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ...scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...scripts.core.interfaces import GitHubClientInterface
16 | from ...scripts.repositories.review_repository import Review, ReviewRepository
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ...scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...scripts.core.interfaces import GitHubClientInterface
16 | from ...scripts.repositories.review_repository import Review, ReviewRepository
17 | from ...scripts.services.webhook_service import WebhookService, WebhookValidator
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...scripts.core.interfaces import GitHubClientInterface
16 | from ...scripts.repositories.review_repository import Review, ReviewRepository
17 | from ...scripts.services.webhook_service import WebhookService, WebhookValidator
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:39:34: ARG002 Unused method argument: `owner`
   |
37 |         return self.pull_requests[key]
38 |
39 |     async def get_pr_files(self, owner: str, repo: str, pr_number: int) -> list[dict[str, Any]]:
   |                                  ^^^^^ ARG002
40 |         """Get mock PR files."""
41 |         # Return test files
   |

.github/tests/integration/test_github_api_integration.py:39:46: ARG002 Unused method argument: `repo`
   |
37 |         return self.pull_requests[key]
38 |
39 |     async def get_pr_files(self, owner: str, repo: str, pr_number: int) -> list[dict[str, Any]]:
   |                                              ^^^^ ARG002
40 |         """Get mock PR files."""
41 |         # Return test files
   |

.github/tests/integration/test_github_api_integration.py:39:57: ARG002 Unused method argument: `pr_number`
   |
37 |         return self.pull_requests[key]
38 |
39 |     async def get_pr_files(self, owner: str, repo: str, pr_number: int) -> list[dict[str, Any]]:
   |                                                         ^^^^^^^^^ ARG002
40 |         """Get mock PR files."""
41 |         # Return test files
   |

.github/tests/integration/test_github_api_integration.py:61:35: ARG002 Unused method argument: `owner`
   |
59 |         ]
60 |
61 |     async def create_review(self, owner: str, repo: str, pr_number: int, review_data: dict[str, Any]) -> dict[str, Any]:
   |                                   ^^^^^ ARG002
62 |         """Create mock review."""
63 |         review_id = f"review-{len(self.reviews) + 1}"
   |

.github/tests/integration/test_github_api_integration.py:61:47: ARG002 Unused method argument: `repo`
   |
59 |         ]
60 |
61 |     async def create_review(self, owner: str, repo: str, pr_number: int, review_data: dict[str, Any]) -> dict[str, Any]:
   |                                               ^^^^ ARG002
62 |         """Create mock review."""
63 |         review_id = f"review-{len(self.reviews) + 1}"
   |

.github/tests/integration/test_github_api_integration.py:75:42: ARG002 Unused method argument: `owner`
   |
73 |         return review
74 |
75 |     async def create_issue_comment(self, owner: str, repo: str, issue_number: int, body: str) -> dict[str, Any]:
   |                                          ^^^^^ ARG002
76 |         """Create mock issue comment."""
77 |         comment_id = f"comment-{len(self.comments) + 1}"
   |

.github/tests/integration/test_github_api_integration.py:75:54: ARG002 Unused method argument: `repo`
   |
73 |         return review
74 |
75 |     async def create_issue_comment(self, owner: str, repo: str, issue_number: int, body: str) -> dict[str, Any]:
   |                                                      ^^^^ ARG002
76 |         """Create mock issue comment."""
77 |         comment_id = f"comment-{len(self.comments) + 1}"
   |

.github/tests/integration/test_github_api_integration.py:205:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
203 |     async def test_pr_analysis_flow(self, mock_github_client):
204 |         """Test complete PR analysis flow."""
205 |         from ...scripts.analyzers.base_analyzer import BaseAnalyzer
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
206 |         from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:206:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
204 |         """Test complete PR analysis flow."""
205 |         from ...scripts.analyzers.base_analyzer import BaseAnalyzer
206 |         from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
207 |
208 |         # Get PR files
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:286:47: ARG002 Unused method argument: `mock_github_client`
    |
285 |     @pytest.mark.asyncio
286 |     async def test_pr_synchronize_event(self, mock_github_client):
    |                                               ^^^^^^^^^^^^^^^^^^ ARG002
287 |         """Test handling PR synchronization (new commits)."""
288 |         payload = {
    |

.github/tests/integration/test_github_api_integration.py:304:49: ARG002 Unused method argument: `mock_github_client`
    |
303 |     @pytest.mark.asyncio
304 |     async def test_review_requested_event(self, mock_github_client):
    |                                                 ^^^^^^^^^^^^^^^^^^ ARG002
305 |         """Test handling review request event."""
306 |         payload = {
    |

.github/tests/integration/test_github_api_integration.py:317:48: ARG002 Unused method argument: `mock_github_client`
    |
316 |     @pytest.mark.asyncio
317 |     async def test_comment_mention_event(self, mock_github_client):
    |                                                ^^^^^^^^^^^^^^^^^^ ARG002
318 |         """Test handling @kiro-ai mentions in comments."""
319 |         payload = {
    |

.github/tests/integration/test_github_integration.py:16:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
15 | # Add parent directory to path for imports
16 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "scripts"))
   |                    ^^^^^^^^^^^^ PTH118
17 |
18 | from code_analyzer import CodeAnalyzer
   |

.github/tests/integration/test_github_integration.py:16:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
15 | # Add parent directory to path for imports
16 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "scripts"))
   |                                 ^^^^^^^^^^^^^^^ PTH120
17 |
18 | from code_analyzer import CodeAnalyzer
   |

.github/tests/integration/test_github_integration.py:170:84: ARG002 Unused method argument: `github_client`
    |
169 |     @pytest.mark.asyncio
170 |     async def test_pr_with_security_issues(self, code_analyzer, comment_generator, github_client):
    |                                                                                    ^^^^^^^^^^^^^ ARG002
171 |         """Test handling PR with security vulnerabilities."""
172 |         # Analyze code with SQL injection
    |

.github/tests/integration/test_github_integration.py:228:55: ARG002 Unused method argument: `code_analyzer`
    |
227 |     @pytest.mark.asyncio
228 |     async def test_configuration_based_analysis(self, code_analyzer, integration_config):
    |                                                       ^^^^^^^^^^^^^ ARG002
229 |         """Test that analysis respects configuration settings."""
230 |         # Update config to disable certain checks
    |

.github/tests/integration/test_github_integration.py:254:49: ARG002 Unused method argument: `webhook_handler`
    |
253 |     @pytest.mark.asyncio
254 |     async def test_error_handling_in_flow(self, webhook_handler, pr_processor, github_client):
    |                                                 ^^^^^^^^^^^^^^^ ARG002
255 |         """Test error handling throughout the integration flow."""
256 |         # Simulate GitHub API error
    |

.github/tests/integration/test_github_integration.py:288:70: ARG002 Unused method argument: `pr_processor`
    |
287 |     @pytest.mark.asyncio
288 |     async def test_incremental_review_on_push(self, webhook_handler, pr_processor, code_analyzer):
    |                                                                      ^^^^^^^^^^^^ ARG002
289 |         """Test incremental review when new commits are pushed."""
290 |         # First review
    |

.github/tests/integration/test_github_integration.py:288:84: ARG002 Unused method argument: `code_analyzer`
    |
287 |     @pytest.mark.asyncio
288 |     async def test_incremental_review_on_push(self, webhook_handler, pr_processor, code_analyzer):
    |                                                                                    ^^^^^^^^^^^^^ ARG002
289 |         """Test incremental review when new commits are pushed."""
290 |         # First review
    |

.github/tests/integration/test_github_integration.py:319:85: ARG002 Unused method argument: `github_client`
    |
318 |     @pytest.mark.asyncio
319 |     async def test_auto_fix_suggestion_flow(self, code_analyzer, comment_generator, github_client):
    |                                                                                     ^^^^^^^^^^^^^ ARG002
320 |         """Test flow for suggesting automatic fixes."""
321 |         # Code with fixable issue
    |

.github/tests/integration/test_github_integration.py:348:13: ERA001 Found commented-out code
    |
347 |             # In a real implementation, would create a commit suggestion
348 |             # github_client.create_commit_suggestion(...)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
349 |
350 |     @pytest.mark.asyncio
    |
    = help: Remove commented-out code

.github/tests/performance/test_load.py:19:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
18 | # Add parent directory to path for imports
19 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "scripts"))
   |                    ^^^^^^^^^^^^ PTH118
   |

.github/tests/performance/test_load.py:19:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
18 | # Add parent directory to path for imports
19 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "scripts"))
   |                                 ^^^^^^^^^^^^^^^ PTH120
   |

.github/tests/performance/test_load.py:61:16: F821 Undefined name `random`
   |
60 |         for i in range(num_lines):
61 |             if random.random() < 0.7:  # 70% additions
   |                ^^^^^^ F821
62 |                 line = f"+    line_{i} = 'code here'"
63 |                 # Randomly add issues
   |

.github/tests/performance/test_load.py:64:20: F821 Undefined name `random`
   |
62 |                 line = f"+    line_{i} = 'code here'"
63 |                 # Randomly add issues
64 |                 if random.random() < 0.1:  # 10% security issues
   |                    ^^^^^^ F821
65 |                     line = "+    password = 'hardcoded123'"
66 |                 elif random.random() < 0.2:  # 20% style issues
   |

.github/tests/performance/test_load.py:66:22: F821 Undefined name `random`
   |
64 |                 if random.random() < 0.1:  # 10% security issues
65 |                     line = "+    password = 'hardcoded123'"
66 |                 elif random.random() < 0.2:  # 20% style issues
   |                      ^^^^^^ F821
67 |                     line = f"+line_{i}='no_spaces_around_equals'"
68 |             else:  # 30% context/deletions
   |

.github/tests/performance/test_load.py:188:16: F821 Undefined name `random`
    |
187 |         gc.collect()
188 |         return random.uniform(100, 200)  # Simulated value
    |                ^^^^^^ F821
189 |
190 |     @pytest.mark.asyncio
    |

.github/tests/performance/test_load.py:247:37: F821 Undefined name `random`
    |
246 |                 # Simulate PR processing with repo-specific config
247 |                 await asyncio.sleep(random.uniform(0.1, 0.3))
    |                                     ^^^^^^ F821
248 |
249 |                 repo_results.append({"repo": repo_name, "pr": pr_num, "time": time.time() - start_time})
    |

.github/tests/performance/test_load.py:348:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
346 |             return await asyncio.wait_for(self.simulate_pr_processing(pr_data), timeout=timeout)
347 |         except TimeoutError:
348 |             raise Exception(f"Processing timeout for PR {pr_data['pull_request']['number']}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
349 |
350 |     async def simulate_pr_processing(self, pr_data):
    |

.github/tests/performance/test_load.py:360:28: F821 Undefined name `random`
    |
359 |         # Add some randomness
360 |         processing_time += random.uniform(-0.05, 0.05)
    |                            ^^^^^^ F821
361 |
362 |         await asyncio.sleep(processing_time)
    |

.github/tests/performance/test_load.py:404:29: F821 Undefined name `random`
    |
402 |     async def simulate_operation(self, op_id):
403 |         """Simulate a single operation."""
404 |         await asyncio.sleep(random.uniform(0.01, 0.1))
    |                             ^^^^^^ F821
405 |         if random.random() < 0.95:  # 95% success rate
406 |             return {"op_id": op_id, "status": "success"}
    |

.github/tests/performance/test_load.py:405:12: F821 Undefined name `random`
    |
403 |         """Simulate a single operation."""
404 |         await asyncio.sleep(random.uniform(0.01, 0.1))
405 |         if random.random() < 0.95:  # 95% success rate
    |            ^^^^^^ F821
406 |             return {"op_id": op_id, "status": "success"}
407 |         else:
    |

.github/tests/performance/test_performance.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | import pytest
19 |
20 | from ...scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/performance/test_performance.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | import pytest
19 |
20 | from ...scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/performance/test_performance.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 | from ...scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
23 | from ...scripts.core.logging import configure_logging, get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/performance/test_performance.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 | from ...scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
23 | from ...scripts.core.logging import configure_logging, get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/performance/test_performance.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 | from ...scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
23 | from ...scripts.core.logging import configure_logging, get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/performance/test_performance.py:23:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
23 | from ...scripts.core.logging import configure_logging, get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
24 |
25 | # Configure logging
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/performance/test_performance.py:23:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
23 | from ...scripts.core.logging import configure_logging, get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
24 |
25 | # Configure logging
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/run_tests.py:36:18: S603 `subprocess` call: check for execution of untrusted input
   |
34 |         cmd = [sys.executable, "-m", "pytest", suite["directory"], "-v", "--tb=short", f"-k {suite['pattern']}"]
35 |
36 |         result = subprocess.run(cmd, cwd=project_root, check=False)
   |                  ^^^^^^^^^^^^^^ S603
37 |
38 |         if result.returncode != 0:
   |

.github/tests/test_code_analyzer.py:20:1: W293 Blank line contains whitespace
   |
18 | class TestCodeAnalyzer:
19 |     """Test cases for CodeAnalyzer."""
20 |     
   | ^^^^ W293
21 |     @pytest.fixture
22 |     def mock_config(self):
   |
   = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:43:1: W293 Blank line contains whitespace
   |
41 |             'github_token': 'test-token'
42 |         }
43 |     
   | ^^^^ W293
44 |     @pytest.fixture
45 |     def code_analyzer(self, mock_config):
   |
   = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:48:1: W293 Blank line contains whitespace
   |
46 |         """Create a CodeAnalyzer instance for testing."""
47 |         return CodeAnalyzer(mock_config)
48 |     
   | ^^^^ W293
49 |     @pytest.fixture
50 |     def sample_python_code(self):
   |
   = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:72:1: W293 Blank line contains whitespace
   |
70 |     return False
71 | '''
72 |     
   | ^^^^ W293
73 |     @pytest.fixture
74 |     def sample_javascript_code(self):
   |
   = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:86:1: W293 Blank line contains whitespace
   |
84 |     // Security issue: logging sensitive data
85 |     console.log('Processing payment for card: ' + cardNumber);
86 |     
   | ^^^^ W293
87 |     // SQL injection vulnerability
88 |     const query = "SELECT * FROM payments WHERE card = '" + cardNumber + "'";
   |
   = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:97:1: W293 Blank line contains whitespace
   |
95 | };
96 | '''
97 |     
   | ^^^^ W293
98 |     @pytest.mark.asyncio
99 |     async def test_analyze_code_python(self, code_analyzer, sample_python_code):
   |
   = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:106:1: W293 Blank line contains whitespace
    |
104 |             'python'
105 |         )
106 |         
    | ^^^^^^^^ W293
107 |         assert isinstance(result, AnalysisResult)
108 |         assert result.file_path == 'example.py'
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:111:1: W293 Blank line contains whitespace
    |
109 |         assert result.language == 'python'
110 |         assert len(result.issues) > 0
111 |         
    | ^^^^^^^^ W293
112 |         # Check for security issue (eval usage)
113 |         security_issues = [i for i in result.issues if i.type == IssueType.SECURITY]
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:116:1: W293 Blank line contains whitespace
    |
114 |         assert len(security_issues) > 0
115 |         assert any('eval' in issue.message.lower() for issue in security_issues)
116 |     
    | ^^^^ W293
117 |     @pytest.mark.asyncio
118 |     async def test_analyze_code_javascript(self, code_analyzer, sample_javascript_code):
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:125:1: W293 Blank line contains whitespace
    |
123 |             'javascript'
124 |         )
125 |         
    | ^^^^^^^^ W293
126 |         assert isinstance(result, AnalysisResult)
127 |         assert result.file_path == 'example.js'
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:130:1: W293 Blank line contains whitespace
    |
128 |         assert result.language == 'javascript'
129 |         assert len(result.issues) > 0
130 |         
    | ^^^^^^^^ W293
131 |         # Check for various issue types
132 |         issue_types = {issue.type for issue in result.issues}
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:135:1: W293 Blank line contains whitespace
    |
133 |         assert IssueType.SECURITY in issue_types  # SQL injection, hardcoded credentials
134 |         assert IssueType.BUG in issue_types  # Missing error handling
135 |     
    | ^^^^ W293
136 |     @pytest.mark.asyncio
137 |     async def test_analyze_diff_added_lines(self, code_analyzer):
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:144:2: W291 Trailing whitespace
    |
142 |      for item in data:
143 |          result.append(item.upper())
144 | +    
    |  ^^^^ W291
145 | +    # New code with issue
146 | +    password = "hardcoded123"  # Security issue
    |
    = help: Remove trailing whitespace

.github/tests/test_code_analyzer.py:148:1: W293 Blank line contains whitespace
    |
146 | +    password = "hardcoded123"  # Security issue
147 | +    eval(user_input)  # Another security issue
148 |      
    | ^^^^^ W293
149 |      return result
150 | '''
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:151:1: W293 Blank line contains whitespace
    |
149 |      return result
150 | '''
151 |         
    | ^^^^^^^^ W293
152 |         with patch.object(code_analyzer, '_get_file_content', return_value='mock content'):
153 |             result = await code_analyzer.analyze_diff(
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:158:1: W293 Blank line contains whitespace
    |
156 |                 'python'
157 |             )
158 |         
    | ^^^^^^^^ W293
159 |         assert len(result.issues) > 0
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:160:1: W293 Blank line contains whitespace
    |
159 |         assert len(result.issues) > 0
160 |         
    | ^^^^^^^^ W293
161 |         # Check that issues are only for added lines
162 |         added_line_numbers = {15, 16}  # Based on the diff
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:166:1: W293 Blank line contains whitespace
    |
164 |             if issue.line:
165 |                 assert issue.line in added_line_numbers
166 |     
    | ^^^^ W293
167 |     def test_detect_style_issues_long_line(self, code_analyzer):
168 |         """Test detection of long lines."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:174:1: W293 Blank line contains whitespace
    |
172 |             "another short line"
173 |         ]
174 |         
    | ^^^^^^^^ W293
175 |         issues = code_analyzer._detect_style_issues(code_lines, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:176:1: W293 Blank line contains whitespace
    |
175 |         issues = code_analyzer._detect_style_issues(code_lines, 'python')
176 |         
    | ^^^^^^^^ W293
177 |         long_line_issues = [i for i in issues if 'long' in i.message.lower()]
178 |         assert len(long_line_issues) > 0
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:180:1: W293 Blank line contains whitespace
    |
178 |         assert len(long_line_issues) > 0
179 |         assert long_line_issues[0].line == 2
180 |     
    | ^^^^ W293
181 |     def test_detect_style_issues_trailing_whitespace(self, code_analyzer):
182 |         """Test detection of trailing whitespace."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:188:1: W293 Blank line contains whitespace
    |
186 |             "line with trailing tab\t"
187 |         ]
188 |         
    | ^^^^^^^^ W293
189 |         issues = code_analyzer._detect_style_issues(code_lines, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:190:1: W293 Blank line contains whitespace
    |
189 |         issues = code_analyzer._detect_style_issues(code_lines, 'python')
190 |         
    | ^^^^^^^^ W293
191 |         whitespace_issues = [i for i in issues if 'whitespace' in i.message.lower()]
192 |         assert len(whitespace_issues) >= 2
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:193:1: W293 Blank line contains whitespace
    |
191 |         whitespace_issues = [i for i in issues if 'whitespace' in i.message.lower()]
192 |         assert len(whitespace_issues) >= 2
193 |     
    | ^^^^ W293
194 |     def test_detect_security_issues_eval(self, code_analyzer):
195 |         """Test detection of eval usage."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:200:1: W293 Blank line contains whitespace
    |
198 | safe_result = int(user_input)
199 | '''
200 |         
    | ^^^^^^^^ W293
201 |         issues = code_analyzer._detect_security_issues(code, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:202:1: W293 Blank line contains whitespace
    |
201 |         issues = code_analyzer._detect_security_issues(code, 'python')
202 |         
    | ^^^^^^^^ W293
203 |         eval_issues = [i for i in issues if 'eval' in i.message]
204 |         assert len(eval_issues) > 0
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:206:1: W293 Blank line contains whitespace
    |
204 |         assert len(eval_issues) > 0
205 |         assert eval_issues[0].severity == IssueSeverity.CRITICAL
206 |     
    | ^^^^ W293
207 |     def test_detect_security_issues_sql_injection(self, code_analyzer):
208 |         """Test detection of SQL injection vulnerabilities."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:213:1: W293 Blank line contains whitespace
    |
211 | safe_query = "SELECT * FROM users WHERE id = ?"
212 | '''
213 |         
    | ^^^^^^^^ W293
214 |         issues = code_analyzer._detect_security_issues(code, 'javascript')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:215:1: W293 Blank line contains whitespace
    |
214 |         issues = code_analyzer._detect_security_issues(code, 'javascript')
215 |         
    | ^^^^^^^^ W293
216 |         sql_issues = [i for i in issues if 'SQL' in i.message]
217 |         assert len(sql_issues) > 0
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:219:1: W293 Blank line contains whitespace
    |
217 |         assert len(sql_issues) > 0
218 |         assert sql_issues[0].severity == IssueSeverity.CRITICAL
219 |     
    | ^^^^ W293
220 |     def test_detect_security_issues_hardcoded_secrets(self, code_analyzer):
221 |         """Test detection of hardcoded secrets."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:227:1: W293 Blank line contains whitespace
    |
225 | db_password = os.environ.get('DB_PASSWORD')
226 | '''
227 |         
    | ^^^^^^^^ W293
228 |         issues = code_analyzer._detect_security_issues(code, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:229:1: W293 Blank line contains whitespace
    |
228 |         issues = code_analyzer._detect_security_issues(code, 'python')
229 |         
    | ^^^^^^^^ W293
230 |         secret_issues = [i for i in issues if 'hardcoded' in i.message.lower() or 'password' in i.message.lower()]
231 |         assert len(secret_issues) >= 2
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:232:1: W293 Blank line contains whitespace
    |
230 |         secret_issues = [i for i in issues if 'hardcoded' in i.message.lower() or 'password' in i.message.lower()]
231 |         assert len(secret_issues) >= 2
232 |     
    | ^^^^ W293
233 |     def test_detect_bug_patterns_missing_error_handling(self, code_analyzer):
234 |         """Test detection of missing error handling."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:249:1: W293 Blank line contains whitespace
    |
247 |         return None
248 | '''
249 |         
    | ^^^^^^^^ W293
250 |         issues = code_analyzer._detect_bug_patterns(code, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:251:1: W293 Blank line contains whitespace
    |
250 |         issues = code_analyzer._detect_bug_patterns(code, 'python')
251 |         
    | ^^^^^^^^ W293
252 |         error_handling_issues = [i for i in issues if 'error handling' in i.message.lower() or 'exception' in i.message.lower()]
253 |         assert len(error_handling_issues) > 0
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:254:1: W293 Blank line contains whitespace
    |
252 |         error_handling_issues = [i for i in issues if 'error handling' in i.message.lower() or 'exception' in i.message.lower()]
253 |         assert len(error_handling_issues) > 0
254 |     
    | ^^^^ W293
255 |     def test_detect_performance_issues_inefficient_loops(self, code_analyzer):
256 |         """Test detection of inefficient loops."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:268:1: W293 Blank line contains whitespace
    |
266 | average = total / count
267 | '''
268 |         
    | ^^^^^^^^ W293
269 |         issues = code_analyzer._detect_performance_issues(code, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:270:1: W293 Blank line contains whitespace
    |
269 |         issues = code_analyzer._detect_performance_issues(code, 'python')
270 |         
    | ^^^^^^^^ W293
271 |         assert len(issues) > 0
272 |         performance_keywords = ['inefficient', 'performance', 'optimize']
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:277:1: W293 Blank line contains whitespace
    |
275 |             for issue in issues
276 |         )
277 |     
    | ^^^^ W293
278 |     def test_calculate_complexity_simple_function(self, code_analyzer):
279 |         """Test complexity calculation for simple function."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:284:1: W293 Blank line contains whitespace
    |
282 |     return x * 2
283 | '''
284 |         
    | ^^^^^^^^ W293
285 |         complexity = code_analyzer._calculate_complexity(code, 'python')
286 |         assert complexity == 1  # Simple function has complexity 1
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:287:1: W293 Blank line contains whitespace
    |
285 |         complexity = code_analyzer._calculate_complexity(code, 'python')
286 |         assert complexity == 1  # Simple function has complexity 1
287 |     
    | ^^^^ W293
288 |     def test_calculate_complexity_complex_function(self, code_analyzer):
289 |         """Test complexity calculation for complex function."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:307:1: W293 Blank line contains whitespace
    |
305 |     return result
306 | '''
307 |         
    | ^^^^^^^^ W293
308 |         complexity = code_analyzer._calculate_complexity(code, 'python')
309 |         assert complexity >= 6  # Multiple branches and loops
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:310:1: W293 Blank line contains whitespace
    |
308 |         complexity = code_analyzer._calculate_complexity(code, 'python')
309 |         assert complexity >= 6  # Multiple branches and loops
310 |     
    | ^^^^ W293
311 |     def test_suggest_fix_long_line(self, code_analyzer):
312 |         """Test fix suggestion for long lines."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:318:1: W293 Blank line contains whitespace
    |
316 |             'line': 1
317 |         })()
318 |         
    | ^^^^^^^^ W293
319 |         original_line = 'very_long_function_call(parameter1, parameter2, parameter3, parameter4, parameter5, parameter6)'
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:320:1: W293 Blank line contains whitespace
    |
319 |         original_line = 'very_long_function_call(parameter1, parameter2, parameter3, parameter4, parameter5, parameter6)'
320 |         
    | ^^^^^^^^ W293
321 |         fix = code_analyzer._suggest_fix(issue, original_line, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:322:1: W293 Blank line contains whitespace
    |
321 |         fix = code_analyzer._suggest_fix(issue, original_line, 'python')
322 |         
    | ^^^^^^^^ W293
323 |         assert fix is not None
324 |         assert 'very_long_function_call(\n' in fix
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:326:1: W293 Blank line contains whitespace
    |
324 |         assert 'very_long_function_call(\n' in fix
325 |         assert len(fix.split('\n')) > 1  # Should be multi-line
326 |     
    | ^^^^ W293
327 |     def test_suggest_fix_eval_usage(self, code_analyzer):
328 |         """Test fix suggestion for eval usage."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:334:1: W293 Blank line contains whitespace
    |
332 |             'line': 1
333 |         })()
334 |         
    | ^^^^^^^^ W293
335 |         original_line = 'result = eval(user_input)'
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:336:1: W293 Blank line contains whitespace
    |
335 |         original_line = 'result = eval(user_input)'
336 |         
    | ^^^^^^^^ W293
337 |         fix = code_analyzer._suggest_fix(issue, original_line, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:338:1: W293 Blank line contains whitespace
    |
337 |         fix = code_analyzer._suggest_fix(issue, original_line, 'python')
338 |         
    | ^^^^^^^^ W293
339 |         assert fix is not None
340 |         assert 'eval' not in fix
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:342:1: W293 Blank line contains whitespace
    |
340 |         assert 'eval' not in fix
341 |         assert 'ast.literal_eval' in fix or 'json.loads' in fix
342 |     
    | ^^^^ W293
343 |     @pytest.mark.asyncio
344 |     async def test_get_file_content_from_github(self, code_analyzer):
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:349:24: SyntaxError: Got unexpected string
    |
347 |         mock_response.status = 200
348 |         mock_response.json = AsyncMock(return_value={
349 |             'content': 'ZG
    |                        ^
    |

.github/tests/test_code_analyzer.py:349:27: SyntaxError: unexpected EOF while parsing
    |
347 |         mock_response.status = 200
348 |         mock_response.json = AsyncMock(return_value={
349 |             'content': 'ZG
    |                           ^
    |

.github/tests/test_code_analyzer.py:349:27: W292 No newline at end of file
    |
347 |         mock_response.status = 200
348 |         mock_response.json = AsyncMock(return_value={
349 |             'content': 'ZG
    |                           ^ W292
    |
    = help: Add trailing newline

.github/tests/test_notification_service.py:13:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
12 | # Add parent directory to path for imports
13 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))
   |                    ^^^^^^^^^^^^ PTH118
14 |
15 | from notification_service import (
   |

.github/tests/test_notification_service.py:13:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
12 | # Add parent directory to path for imports
13 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))
   |                                 ^^^^^^^^^^^^^^^ PTH120
14 |
15 | from notification_service import (
   |

.github/tests/test_refactored_services.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | import pytest
12 |
13 | from ..scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
15 | from ..scripts.core.container import ServiceContainer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | import pytest
12 |
13 | from ..scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
15 | from ..scripts.core.container import ServiceContainer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..scripts.core.container import ServiceContainer
16 | from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..scripts.core.container import ServiceContainer
16 | from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
15 | from ..scripts.core.container import ServiceContainer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | from ..scripts.core.interfaces import (
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
15 | from ..scripts.core.container import ServiceContainer
16 | from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..scripts.core.interfaces import (
18 |     CacheInterface,
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
15 | from ..scripts.core.container import ServiceContainer
16 | from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..scripts.core.interfaces import (
18 |     CacheInterface,
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |   from ..scripts.core.container import ServiceContainer
16 |   from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | / from ..scripts.core.interfaces import (
18 | |     CacheInterface,
19 | |     DatabaseInterface,
20 | |     GitHubClientInterface,
21 | |     IssueLevel,
22 | |     MetricsInterface,
23 | |     QueueInterface,
24 | | )
   | |_^ TID252
25 |   from ..scripts.repositories.review_repository import Review, ReviewRepository
26 |   from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |   from ..scripts.core.container import ServiceContainer
16 |   from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | / from ..scripts.core.interfaces import (
18 | |     CacheInterface,
19 | |     DatabaseInterface,
20 | |     GitHubClientInterface,
21 | |     IssueLevel,
22 | |     MetricsInterface,
23 | |     QueueInterface,
24 | | )
   | |_^ TID252
25 |   from ..scripts.repositories.review_repository import Review, ReviewRepository
26 |   from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |   from ..scripts.core.container import ServiceContainer
16 |   from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | / from ..scripts.core.interfaces import (
18 | |     CacheInterface,
19 | |     DatabaseInterface,
20 | |     GitHubClientInterface,
21 | |     IssueLevel,
22 | |     MetricsInterface,
23 | |     QueueInterface,
24 | | )
   | |_^ TID252
25 |   from ..scripts.repositories.review_repository import Review, ReviewRepository
26 |   from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |   from ..scripts.core.container import ServiceContainer
16 |   from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | / from ..scripts.core.interfaces import (
18 | |     CacheInterface,
19 | |     DatabaseInterface,
20 | |     GitHubClientInterface,
21 | |     IssueLevel,
22 | |     MetricsInterface,
23 | |     QueueInterface,
24 | | )
   | |_^ TID252
25 |   from ..scripts.repositories.review_repository import Review, ReviewRepository
26 |   from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |   from ..scripts.core.container import ServiceContainer
16 |   from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | / from ..scripts.core.interfaces import (
18 | |     CacheInterface,
19 | |     DatabaseInterface,
20 | |     GitHubClientInterface,
21 | |     IssueLevel,
22 | |     MetricsInterface,
23 | |     QueueInterface,
24 | | )
   | |_^ TID252
25 |   from ..scripts.repositories.review_repository import Review, ReviewRepository
26 |   from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |   from ..scripts.core.container import ServiceContainer
16 |   from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | / from ..scripts.core.interfaces import (
18 | |     CacheInterface,
19 | |     DatabaseInterface,
20 | |     GitHubClientInterface,
21 | |     IssueLevel,
22 | |     MetricsInterface,
23 | |     QueueInterface,
24 | | )
   | |_^ TID252
25 |   from ..scripts.repositories.review_repository import Review, ReviewRepository
26 |   from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |     QueueInterface,
24 | )
25 | from ..scripts.repositories.review_repository import Review, ReviewRepository
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
26 | from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
27 | from ..scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |     QueueInterface,
24 | )
25 | from ..scripts.repositories.review_repository import Review, ReviewRepository
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
26 | from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
27 | from ..scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:26:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
24 | )
25 | from ..scripts.repositories.review_repository import Review, ReviewRepository
26 | from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
27 | from ..scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:26:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
24 | )
25 | from ..scripts.repositories.review_repository import Review, ReviewRepository
26 | from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
27 | from ..scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:27:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
25 | from ..scripts.repositories.review_repository import Review, ReviewRepository
26 | from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
27 | from ..scripts.services.webhook_service import WebhookService, WebhookValidator
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:27:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
25 | from ..scripts.repositories.review_repository import Review, ReviewRepository
26 | from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
27 | from ..scripts.services.webhook_service import WebhookService, WebhookValidator
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:209:13: S106 Possible hardcoded password assigned to argument: "secret_key"
    |
207 |         """Create JWT configuration."""
208 |         return JWTConfiguration(
209 |             secret_key="test-secret-key-that-is-long-enough-32chars",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S106
210 |             access_token_expire_minutes=30,
211 |             refresh_token_expire_days=30,
    |

.github/tests/test_refactored_services.py:411:1: E402 Module level import not at top of file
    |
410 | # Import json for test data
411 | import json
    | ^^^^^^^^^^^ E402
    |

.github/tests/test_webhook_handler.py:15:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
14 | # Add parent directory to path for imports
15 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))
   |                    ^^^^^^^^^^^^ PTH118
16 |
17 | from webhook_handler import EventType, WebhookEvent, WebhookHandler
   |

.github/tests/test_webhook_handler.py:15:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
14 | # Add parent directory to path for imports
15 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))
   |                                 ^^^^^^^^^^^^^^^ PTH120
16 |
17 | from webhook_handler import EventType, WebhookEvent, WebhookHandler
   |

mcp-comprehensive-test.py:61:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
   |
59 |             execution_time = int((time.time() - start_time) * 1000)
60 |
61 |             if response.status_code == 200:
   |                                        ^^^ PLR2004
62 |                 server_info = response.json()
63 |                 return McpTestResult(
   |

mcp-comprehensive-test.py:86:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
   |
84 |             execution_time = int((time.time() - start_time) * 1000)
85 |
86 |             if response.status_code == 200:
   |                                        ^^^ PLR2004
87 |                 tools_data = response.json()
88 |                 tool_count = len(tools_data.get("tools", []))
   |

mcp-comprehensive-test.py:114:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
112 |             execution_time = int((time.time() - start_time) * 1000)
113 |
114 |             if response.status_code == 200:
    |                                        ^^^ PLR2004
115 |                 response_data = response.json()
116 |                 return McpTestResult(
    |

mcp-comprehensive-test.py:329:29: PLR2004 Magic value used in comparison, consider replacing `80` with a constant variable
    |
327 |             "performance",
328 |             "parallel_load",
329 |             success_rate >= 80,
    |                             ^^ PLR2004
330 |             total_time,
331 |             metadata={
    |

mcp-comprehensive-test.py:546:86: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
545 |         # Performance analysis
546 |         slow_tests = [r for r in analysis["all_results"] if r["execution_time_ms"] > 1000]
    |                                                                                      ^^^^ PLR2004
547 |         if slow_tests:
548 |             report += f"\nSLOW TESTS (>1000ms) ({len(slow_tests)})\n"
    |

mcp-comprehensive-test.py:558:28: PLR2004 Magic value used in comparison, consider replacing `95` with a constant variable
    |
557 |         success_rate = analysis["summary"]["success_rate"]
558 |         if success_rate >= 95:
    |                            ^^ PLR2004
559 |             report += "✅ Excellent success rate! System is performing optimally.\n"
560 |         elif success_rate >= 80:
    |

mcp-comprehensive-test.py:560:30: PLR2004 Magic value used in comparison, consider replacing `80` with a constant variable
    |
558 |         if success_rate >= 95:
559 |             report += "✅ Excellent success rate! System is performing optimally.\n"
560 |         elif success_rate >= 80:
    |                              ^^ PLR2004
561 |             report += "⚠️  Good success rate, but some issues detected. Review failed tests.\n"
562 |         else:
    |

mcp-comprehensive-test.py:586:14: PTH123 `open()` should be replaced by `Path.open()`
    |
584 |         report = self.generate_report(analysis)
585 |
586 |         with open(filename, "w") as f:
    |              ^^^^ PTH123
587 |             f.write(report)
    |

mcp-comprehensive-test.py:591:14: PTH123 `open()` should be replaced by `Path.open()`
    |
589 |         # Save JSON data
590 |         json_filename = filename.replace(".txt", ".json")
591 |         with open(json_filename, "w") as f:
    |              ^^^^ PTH123
592 |             json.dump(analysis, f, indent=2)
    |

mcp-comprehensive-test.py:612:28: PLR2004 Magic value used in comparison, consider replacing `95` with a constant variable
    |
610 |         # Exit with appropriate code
611 |         success_rate = analysis["summary"]["success_rate"]
612 |         if success_rate >= 95:
    |                            ^^ PLR2004
613 |             sys.exit(0)
614 |         elif success_rate >= 80:
    |

mcp-comprehensive-test.py:614:30: PLR2004 Magic value used in comparison, consider replacing `80` with a constant variable
    |
612 |         if success_rate >= 95:
613 |             sys.exit(0)
614 |         elif success_rate >= 80:
    |                              ^^ PLR2004
615 |             sys.exit(1)
616 |         else:
    |

mock-api-responses.py:181:38: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
179 |     debate = debates[debate_id]
180 |
181 |     if len(debate["participants"]) < 2:
    |                                      ^ PLR2004
182 |         return jsonify({"error": "Debate must have at least 2 participants"}), 400
    |

performance-testing/docker/docker_integration.py:60:26: S108 Probable insecure usage of temporary file or directory: "/tmp/performance-test-artifacts"
   |
59 |     # Artifacts
60 |     artifacts_dir: str = "/tmp/performance-test-artifacts"
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S108
61 |
62 |     # Custom settings
   |

performance-testing/docker/docker_integration.py:316:18: PTH123 `open()` should be replaced by `Path.open()`
    |
314 |             test_script_path = Path(temp_dir) / "run_tests.py"
315 |
316 |             with open(test_script_path, "w") as f:
    |                  ^^^^ PTH123
317 |                 f.write(test_script)
    |

performance-testing/docker/docker_integration.py:323:18: PTH123 `open()` should be replaced by `Path.open()`
    |
321 |             requirements_path = Path(temp_dir) / "requirements.txt"
322 |
323 |             with open(requirements_path, "w") as f:
    |                  ^^^^ PTH123
324 |                 f.write(requirements)
    |

performance-testing/docker/docker_integration.py:330:18: PTH123 `open()` should be replaced by `Path.open()`
    |
328 |             dockerfile_path = Path(temp_dir) / "Dockerfile"
329 |
330 |             with open(dockerfile_path, "w") as f:
    |                  ^^^^ PTH123
331 |                 f.write(dockerfile)
    |

performance-testing/docker/docker_integration.py:548:46: S108 Probable insecure usage of temporary file or directory: "/tmp/artifacts.tar.gz"
    |
547 |         # Copy artifacts
548 |         bits, _ = temp_container.get_archive("/tmp/artifacts.tar.gz")
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^ S108
549 |
550 |         with open(Path(temp_dir) / "artifacts.tar.gz", "wb") as f:
    |

performance-testing/docker/docker_integration.py:550:14: PTH123 `open()` should be replaced by `Path.open()`
    |
548 |         bits, _ = temp_container.get_archive("/tmp/artifacts.tar.gz")
549 |
550 |         with open(Path(temp_dir) / "artifacts.tar.gz", "wb") as f:
    |              ^^^^ PTH123
551 |             for chunk in bits:
552 |                 f.write(chunk)
    |

performance-testing/docker/docker_integration.py:555:9: S603 `subprocess` call: check for execution of untrusted input
    |
554 |         # Extract artifacts
555 |         subprocess.run(["tar", "-xzf", str(Path(temp_dir) / "artifacts.tar.gz"), "-C", temp_dir], check=True)
    |         ^^^^^^^^^^^^^^ S603
556 |
557 |         temp_container.remove()
    |

performance-testing/docker/docker_integration.py:555:24: S607 Starting a process with a partial executable path
    |
554 |         # Extract artifacts
555 |         subprocess.run(["tar", "-xzf", str(Path(temp_dir) / "artifacts.tar.gz"), "-C", temp_dir], check=True)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
556 |
557 |         temp_container.remove()
    |

performance-testing/docker/docker_integration.py:574:26: PTH123 `open()` should be replaced by `Path.open()`
    |
572 |                 results_file = Path(temp_dir) / "test_results.json"
573 |                 if results_file.exists():
574 |                     with open(results_file) as f:
    |                          ^^^^ PTH123
575 |                         return json.load(f)
    |

performance-testing/framework/base/performance_test_base.py:141:38: F821 Undefined name `threading`
    |
139 |         if self.config.enable_prometheus_metrics:
140 |             self.monitoring_active = True
141 |             self.monitoring_thread = threading.Thread(target=self._monitor_system)
    |                                      ^^^^^^^^^ F821
142 |             self.monitoring_thread.daemon = True
143 |             self.monitoring_thread.start()
    |

performance-testing/framework/base/performance_test_base.py:314:59: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
313 |             error_types[error_type]["count"] += 1
314 |             if len(error_types[error_type]["examples"]) < 3:
    |                                                           ^ PLR2004
315 |                 error_types[error_type]["examples"].append({"error": error["error"], "context": error["context"]})
    |

performance-testing/framework/base/performance_test_base.py:433:18: PTH123 `open()` should be replaced by `Path.open()`
    |
432 |         if isinstance(data, dict | list):
433 |             with open(filepath, "w") as f:
    |                  ^^^^ PTH123
434 |                 json.dump(data, f, indent=2, default=str)
435 |         else:
    |

performance-testing/framework/base/performance_test_base.py:436:18: PTH123 `open()` should be replaced by `Path.open()`
    |
434 |                 json.dump(data, f, indent=2, default=str)
435 |         else:
436 |             with open(filepath, "w") as f:
    |                  ^^^^ PTH123
437 |                 f.write(str(data))
    |

performance-testing/framework/base/performance_test_base.py:447:18: PTH123 `open()` should be replaced by `Path.open()`
    |
446 |         try:
447 |             with open(filepath) as f:
    |                  ^^^^ PTH123
448 |                 return json.load(f)
449 |         except json.JSONDecodeError:
    |

performance-testing/framework/base/performance_test_base.py:450:18: PTH123 `open()` should be replaced by `Path.open()`
    |
448 |                 return json.load(f)
449 |         except json.JSONDecodeError:
450 |             with open(filepath) as f:
    |                  ^^^^ PTH123
451 |                 return f.read()
    |

performance-testing/framework/base/performance_test_base.py:629:37: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
627 |                 {
628 |                     "id": i,
629 |                     "name": "".join(random.choices(string.ascii_letters, k=10)),
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
630 |                     "value": random.randint(1, 1000),
631 |                     "timestamp": datetime.now(UTC).isoformat(),
    |

performance-testing/framework/base/performance_test_base.py:630:30: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
628 |                     "id": i,
629 |                     "name": "".join(random.choices(string.ascii_letters, k=10)),
630 |                     "value": random.randint(1, 1000),
    |                              ^^^^^^^^^^^^^^^^^^^^^^^ S311
631 |                     "timestamp": datetime.now(UTC).isoformat(),
632 |                     "data": "".join(random.choices(string.ascii_letters + string.digits, k=100)),
    |

performance-testing/framework/base/performance_test_base.py:632:37: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
630 |                     "value": random.randint(1, 1000),
631 |                     "timestamp": datetime.now(UTC).isoformat(),
632 |                     "data": "".join(random.choices(string.ascii_letters + string.digits, k=100)),
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
633 |                 }
634 |             )
    |

performance-testing/framework/reporting/test_reporter.py:74:14: PTH123 `open()` should be replaced by `Path.open()`
   |
72 |         # Save report
73 |         html_path = self.output_dir / f"{report_name}.html"
74 |         with open(html_path, "w") as f:
   |              ^^^^ PTH123
75 |             f.write(html_content)
   |

performance-testing/framework/reporting/test_reporter.py:94:14: PTH123 `open()` should be replaced by `Path.open()`
   |
92 |         # Save JSON
93 |         json_path = self.output_dir / f"{report_name}.json"
94 |         with open(json_path, "w") as f:
   |              ^^^^ PTH123
95 |             json.dump(json_data, f, indent=2, default=str)
   |

performance-testing/framework/reporting/test_reporter.py:145:14: PTH123 `open()` should be replaced by `Path.open()`
    |
144 |         html_path = self.output_dir / f"{report_name}.html"
145 |         with open(html_path, "w") as f:
    |              ^^^^ PTH123
146 |             f.write(html_content)
    |

performance-testing/framework/reporting/test_reporter.py:170:14: PTH123 `open()` should be replaced by `Path.open()`
    |
169 |         html_path = self.output_dir / f"{report_name}.html"
170 |         with open(html_path, "w") as f:
    |              ^^^^ PTH123
171 |             f.write(html_content)
    |

performance-testing/framework/reporting/test_reporter.py:186:24: S113 Probable use of `requests` call without timeout
    |
184 |             headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
185 |
186 |             response = requests.post(
    |                        ^^^^^^^^^^^^^ S113
187 |                 f"{datasource_url}/api/datasources/proxy/1/write", headers=headers, json=grafana_data
188 |             )
    |

performance-testing/jmeter/jmeter_integration.py:382:15: S318 Using `xml` to parse untrusted data is known to be vulnerable to XML attacks; use `defusedxml` equivalents
    |
381 |         # Pretty print
382 |         dom = minidom.parseString(xml_str)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S318
383 |         pretty_xml = dom.toprettyxml(indent="  ")
    |

performance-testing/jmeter/jmeter_integration.py:389:14: PTH123 `open()` should be replaced by `Path.open()`
    |
388 |         # Write to file
389 |         with open(output_path, "w", encoding="utf-8") as f:
    |              ^^^^ PTH123
390 |             f.write(pretty_xml)
    |

performance-testing/jmeter/jmeter_integration.py:434:22: S603 `subprocess` call: check for execution of untrusted input
    |
433 |         try:
434 |             result = subprocess.run(cmd, capture_output=True, text=True, cwd=output_path, check=False)
    |                      ^^^^^^^^^^^^^^ S603
435 |
436 |             execution_time = time.time() - start_time
    |

performance-testing/jmeter/jmeter_integration.py:474:22: S603 `subprocess` call: check for execution of untrusted input
    |
472 |         # Check PATH
473 |         try:
474 |             result = subprocess.run(["which", "jmeter"], capture_output=True, text=True, check=False)
    |                      ^^^^^^^^^^^^^^ S603
475 |             if result.returncode == 0:
476 |                 return result.stdout.strip()
    |

performance-testing/jmeter/jmeter_integration.py:474:37: S607 Starting a process with a partial executable path
    |
472 |         # Check PATH
473 |         try:
474 |             result = subprocess.run(["which", "jmeter"], capture_output=True, text=True, check=False)
    |                                     ^^^^^^^^^^^^^^^^^^^ S607
475 |             if result.returncode == 0:
476 |                 return result.stdout.strip()
    |

performance-testing/jmeter/jmeter_integration.py:477:9: E722 Do not use bare `except`
    |
475 |             if result.returncode == 0:
476 |                 return result.stdout.strip()
477 |         except:
    |         ^^^^^^ E722
478 |             pass
    |

performance-testing/jmeter/jmeter_integration.py:477:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
475 |               if result.returncode == 0:
476 |                   return result.stdout.strip()
477 | /         except:
478 | |             pass
    | |________________^ S110
479 |
480 |           # Check common locations
    |

performance-testing/jmeter/jmeter_integration.py:482:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
480 |         # Check common locations
481 |         for path in possible_paths:
482 |             if os.path.exists(path):
    |                ^^^^^^^^^^^^^^ PTH110
483 |                 return path
    |

performance-testing/jmeter/jmeter_integration.py:616:9: PLR0915 Too many statements (54 > 50)
    |
614 |         return error_rates
615 |
616 |     def generate_charts(self, results_file: str, output_dir: str):
    |         ^^^^^^^^^^^^^^^ PLR0915
617 |         """Generate analysis charts."""
618 |         self.logger.info(f"Generating charts for: {results_file}")
    |

performance-testing/monitoring/resource_monitor.py:221:34: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
219 |         recent_samples = self.get_recent_samples(window_seconds)
220 |
221 |         if len(recent_samples) < 10:
    |                                  ^^ PLR2004
222 |             return {"insufficient_data": True}
    |

performance-testing/monitoring/resource_monitor.py:243:85: PLR2004 Magic value used in comparison, consider replacing `0.7` with a constant variable
    |
241 |         # Memory leak indicators
242 |         leak_detected = (
243 |             slope > self.thresholds.memory_growth_rate_mb_per_min and correlation > 0.7  # Strong positive correlation
    |                                                                                     ^^^ PLR2004
244 |         )
    |

performance-testing/monitoring/resource_monitor.py:261:34: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
259 |         recent_samples = self.get_recent_samples(window_seconds)
260 |
261 |         if len(recent_samples) < 5:
    |                                  ^ PLR2004
262 |             return {"insufficient_data": True}
    |

performance-testing/monitoring/resource_monitor.py:274:72: PLR2004 Magic value used in comparison, consider replacing `0.8` with a constant variable
    |
272 |         # Detect sustained high CPU usage
273 |         high_cpu_samples = [v for v in cpu_values if v > self.thresholds.cpu_warning_percent]
274 |         sustained_high_cpu = len(high_cpu_samples) / len(cpu_values) > 0.8
    |                                                                        ^^^ PLR2004
275 |
276 |         # Detect CPU spikes
    |

performance-testing/monitoring/resource_monitor.py:295:34: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
293 |         recent_samples = self.get_recent_samples(window_seconds)
294 |
295 |         if len(recent_samples) < 2:
    |                                  ^ PLR2004
296 |             return {"insufficient_data": True}
    |

performance-testing/monitoring/resource_monitor.py:374:14: PTH123 `open()` should be replaced by `Path.open()`
    |
372 |             }
373 |
374 |         with open(filepath, "w") as f:
    |              ^^^^ PTH123
375 |             json.dump(data, f, indent=2)
    |

performance-testing/monitoring/resource_monitor.py:401:14: PTH123 `open()` should be replaced by `Path.open()`
    |
400 |         # Save report
401 |         with open(output_path / "monitoring_report.json", "w") as f:
    |              ^^^^ PTH123
402 |             json.dump(report, f, indent=2)
    |

performance-testing/monitoring/resource_monitor.py:577:36: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
575 |         """Generate monitoring charts."""
576 |         with self.samples_lock:
577 |             if len(self.samples) < 2:
    |                                    ^ PLR2004
578 |                 return
    |

performance-testing/run_tests.py:90:18: PTH123 `open()` should be replaced by `Path.open()`
   |
89 |         if self.config_file and Path(self.config_file).exists():
90 |             with open(self.config_file) as f:
   |                  ^^^^ PTH123
91 |                 user_config = json.load(f)
92 |                 default_config.update(user_config)
   |

performance-testing/run_tests.py:513:14: PTH123 `open()` should be replaced by `Path.open()`
    |
512 |         # Save summary
513 |         with open(output_dir / "test_summary.json", "w") as f:
    |              ^^^^ PTH123
514 |             json.dump(summary, f, indent=2)
    |

performance-testing/run_tests.py:576:14: PTH123 `open()` should be replaced by `Path.open()`
    |
574 |         config_path = Path(args.output_dir) / "test_config.json"
575 |         config_path.parent.mkdir(exist_ok=True)
576 |         with open(config_path, "w") as f:
    |              ^^^^ PTH123
577 |             json.dump(config, f, indent=2)
    |

performance-testing/tests/component_benchmarks.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   from sqlalchemy.orm import sessionmaker
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | |     measure_async_time,
27 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/component_benchmarks.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   from sqlalchemy.orm import sessionmaker
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | |     measure_async_time,
27 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/component_benchmarks.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   from sqlalchemy.orm import sessionmaker
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | |     measure_async_time,
27 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/component_benchmarks.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   from sqlalchemy.orm import sessionmaker
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | |     measure_async_time,
27 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/component_benchmarks.py:348:42: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
346 |                     )
347 |                     result.fetchall()
348 |                 elif operation_id % 4 == 2:
    |                                          ^ PLR2004
349 |                     # Update
350 |                     conn.execute(
    |

performance-testing/tests/component_benchmarks.py:413:45: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
411 |             async with self.session.request(method, url, **kwargs) as response:
412 |                 data = await response.json()
413 |                 success = response.status < 400
    |                                             ^^^ PLR2004
414 |                 duration = (time.time() - start_time) * 1000
    |

performance-testing/tests/component_benchmarks.py:490:13: B007 Loop control variable `i` not used within loop body
    |
488 |         # List operations
489 |         time.time()
490 |         for i in range(50):
    |             ^ B007
491 |             result = await self.api_request("GET", "/organizations")
492 |             self.metrics.record_operation("list_organizations", result["duration_ms"], result["success"])
    |
    = help: Rename unused `i` to `_i`

performance-testing/tests/component_benchmarks.py:525:13: B007 Loop control variable `i` not used within loop body
    |
524 |         # List debates
525 |         for i in range(100):
    |             ^ B007
526 |             result = await self.api_request("GET", "/debates")
527 |             self.metrics.record_operation("list_debates", result["duration_ms"], result["success"])
    |
    = help: Rename unused `i` to `_i`

performance-testing/tests/component_benchmarks.py:665:54: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
663 |                     ) as response:
664 |                         data = await response.json()
665 |                         success = response.status == 200
    |                                                      ^^^ PLR2004
666 |                         duration = (time.time() - start_time) * 1000
    |

performance-testing/tests/component_benchmarks.py:704:50: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
702 |                 ) as response:
703 |                     data = await response.json()
704 |                     success = response.status == 200
    |                                                  ^^^ PLR2004
705 |                     duration = (time.time() - start_time) * 1000
    |

performance-testing/tests/component_benchmarks.py:749:50: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
747 |                         total_content_length += len(chunk)
748 |
749 |                     success = response.status == 200
    |                                                  ^^^ PLR2004
750 |                     duration = (time.time() - start_time) * 1000
    |

performance-testing/tests/component_benchmarks.py:780:54: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
778 |                     ) as response:
779 |                         data = await response.json()
780 |                         success = response.status == 200
    |                                                      ^^^ PLR2004
781 |                         duration = (time.time() - start_time) * 1000
    |

performance-testing/tests/component_benchmarks.py:845:92: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
844 |             # Filter high values
845 |             high_value_items = [item for item in processed_data if item["doubled_value"] > 1000]
    |                                                                                            ^^^^ PLR2004
846 |
847 |             duration = (time.time() - start_time) * 1000
    |

performance-testing/tests/database_load_tests.py:39:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
37 | from sqlalchemy.pool import QueuePool
38 |
39 | from ..framework.base import PerformanceTestBase, TestConfiguration, measure_async_time
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/database_load_tests.py:39:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
37 | from sqlalchemy.pool import QueuePool
38 |
39 | from ..framework.base import PerformanceTestBase, TestConfiguration, measure_async_time
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/database_load_tests.py:39:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
37 | from sqlalchemy.pool import QueuePool
38 |
39 | from ..framework.base import PerformanceTestBase, TestConfiguration, measure_async_time
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/database_load_tests.py:354:13: B007 Loop control variable `i` not used within loop body
    |
352 |         # Generate comments
353 |         comments_data = []
354 |         for i in range(min(self.db_config.initial_data_size, 100000)):
    |             ^ B007
355 |             post_id, post_user_id = secrets.choice(post_data)
356 |             comments_data.append(
    |
    = help: Rename unused `i` to `_i`

performance-testing/tests/database_load_tests.py:440:45: F821 Undefined name `random`
    |
438 |                         # Simulate work
439 |                         await conn.fetchval("SELECT 1")
440 |                         await asyncio.sleep(random.uniform(0.01, 0.1))
    |                                             ^^^^^^ F821
441 |                         operations += 1
442 |                 except Exception as e:
    |

performance-testing/tests/database_load_tests.py:672:15: PLR0915 Too many statements (64 > 50)
    |
671 |     @measure_async_time
672 |     async def _test_concurrent_reads_writes(self):
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
673 |         """Test concurrent read and write operations."""
674 |         self.logger.info("Testing concurrent reads and writes")
    |

performance-testing/tests/database_load_tests.py:813:9: ERA001 Found commented-out code
    |
811 |         workers = []
812 |
813 |         # 70% readers, 30% writers
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
814 |         reader_count = int(self.db_config.concurrent_users * 0.7)
815 |         writer_count = self.db_config.concurrent_users - reader_count
    |
    = help: Remove commented-out code

performance-testing/tests/database_load_tests.py:862:60: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
860 |                     async with self.connection_pool.acquire() as conn, conn.transaction():
861 |                         # Get two random posts
862 |                         if len(self.test_data["posts"]) >= 2:
    |                                                            ^ PLR2004
863 |                             post1_id, post2_id = random.sample([p[0] for p in self.test_data["posts"]], 2)
    |

performance-testing/tests/database_load_tests.py:863:50: F821 Undefined name `random`
    |
861 |                         # Get two random posts
862 |                         if len(self.test_data["posts"]) >= 2:
863 |                             post1_id, post2_id = random.sample([p[0] for p in self.test_data["posts"]], 2)
    |                                                  ^^^^^^ F821
864 |
865 |                             # Lock posts in different order to create deadlock potential
    |

performance-testing/tests/database_load_tests.py:1049:38: S608 Possible SQL injection vector through string-based query construction
     |
1048 |                 for table in tables:
1049 |                     await conn.fetch(f"SELECT * FROM {table}")
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ S608
1050 |                     await asyncio.sleep(0.1)  # Simulate backup processing
     |

performance-testing/tests/github_api_simulation.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from typing import Any
15 |
16 | from ..framework.base import PerformanceTestBase, TestConfiguration, measure_async_time
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/github_api_simulation.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from typing import Any
15 |
16 | from ..framework.base import PerformanceTestBase, TestConfiguration, measure_async_time
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/github_api_simulation.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from typing import Any
15 |
16 | from ..framework.base import PerformanceTestBase, TestConfiguration, measure_async_time
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/github_api_simulation.py:296:30: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
295 |         # Add random variation
296 |         delay = base_delay * random.uniform(0.5, 1.5)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ S311
297 |
298 |         await asyncio.sleep(delay)
    |

performance-testing/tests/github_api_simulation.py:300:9: PLR0911 Too many return statements (7 > 6)
    |
298 |         await asyncio.sleep(delay)
299 |
300 |     def _generate_response(self, endpoint: str, method: str, payload: dict[str, Any] | None = None) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^ PLR0911
301 |         """Generate response data for endpoint."""
302 |         # Determine response type based on endpoint
    |

performance-testing/tests/github_api_simulation.py:300:49: ARG002 Unused method argument: `method`
    |
298 |         await asyncio.sleep(delay)
299 |
300 |     def _generate_response(self, endpoint: str, method: str, payload: dict[str, Any] | None = None) -> dict[str, Any]:
    |                                                 ^^^^^^ ARG002
301 |         """Generate response data for endpoint."""
302 |         # Determine response type based on endpoint
    |

performance-testing/tests/github_api_simulation.py:315:32: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
313 |         elif "/search" in endpoint:
314 |             return {
315 |                 "total_count": random.randint(1, 1000),
    |                                ^^^^^^^^^^^^^^^^^^^^^^^ S311
316 |                 "incomplete_results": False,
317 |                 "items": [self.response_templates["repository"].copy() for _ in range(10)],
    |

performance-testing/tests/github_api_simulation.py:449:49: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
448 |             # Select random endpoint
449 |             endpoint, method, rate_limit_type = random.choice(endpoints)
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ S311
450 |
451 |             # Make API call
    |

performance-testing/tests/github_api_simulation.py:563:41: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
562 |             # Safety check to prevent infinite loop
563 |             if len(recovery_attempts) > 100:
    |                                         ^^^ PLR2004
564 |                 self.logger.error("Rate limit recovery test timed out")
565 |                 break
    |

performance-testing/tests/load_tests.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   import aiohttp
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/load_tests.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   import aiohttp
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/load_tests.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   import aiohttp
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/load_tests.py:284:26: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
282 |     async def think_time(self):
283 |         """Simulate user think time."""
284 |         think_duration = random.uniform(self.scenario.think_time_min, self.scenario.think_time_max)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
285 |         await asyncio.sleep(think_duration)
    |

performance-testing/tests/load_tests.py:319:24: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
318 |             # Select endpoint
319 |             endpoint = random.choice(self.endpoints)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
320 |
321 |             # Get test data
    |

performance-testing/tests/load_tests.py:338:42: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
336 |                     response_times.append(response_time)
337 |
338 |                     if response.status < 400:
    |                                          ^^^ PLR2004
339 |                         operations += 1
340 |                     else:
    |

performance-testing/tests/load_tests.py:347:43: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
345 |                         f"http_request_{endpoint['method'].lower()}",
346 |                         response_time,
347 |                         response.status < 400,
    |                                           ^^^ PLR2004
348 |                         {"user_id": user_id, "endpoint": endpoint["path"], "status_code": response.status},
349 |                     )
    |

performance-testing/tests/load_tests.py:406:29: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
405 |                 # Select operation
406 |                 operation = random.choice(self.operations)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
407 |
408 |                 # Get test data
    |

performance-testing/tests/load_tests.py:452:48: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
450 |         """Prepare parameters for insert operation."""
451 |         return [
452 |             test_data.get("name", f"user_data_{random.randint(1000, 9999)}"),
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
453 |             test_data.get("value", random.randint(1, 1000)),
454 |             test_data.get("data", f"test_data_{random.randint(1000, 9999)}"),
    |

performance-testing/tests/load_tests.py:453:36: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
451 |         return [
452 |             test_data.get("name", f"user_data_{random.randint(1000, 9999)}"),
453 |             test_data.get("value", random.randint(1, 1000)),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^ S311
454 |             test_data.get("data", f"test_data_{random.randint(1000, 9999)}"),
455 |         ]
    |

performance-testing/tests/load_tests.py:454:48: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
452 |             test_data.get("name", f"user_data_{random.randint(1000, 9999)}"),
453 |             test_data.get("value", random.randint(1, 1000)),
454 |             test_data.get("data", f"test_data_{random.randint(1000, 9999)}"),
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
455 |         ]
    |

performance-testing/tests/load_tests.py:459:40: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
457 |     def _prepare_update_params(self, test_data: dict[str, Any]) -> list[Any]:
458 |         """Prepare parameters for update operation."""
459 |         return [test_data.get("value", random.randint(1, 1000)), test_data.get("id", random.randint(1, 1000))]
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^ S311
    |

performance-testing/tests/load_tests.py:459:86: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
457 |     def _prepare_update_params(self, test_data: dict[str, Any]) -> list[Any]:
458 |         """Prepare parameters for update operation."""
459 |         return [test_data.get("value", random.randint(1, 1000)), test_data.get("id", random.randint(1, 1000))]
    |                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^ S311
    |

performance-testing/tests/load_tests.py:694:37: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
693 |                 # Variable think time to simulate realistic usage
694 |                 await asyncio.sleep(random.uniform(0.1, 2.0))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^ S311
695 |
696 |             except asyncio.CancelledError:
    |

performance-testing/tests/load_tests.py:720:47: PLR2004 Magic value used in comparison, consider replacing `60` with a constant variable
    |
719 |                 # Check for memory leaks (growing memory usage)
720 |                 if len(self.memory_samples) > 60:  # Check every minute
    |                                               ^^ PLR2004
721 |                     recent_memory = [s["memory_mb"] for s in self.memory_samples[-60:]]
722 |                     if self._detect_memory_leak(recent_memory):
    |

performance-testing/tests/load_tests.py:734:34: PLR2004 Magic value used in comparison, consider replacing `30` with a constant variable
    |
732 |     def _detect_memory_leak(self, memory_samples: list[float]) -> bool:
733 |         """Detect potential memory leak from samples."""
734 |         if len(memory_samples) < 30:
    |                                  ^^ PLR2004
735 |             return False
    |

scripts/generate-comprehensive-linting-report.py:46:20: PTH116 `os.stat()` should be replaced by `Path.stat()`, `Path.owner()`, or `Path.group()`
   |
44 |         """Get detailed file metadata."""
45 |         try:
46 |             stat = os.stat(file_path)
   |                    ^^^^^^^ PTH116
47 |             with open(file_path, encoding="utf-8", errors="ignore") as f:
48 |                 content = f.read()
   |

scripts/generate-comprehensive-linting-report.py:47:18: PTH123 `open()` should be replaced by `Path.open()`
   |
45 |         try:
46 |             stat = os.stat(file_path)
47 |             with open(file_path, encoding="utf-8", errors="ignore") as f:
   |                  ^^^^ PTH123
48 |                 content = f.read()
49 |                 lines = content.split("\n")
   |

scripts/generate-comprehensive-linting-report.py:57:43: E741 Ambiguous variable name: `l`
   |
55 |                 "last_modified": datetime.fromtimestamp(stat.st_mtime).isoformat(),
56 |                 "encoding": "utf-8",
57 |                 "empty_lines": len([l for l in lines if not l.strip()]),
   |                                           ^ E741
58 |                 "comment_lines": self._count_comment_lines(content, file_path)
59 |             }
   |

scripts/generate-comprehensive-linting-report.py:85:9: PLR0912 Too many branches (21 > 12)
   |
83 |         return count
84 |
85 |     def extract_python_context_detailed(self, file_path: str, line_number: int) -> dict[str, Any]:
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
86 |         """Extract comprehensive context for Python issues."""
87 |         try:
   |

scripts/generate-comprehensive-linting-report.py:88:18: PTH123 `open()` should be replaced by `Path.open()`
   |
86 |         """Extract comprehensive context for Python issues."""
87 |         try:
88 |             with open(file_path, encoding="utf-8") as f:
   |                  ^^^^ PTH123
89 |                 content = f.read()
   |

scripts/generate-comprehensive-linting-report.py:209:57: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
207 |             patterns[pattern_key]["count"] += 1
208 |             patterns[pattern_key]["files"].add(issue["file"])
209 |             if len(patterns[pattern_key]["examples"]) < 3:
    |                                                         ^ PLR2004
210 |                 patterns[pattern_key]["examples"].append({
211 |                     "file": issue["file"],
    |

scripts/generate-comprehensive-linting-report.py:226:18: S603 `subprocess` call: check for execution of untrusted input
    |
225 |         # Run ruff with JSON output
226 |         result = subprocess.run(
    |                  ^^^^^^^^^^^^^^ S603
227 |             ["ruff", "check", ".", "--output-format=json"],
228 |             capture_output=True,
    |

scripts/generate-comprehensive-linting-report.py:227:13: S607 Starting a process with a partial executable path
    |
225 |         # Run ruff with JSON output
226 |         result = subprocess.run(
227 |             ["ruff", "check", ".", "--output-format=json"],
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
228 |             capture_output=True,
229 |             text=True, check=False
    |

scripts/generate-comprehensive-linting-report.py:236:31: S603 `subprocess` call: check for execution of untrusted input
    |
235 |             # Also get security-specific issues
236 |             security_result = subprocess.run(
    |                               ^^^^^^^^^^^^^^ S603
237 |                 ["ruff", "check", ".", "--select=S", "--output-format=json"],
238 |                 capture_output=True,
    |

scripts/generate-comprehensive-linting-report.py:237:17: S607 Starting a process with a partial executable path
    |
235 |             # Also get security-specific issues
236 |             security_result = subprocess.run(
237 |                 ["ruff", "check", ".", "--select=S", "--output-format=json"],
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
238 |                 capture_output=True,
239 |                 text=True, check=False
    |

scripts/generate-comprehensive-linting-report.py:450:43: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
448 |             return "high"
449 |
450 |         if context.get("complexity", 0) > 10:
    |                                           ^^ PLR2004
451 |             return "high"
    |

scripts/generate-comprehensive-linting-report.py:498:22: S603 `subprocess` call: check for execution of untrusted input
    |
497 |             # Run shellcheck with different formats for more info
498 |             result = subprocess.run(
    |                      ^^^^^^^^^^^^^^ S603
499 |                 ["shellcheck", "--format=json", "--severity=style", "--external-sources", str(file_path)],
500 |                 capture_output=True,
    |

scripts/generate-comprehensive-linting-report.py:499:17: S607 Starting a process with a partial executable path
    |
497 |             # Run shellcheck with different formats for more info
498 |             result = subprocess.run(
499 |                 ["shellcheck", "--format=json", "--severity=style", "--external-sources", str(file_path)],
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
500 |                 capture_output=True,
501 |                 text=True, check=False
    |

scripts/generate-comprehensive-linting-report.py:509:26: PTH123 `open()` should be replaced by `Path.open()`
    |
507 |                     file_meta = self.get_file_metadata(str(file_path))
508 |
509 |                     with open(file_path, encoding="utf-8", errors="ignore") as f:
    |                          ^^^^ PTH123
510 |                         lines = f.readlines()
    |

scripts/generate-comprehensive-linting-report.py:529:63: E741 Ambiguous variable name: `l`
    |
527 | …                     "message": issue["message"],
528 | …                     "line_content": lines[line_num - 1].strip() if line_num <= len(lines) else "",
529 | …                     "context_before": [l.rstrip() for l in lines[start_context:line_num-1]],
    |                                                         ^ E741
530 | …                     "context_after": [l.rstrip() for l in lines[line_num:end_context]],
    |

scripts/generate-comprehensive-linting-report.py:530:62: E741 Ambiguous variable name: `l`
    |
528 |                             "line_content": lines[line_num - 1].strip() if line_num <= len(lines) else "",
529 |                             "context_before": [l.rstrip() for l in lines[start_context:line_num-1]],
530 |                             "context_after": [l.rstrip() for l in lines[line_num:end_context]],
    |                                                              ^ E741
531 |
532 |                             # Additional context
    |

scripts/generate-comprehensive-linting-report.py:611:12: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
609 |         code_num = int(code)
610 |
611 |         if 1000 <= code_num < 2000:
    |            ^^^^ PLR2004
612 |             return "syntax"
613 |         elif 2000 <= code_num < 2100:
    |

scripts/generate-comprehensive-linting-report.py:611:31: PLR2004 Magic value used in comparison, consider replacing `2000` with a constant variable
    |
609 |         code_num = int(code)
610 |
611 |         if 1000 <= code_num < 2000:
    |                               ^^^^ PLR2004
612 |             return "syntax"
613 |         elif 2000 <= code_num < 2100:
    |

scripts/generate-comprehensive-linting-report.py:613:14: PLR2004 Magic value used in comparison, consider replacing `2000` with a constant variable
    |
611 |         if 1000 <= code_num < 2000:
612 |             return "syntax"
613 |         elif 2000 <= code_num < 2100:
    |              ^^^^ PLR2004
614 |             return "security"
615 |         elif 2100 <= code_num < 2200:
    |

scripts/generate-comprehensive-linting-report.py:613:33: PLR2004 Magic value used in comparison, consider replacing `2100` with a constant variable
    |
611 |         if 1000 <= code_num < 2000:
612 |             return "syntax"
613 |         elif 2000 <= code_num < 2100:
    |                                 ^^^^ PLR2004
614 |             return "security"
615 |         elif 2100 <= code_num < 2200:
    |

scripts/generate-comprehensive-linting-report.py:615:14: PLR2004 Magic value used in comparison, consider replacing `2100` with a constant variable
    |
613 |         elif 2000 <= code_num < 2100:
614 |             return "security"
615 |         elif 2100 <= code_num < 2200:
    |              ^^^^ PLR2004
616 |             return "warning"
617 |         elif 2200 <= code_num < 2300:
    |

scripts/generate-comprehensive-linting-report.py:615:33: PLR2004 Magic value used in comparison, consider replacing `2200` with a constant variable
    |
613 |         elif 2000 <= code_num < 2100:
614 |             return "security"
615 |         elif 2100 <= code_num < 2200:
    |                                 ^^^^ PLR2004
616 |             return "warning"
617 |         elif 2200 <= code_num < 2300:
    |

scripts/generate-comprehensive-linting-report.py:617:14: PLR2004 Magic value used in comparison, consider replacing `2200` with a constant variable
    |
615 |         elif 2100 <= code_num < 2200:
616 |             return "warning"
617 |         elif 2200 <= code_num < 2300:
    |              ^^^^ PLR2004
618 |             return "info"
619 |         else:
    |

scripts/generate-comprehensive-linting-report.py:617:33: PLR2004 Magic value used in comparison, consider replacing `2300` with a constant variable
    |
615 |         elif 2100 <= code_num < 2200:
616 |             return "warning"
617 |         elif 2200 <= code_num < 2300:
    |                                 ^^^^ PLR2004
618 |             return "info"
619 |         else:
    |

scripts/generate-comprehensive-linting-report.py:626:50: PLR2004 Magic value used in comparison, consider replacing `2000` with a constant variable
    |
624 |         if level == "error":
625 |             return "critical"
626 |         elif level == "warning" and int(code) >= 2000 and int(code) < 2100:
    |                                                  ^^^^ PLR2004
627 |             return "high"  # Security warnings
628 |         elif level == "warning":
    |

scripts/generate-comprehensive-linting-report.py:626:71: PLR2004 Magic value used in comparison, consider replacing `2100` with a constant variable
    |
624 |         if level == "error":
625 |             return "critical"
626 |         elif level == "warning" and int(code) >= 2000 and int(code) < 2100:
    |                                                                       ^^^^ PLR2004
627 |             return "high"  # Security warnings
628 |         elif level == "warning":
    |

scripts/generate-comprehensive-linting-report.py:639:14: PLR2004 Magic value used in comparison, consider replacing `2000` with a constant variable
    |
637 |         if issue["level"] == "error":
638 |             return 10
639 |         elif 2000 <= code_num < 2100:  # Security
    |              ^^^^ PLR2004
640 |             return 9
641 |         elif issue["level"] == "warning":
    |

scripts/generate-comprehensive-linting-report.py:639:33: PLR2004 Magic value used in comparison, consider replacing `2100` with a constant variable
    |
637 |         if issue["level"] == "error":
638 |             return 10
639 |         elif 2000 <= code_num < 2100:  # Security
    |                                 ^^^^ PLR2004
640 |             return 9
641 |         elif issue["level"] == "warning":
    |

scripts/generate-comprehensive-linting-report.py:659:18: S603 `subprocess` call: check for execution of untrusted input
    |
658 |         # Run ESLint
659 |         result = subprocess.run(
    |                  ^^^^^^^^^^^^^^ S603
660 |             ["npx", "eslint", "src", "--ext", ".ts,.tsx,.js,.jsx", "--format=json"],
661 |             cwd=debate_ui_path,
    |

scripts/generate-comprehensive-linting-report.py:660:13: S607 Starting a process with a partial executable path
    |
658 |         # Run ESLint
659 |         result = subprocess.run(
660 |             ["npx", "eslint", "src", "--ext", ".ts,.tsx,.js,.jsx", "--format=json"],
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
661 |             cwd=debate_ui_path,
662 |             capture_output=True,
    |

scripts/generate-comprehensive-linting-report.py:677:26: PTH123 `open()` should be replaced by `Path.open()`
    |
675 |                     file_meta = self.get_file_metadata(file_path)
676 |
677 |                     with open(file_path, encoding="utf-8") as f:
    |                          ^^^^ PTH123
678 |                         lines = f.readlines()
    |

scripts/generate-comprehensive-linting-report.py:692:75: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
690 | …                     "column": message["column"],
691 | …                     "endColumn": message.get("endColumn", message["column"]),
692 | …                     "severity": "error" if message["severity"] == 2 else "warning",
    |                                                                     ^ PLR2004
693 | …                     "message": message["message"],
694 | …                     "ruleId": message["ruleId"],
    |

scripts/generate-comprehensive-linting-report.py:758:53: E741 Ambiguous variable name: `l`
    |
756 |         start_context = max(0, line_num - 4)
757 |         end_context = min(len(lines), line_num + 3)
758 |         context["context_before"] = [l.rstrip() for l in lines[start_context:line_num-1]]
    |                                                     ^ E741
759 |         context["context_after"] = [l.rstrip() for l in lines[line_num:end_context]]
    |

scripts/generate-comprehensive-linting-report.py:759:52: E741 Ambiguous variable name: `l`
    |
757 |         end_context = min(len(lines), line_num + 3)
758 |         context["context_before"] = [l.rstrip() for l in lines[start_context:line_num-1]]
759 |         context["context_after"] = [l.rstrip() for l in lines[line_num:end_context]]
    |                                                    ^ E741
760 |
761 |         # Extract imports and exports
    |

scripts/generate-comprehensive-linting-report.py:762:13: B007 Loop control variable `i` not used within loop body
    |
761 |         # Extract imports and exports
762 |         for i, line in enumerate(lines):
    |             ^ B007
763 |             if line.strip().startswith("import"):
764 |                 context["imports"].append(line.strip())
    |
    = help: Rename unused `i` to `_i`

scripts/generate-comprehensive-linting-report.py:827:35: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
825 |     def _calculate_eslint_fix_priority(self, message: dict) -> int:
826 |         """Calculate ESLint fix priority."""
827 |         if message["severity"] == 2:  # Error
    |                                   ^ PLR2004
828 |             return 8
    |

scripts/generate-comprehensive-linting-report.py:848:29: S603 `subprocess` call: check for execution of untrusted input
    |
847 |         # Run Maven checkstyle
848 |         checkstyle_result = subprocess.run(
    |                             ^^^^^^^^^^^^^^ S603
849 |             ["mvn", "checkstyle:check", "-Dcheckstyle.consoleOutput=true",
850 |              "-Dcheckstyle.failOnViolation=false"],
    |

scripts/generate-comprehensive-linting-report.py:849:13: S607 Starting a process with a partial executable path
    |
847 |           # Run Maven checkstyle
848 |           checkstyle_result = subprocess.run(
849 | /             ["mvn", "checkstyle:check", "-Dcheckstyle.consoleOutput=true",
850 | |              "-Dcheckstyle.failOnViolation=false"],
    | |__________________________________________________^ S607
851 |               capture_output=True,
852 |               text=True, check=False
    |

scripts/generate-comprehensive-linting-report.py:875:22: PTH123 `open()` should be replaced by `Path.open()`
    |
873 |             # Get file context
874 |             try:
875 |                 with open(file_path, encoding="utf-8") as f:
    |                      ^^^^ PTH123
876 |                     lines = f.readlines()
    |

scripts/generate-comprehensive-linting-report.py:907:13: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
905 |                   self.issues_by_file[file_path].append(detailed_issue)
906 |
907 | /             except Exception:
908 | |                 pass
    | |____________________^ S110
909 |
910 |       def _extract_java_context(self, lines: list[str], line_num: int) -> dict[str, Any]:
    |

scripts/generate-comprehensive-linting-report.py:922:53: E741 Ambiguous variable name: `l`
    |
920 |         start_context = max(0, line_num - 4)
921 |         end_context = min(len(lines), line_num + 3)
922 |         context["context_before"] = [l.rstrip() for l in lines[start_context:line_num-1]]
    |                                                     ^ E741
923 |         context["context_after"] = [l.rstrip() for l in lines[line_num:end_context]]
    |

scripts/generate-comprehensive-linting-report.py:923:52: E741 Ambiguous variable name: `l`
    |
921 |         end_context = min(len(lines), line_num + 3)
922 |         context["context_before"] = [l.rstrip() for l in lines[start_context:line_num-1]]
923 |         context["context_after"] = [l.rstrip() for l in lines[line_num:end_context]]
    |                                                    ^ E741
924 |
925 |         # Look for class and method
    |

scripts/generate-comprehensive-linting-report.py:996:9: PLR0915 Too many statements (53 > 50)
    |
994 |             })
995 |
996 |     def generate_comprehensive_report(self, output_file: str = "COMPREHENSIVE_LINTING_REPORT.md"):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
997 |         """Generate the comprehensive markdown report."""
998 |         with open(output_file, "w", encoding="utf-8") as f:
    |

scripts/generate-comprehensive-linting-report.py:998:14: PTH123 `open()` should be replaced by `Path.open()`
     |
 996 |     def generate_comprehensive_report(self, output_file: str = "COMPREHENSIVE_LINTING_REPORT.md"):
 997 |         """Generate the comprehensive markdown report."""
 998 |         with open(output_file, "w", encoding="utf-8") as f:
     |              ^^^^ PTH123
 999 |             # Header
1000 |             f.write("# Comprehensive Linting Report\n\n")
     |

scripts/generate-comprehensive-linting-report.py:1107:42: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
     |
1105 |                 if issue["decorators"]:
1106 |                     f.write(f"- **Decorators**: {', '.join(issue['decorators'])}\n")
1107 |                 if issue["complexity"] > 5:
     |                                          ^ PLR2004
1108 |                     f.write(f"- **Complexity**: {issue['complexity']} (high)\n")
     |

scripts/generate-comprehensive-linting-report.py:1127:30: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
     |
1125 |                 f.write("\n---\n\n")
1126 |
1127 |             if len(issues) > 5:
     |                              ^ PLR2004
1128 |                 f.write(f"\n*... and {len(issues) - 5} more {category} issues*\n\n")
     |

scripts/generate-comprehensive-linting-report.py:1173:30: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
     |
1171 |                 f.write("\n---\n\n")
1172 |
1173 |             if len(issues) > 5:
     |                              ^ PLR2004
1174 |                 f.write(f"\n*... and {len(issues) - 5} more {severity} issues*\n\n")
     |

scripts/generate-comprehensive-linting-report.py:1259:14: PTH123 `open()` should be replaced by `Path.open()`
     |
1257 |         }
1258 |
1259 |         with open(output_file, "w", encoding="utf-8") as f:
     |              ^^^^ PTH123
1260 |             json.dump(report, f, indent=2, default=str)
     |

scripts/generate-detailed-linting-report.py:23:18: PTH123 `open()` should be replaced by `Path.open()`
   |
21 |         """Extract class and method context for a Python file at a specific line."""
22 |         try:
23 |             with open(file_path) as f:
   |                  ^^^^ PTH123
24 |                 content = f.read()
   |

scripts/generate-detailed-linting-report.py:66:18: S603 `subprocess` call: check for execution of untrusted input
   |
65 |         # Run ruff and get JSON output
66 |         result = subprocess.run(
   |                  ^^^^^^^^^^^^^^ S603
67 |             ["ruff", "check", ".", "--output-format=json"],
68 |             capture_output=True,
   |

scripts/generate-detailed-linting-report.py:67:13: S607 Starting a process with a partial executable path
   |
65 |         # Run ruff and get JSON output
66 |         result = subprocess.run(
67 |             ["ruff", "check", ".", "--output-format=json"],
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
68 |             capture_output=True,
69 |             text=True, check=False
   |

scripts/generate-detailed-linting-report.py:109:22: S603 `subprocess` call: check for execution of untrusted input
    |
107 |                 continue
108 |
109 |             result = subprocess.run(
    |                      ^^^^^^^^^^^^^^ S603
110 |                 ["shellcheck", "--format=json", str(file_path)],
111 |                 capture_output=True,
    |

scripts/generate-detailed-linting-report.py:110:17: S607 Starting a process with a partial executable path
    |
109 |             result = subprocess.run(
110 |                 ["shellcheck", "--format=json", str(file_path)],
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
111 |                 capture_output=True,
112 |                 text=True, check=False
    |

scripts/generate-detailed-linting-report.py:120:30: PTH123 `open()` should be replaced by `Path.open()`
    |
119 |                     for issue in issues:
120 |                         with open(file_path) as f:
    |                              ^^^^ PTH123
121 |                             lines = f.readlines()
122 |                             line_content = lines[issue["line"] - 1].strip() if issue["line"] <= len(lines) else ""
    |

scripts/generate-detailed-linting-report.py:151:22: S603 `subprocess` call: check for execution of untrusted input
    |
149 |         debate_ui_path = Path("debate-ui")
150 |         if debate_ui_path.exists():
151 |             result = subprocess.run(
    |                      ^^^^^^^^^^^^^^ S603
152 |                 ["npx", "eslint", "src", "--ext", ".ts,.tsx,.js,.jsx", "--format=json"],
153 |                 cwd=debate_ui_path,
    |

scripts/generate-detailed-linting-report.py:152:17: S607 Starting a process with a partial executable path
    |
150 |         if debate_ui_path.exists():
151 |             result = subprocess.run(
152 |                 ["npx", "eslint", "src", "--ext", ".ts,.tsx,.js,.jsx", "--format=json"],
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
153 |                 cwd=debate_ui_path,
154 |                 capture_output=True,
    |

scripts/generate-detailed-linting-report.py:166:34: PTH123 `open()` should be replaced by `Path.open()`
    |
165 |                         for message in file_result["messages"]:
166 |                             with open(file_path) as f:
    |                                  ^^^^ PTH123
167 |                                 lines = f.readlines()
168 |                                 line_content = lines[message["line"] - 1].strip() if message["line"] <= len(lines) else ""
    |

scripts/generate-detailed-linting-report.py:197:9: PLR0912 Too many branches (20 > 12)
    |
195 |         return self.typescript_issues
196 |
197 |     def generate_markdown_report(self, output_file: str = "DETAILED_LINTING_REPORT.md"):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
198 |         """Generate a detailed markdown report."""
199 |         with open(output_file, "w") as f:
    |

scripts/generate-detailed-linting-report.py:197:9: PLR0915 Too many statements (68 > 50)
    |
195 |         return self.typescript_issues
196 |
197 |     def generate_markdown_report(self, output_file: str = "DETAILED_LINTING_REPORT.md"):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
198 |         """Generate a detailed markdown report."""
199 |         with open(output_file, "w") as f:
    |

scripts/generate-detailed-linting-report.py:199:14: PTH123 `open()` should be replaced by `Path.open()`
    |
197 |     def generate_markdown_report(self, output_file: str = "DETAILED_LINTING_REPORT.md"):
198 |         """Generate a detailed markdown report."""
199 |         with open(output_file, "w") as f:
    |              ^^^^ PTH123
200 |             f.write("# Detailed Linting Report\n\n")
201 |             f.write(f"**Generated**: {Path.cwd()}\n")
    |

scripts/generate-detailed-linting-report.py:232:34: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
230 |                     f.write("\n")
231 |
232 |                 if len(issues) > 5:
    |                                  ^ PLR2004
233 |                     f.write(f"*... and {len(issues) - 5} more {code} issues*\n\n")
    |

scripts/generate-detailed-linting-report.py:260:34: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
258 |                     f.write("\n")
259 |
260 |                 if len(issues) > 5:
    |                                  ^ PLR2004
261 |                     f.write(f"*... and {len(issues) - 5} more {level} issues*\n\n")
    |

scripts/generate-detailed-linting-report.py:271:76: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
269 |                 f.write(f"- **Line**: {issue['line']}, Column: {issue['column']}\n")
270 |                 f.write(f"- **Rule**: {issue['ruleId']}\n")
271 |                 f.write(f"- **Severity**: {'Error' if issue['severity'] == 2 else 'Warning'}\n")
    |                                                                            ^ PLR2004
272 |                 f.write(f"- **Message**: {issue['message']}\n")
273 |                 f.write(f"- **Code**: `{issue['line_content']}`\n")
    |

scripts/generate-detailed-linting-report.py:316:14: PTH123 `open()` should be replaced by `Path.open()`
    |
314 |         }
315 |
316 |         with open(output_file, "w") as f:
    |              ^^^^ PTH123
317 |             json.dump(report, f, indent=2)
    |

scripts/generate-simple-linting-report.py:14:18: S602 `subprocess` call with `shell=True` identified, security issue
   |
12 |     """Run shell command and return output."""
13 |     if capture:
14 |         result = subprocess.run(cmd, shell=True, capture_output=True, text=True, cwd=cwd, check=False)
   |                  ^^^^^^^^^^^^^^ S602
15 |         return result.stdout, result.stderr, result.returncode
16 |     else:
   |

scripts/generate-simple-linting-report.py:17:16: S602 `subprocess` call with `shell=True` identified, security issue
   |
15 |         return result.stdout, result.stderr, result.returncode
16 |     else:
17 |         return subprocess.run(cmd, shell=True, cwd=cwd, check=False).returncode
   |                ^^^^^^^^^^^^^^ S602
18 |
19 | def get_python_issues():
   |

scripts/generate-simple-linting-report.py:33:26: PTH123 `open()` should be replaced by `Path.open()`
   |
31 |             for issue in raw_issues:
32 |                 try:
33 |                     with open(issue["filename"]) as f:
   |                          ^^^^ PTH123
34 |                         lines = f.readlines()
   |

scripts/generate-simple-linting-report.py:38:62: E741 Ambiguous variable name: `l`
   |
36 |                     line_num = issue["location"]["row"]
37 |                     issue["line_content"] = lines[line_num - 1].strip() if line_num <= len(lines) else ""
38 |                     issue["context_before"] = [l.strip() for l in lines[max(0, line_num-3):line_num-1]]
   |                                                              ^ E741
39 |                     issue["context_after"] = [l.strip() for l in lines[line_num:min(len(lines), line_num+2)]]
40 |                 except:
   |

scripts/generate-simple-linting-report.py:39:61: E741 Ambiguous variable name: `l`
   |
37 |                     issue["line_content"] = lines[line_num - 1].strip() if line_num <= len(lines) else ""
38 |                     issue["context_before"] = [l.strip() for l in lines[max(0, line_num-3):line_num-1]]
39 |                     issue["context_after"] = [l.strip() for l in lines[line_num:min(len(lines), line_num+2)]]
   |                                                             ^ E741
40 |                 except:
41 |                     issue["line_content"] = ""
   |

scripts/generate-simple-linting-report.py:40:17: E722 Do not use bare `except`
   |
38 |                     issue["context_before"] = [l.strip() for l in lines[max(0, line_num-3):line_num-1]]
39 |                     issue["context_after"] = [l.strip() for l in lines[line_num:min(len(lines), line_num+2)]]
40 |                 except:
   |                 ^^^^^^ E722
41 |                     issue["line_content"] = ""
42 |                     issue["context_before"] = []
   |

scripts/generate-simple-linting-report.py:73:13: E722 Do not use bare `except`
   |
71 |                     issue["filename"] = str(file)
72 |                     issues.append(issue)
73 |             except:
   |             ^^^^^^ E722
74 |                 pass
   |

scripts/generate-simple-linting-report.py:73:13: S110 `try`-`except`-`pass` detected, consider logging the exception
   |
71 |                       issue["filename"] = str(file)
72 |                       issues.append(issue)
73 | /             except:
74 | |                 pass
   | |____________________^ S110
75 |
76 |       return issues
   |

scripts/generate-simple-linting-report.py:94:9: E722 Do not use bare `except`
   |
92 |                     msg["filename"] = file_result["filePath"]
93 |                     issues.append(msg)
94 |         except:
   |         ^^^^^^ E722
95 |             pass
   |

scripts/generate-simple-linting-report.py:94:9: S110 `try`-`except`-`pass` detected, consider logging the exception
   |
92 |                       msg["filename"] = file_result["filePath"]
93 |                       issues.append(msg)
94 | /         except:
95 | |             pass
   | |________________^ S110
96 |
97 |       return issues
   |

scripts/generate-simple-linting-report.py:120:22: PTH123 `open()` should be replaced by `Path.open()`
    |
118 |             for file in files_to_fix:
119 |                 # Check if it's actually security-sensitive
120 |                 with open(file) as f:
    |                      ^^^^ PTH123
121 |                     content = f.read()
    |

scripts/generate-simple-linting-report.py:133:26: PTH123 `open()` should be replaced by `Path.open()`
    |
131 |                     content = content.replace("random.random()", "secrets.randbits(64) / (2**64)")
132 |
133 |                     with open(file, "w") as f:
    |                          ^^^^ PTH123
134 |                         f.write(content)
135 |         except:
    |

scripts/generate-simple-linting-report.py:135:9: E722 Do not use bare `except`
    |
133 |                     with open(file, "w") as f:
134 |                         f.write(content)
135 |         except:
    |         ^^^^^^ E722
136 |             pass
    |

scripts/generate-simple-linting-report.py:135:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
133 |                       with open(file, "w") as f:
134 |                           f.write(content)
135 | /         except:
136 | |             pass
    | |________________^ S110
137 |
138 |       # Fix S113 - Add timeouts to requests
    |

scripts/generate-simple-linting-report.py:146:22: PTH123 `open()` should be replaced by `Path.open()`
    |
145 |             for file in files_to_fix:
146 |                 with open(file) as f:
    |                      ^^^^ PTH123
147 |                     lines = f.readlines()
    |

scripts/generate-simple-linting-report.py:158:22: PTH123 `open()` should be replaced by `Path.open()`
    |
156 |                             lines[i] = line.replace("requests.post(", "requests.post(").replace(")", ", timeout=30)")
157 |
158 |                 with open(file, "w") as f:
    |                      ^^^^ PTH123
159 |                     f.writelines(lines)
160 |         except:
    |

scripts/generate-simple-linting-report.py:160:9: E722 Do not use bare `except`
    |
158 |                 with open(file, "w") as f:
159 |                     f.writelines(lines)
160 |         except:
    |         ^^^^^^ E722
161 |             pass
    |

scripts/generate-simple-linting-report.py:160:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
158 |                   with open(file, "w") as f:
159 |                       f.writelines(lines)
160 | /         except:
161 | |             pass
    | |________________^ S110
162 |
163 |   def fix_shell_issues():
    |

scripts/generate-simple-linting-report.py:173:14: PTH123 `open()` should be replaced by `Path.open()`
    |
173 |         with open(file) as f:
    |              ^^^^ PTH123
174 |             content = f.read()
175 |             lines = content.split("\n")
    |

scripts/generate-simple-linting-report.py:191:14: PTH123 `open()` should be replaced by `Path.open()`
    |
189 |                 lines[i] = line.replace("`", "$(...)")
190 |
191 |         with open(file, "w") as f:
    |              ^^^^ PTH123
192 |             f.write("\n".join(lines))
    |

scripts/generate-simple-linting-report.py:238:10: PTH123 `open()` should be replaced by `Path.open()`
    |
236 |     # Save report
237 |     report_file = f"linting_report_iteration_{iteration}.json"
238 |     with open(report_file, "w") as f:
    |          ^^^^ PTH123
239 |         json.dump(report, f, indent=2)
    |

scripts/generate-simple-linting-report.py:244:13: B007 Loop control variable `code` not used within loop body
    |
243 |     if python_by_type:
244 |         for code, _issues in sorted(python_by_type.items(), key=lambda x: len(x[1]), reverse=True)[:5]:
    |             ^^^^ B007
245 |             pass
    |
    = help: Rename unused `code` to `_code`

scripts/sonarqube/automated-report-generator.py:94:18: PTH123 `open()` should be replaced by `Path.open()`
   |
92 |         """Load configuration from YAML file"""
93 |         try:
94 |             with open(config_file) as f:
   |                  ^^^^ PTH123
95 |                 return yaml.safe_load(f)
96 |         except FileNotFoundError:
   |

scripts/sonarqube/automated-report-generator.py:134:22: PTH123 `open()` should be replaced by `Path.open()`
    |
132 |         if self.historical_data_file.exists():
133 |             try:
134 |                 with open(self.historical_data_file) as f:
    |                      ^^^^ PTH123
135 |                     return json.load(f)
136 |             except Exception as e:
    |

scripts/sonarqube/automated-report-generator.py:146:14: PTH123 `open()` should be replaced by `Path.open()`
    |
144 |         self.historical_data["reports"] = self.historical_data["reports"][-100:]
145 |
146 |         with open(self.historical_data_file, "w") as f:
    |              ^^^^ PTH123
147 |             json.dump(self.historical_data, f, indent=2)
    |

scripts/sonarqube/automated-report-generator.py:313:9: E722 Do not use bare `except`
    |
311 |             else:
312 |                 return f"{total_minutes}m"
313 |         except:
    |         ^^^^^^ E722
314 |             return minutes
    |

scripts/sonarqube/automated-report-generator.py:351:53: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
349 |                     result.append("")
350 |
351 |                 if len(severity_groups[severity]) > 10:
    |                                                     ^^ PLR2004
352 |                     result.append(f"... and {len(severity_groups[severity]) - 10} more issues")
    |

scripts/sonarqube/automated-report-generator.py:408:36: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
406 |                 result.append("")
407 |
408 |             if len(hotspot_list) > 5:
    |                                    ^ PLR2004
409 |                 result.append(f"... and {len(hotspot_list) - 5} more hotspots")
    |

scripts/sonarqube/automated-report-generator.py:437:51: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
435 |     def _generate_trends_analysis(self, current_data: dict[str, Any]) -> str:
436 |         """Generate trends analysis"""
437 |         if len(self.historical_data["reports"]) < 2:
    |                                                   ^ PLR2004
438 |             return "Not enough historical data for trend analysis"
    |

scripts/sonarqube/automated-report-generator.py:474:13: E722 Do not use bare `except`
    |
473 |                 trends.append(f"- **{metric}**: {curr} {trend}")
474 |             except:
    |             ^^^^^^ E722
475 |                 trends.append(f"- **{metric}**: {current_val} (no comparison available)")
    |

scripts/sonarqube/automated-report-generator.py:541:9: ERA001 Found commented-out code
    |
539 |         html = re.sub(r"(<li>.*</li>)", r"<ul>\\1</ul>", html, flags=re.DOTALL)
540 |
541 |         # Tables (simplified)
    |         ^^^^^^^^^^^^^^^^^^^^^ ERA001
542 |         lines = html.split("\n")
543 |         in_table = False
    |
    = help: Remove commented-out code

scripts/sonarqube/automated-report-generator.py:609:51: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
607 |     def _calculate_trends(self, current_data: dict[str, Any]) -> dict[str, Any]:
608 |         """Calculate trends for JSON report"""
609 |         if len(self.historical_data["reports"]) < 2:
    |                                                   ^ PLR2004
610 |             return {"available": False, "reason": "Not enough historical data"}
    |

scripts/sonarqube/automated-report-generator.py:644:13: E722 Do not use bare `except`
    |
642 |                     "direction": "up" if change > 0 else "down" if change < 0 else "stable",
643 |                 }
644 |             except:
    |             ^^^^^^ E722
645 |                 trends["metrics"][metric] = {
646 |                     "current": current_val,
    |

scripts/sonarqube/automated-report-generator.py:663:14: PTH123 `open()` should be replaced by `Path.open()`
    |
661 |         filepath = Path(self.report_config.output_dir) / filename
662 |
663 |         with open(filepath, "w", encoding="utf-8") as f:
    |              ^^^^ PTH123
664 |             f.write(content)
    |

scripts/sonarqube/automated-report-generator.py:698:22: PTH123 `open()` should be replaced by `Path.open()`
    |
696 |             # Attach report files
697 |             for file_path in report_files:
698 |                 with open(file_path, "rb") as attachment:
    |                      ^^^^ PTH123
699 |                     part = MIMEBase("application", "octet-stream")
700 |                     part.set_payload(attachment.read())
    |

scripts/sonarqube/issue-resolver.py:94:9: PLR0911 Too many return statements (12 > 6)
   |
92 |         return results
93 |
94 |     def _resolve_single_issue(self, issue: Issue) -> bool:
   |         ^^^^^^^^^^^^^^^^^^^^^ PLR0911
95 |         """Resolve a single issue based on its rule"""
96 |         file_path = self.project_root / issue.file_path
   |

scripts/sonarqube/issue-resolver.py:130:18: PTH123 `open()` should be replaced by `Path.open()`
    |
128 |         """Fix cognitive complexity issues by extracting functions"""
129 |         try:
130 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
131 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:150:22: PTH123 `open()` should be replaced by `Path.open()`
    |
148 |                 new_lines = lines[:function_start] + refactored_content.split("\n") + lines[function_end + 1 :]
149 |
150 |                 with open(file_path, "w", encoding="utf-8") as f:
    |                      ^^^^ PTH123
151 |                     f.write("\n".join(new_lines))
    |

scripts/sonarqube/issue-resolver.py:165:18: PTH123 `open()` should be replaced by `Path.open()`
    |
163 |         """Fix function nesting depth issues"""
164 |         try:
165 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
166 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:183:30: PTH123 `open()` should be replaced by `Path.open()`
    |
182 |                     if refactored_content != content:
183 |                         with open(file_path, "w", encoding="utf-8") as f:
    |                              ^^^^ PTH123
184 |                             f.write(refactored_content)
    |

scripts/sonarqube/issue-resolver.py:198:18: PTH123 `open()` should be replaced by `Path.open()`
    |
196 |         """Fix unnecessary await on non-Promise values"""
197 |         try:
198 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
199 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:216:30: PTH123 `open()` should be replaced by `Path.open()`
    |
214 |                         lines[issue.line - 1] = new_line
215 |
216 |                         with open(file_path, "w", encoding="utf-8") as f:
    |                              ^^^^ PTH123
217 |                             f.write("\n".join(lines))
    |

scripts/sonarqube/issue-resolver.py:231:18: PTH123 `open()` should be replaced by `Path.open()`
    |
229 |         """Fix array sort without comparator"""
230 |         try:
231 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
232 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:247:30: PTH123 `open()` should be replaced by `Path.open()`
    |
245 |                         lines[issue.line - 1] = new_line
246 |
247 |                         with open(file_path, "w", encoding="utf-8") as f:
    |                              ^^^^ PTH123
248 |                             f.write("\n".join(lines))
    |

scripts/sonarqube/issue-resolver.py:262:18: PTH123 `open()` should be replaced by `Path.open()`
    |
260 |         """Fix hardcoded secrets by replacing with environment variables"""
261 |         try:
262 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
263 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:291:30: PTH123 `open()` should be replaced by `Path.open()`
    |
289 |                         lines[issue.line - 1] = new_line
290 |
291 |                         with open(file_path, "w", encoding="utf-8") as f:
    |                              ^^^^ PTH123
292 |                             f.write("\n".join(lines))
    |

scripts/sonarqube/issue-resolver.py:303:58: ARG002 Unused method argument: `issue`
    |
301 |             return False
302 |
303 |     def _fix_compromised_password(self, file_path: Path, issue: Issue) -> bool:
    |                                                          ^^^^^ ARG002
304 |         """Fix compromised passwords in configuration files"""
305 |         try:
    |

scripts/sonarqube/issue-resolver.py:306:18: PTH123 `open()` should be replaced by `Path.open()`
    |
304 |         """Fix compromised passwords in configuration files"""
305 |         try:
306 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
307 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:330:22: PTH123 `open()` should be replaced by `Path.open()`
    |
329 |             if modified:
330 |                 with open(file_path, "w", encoding="utf-8") as f:
    |                      ^^^^ PTH123
331 |                     f.write(content)
    |

scripts/sonarqube/issue-resolver.py:346:53: ARG002 Unused method argument: `issue`
    |
344 |         return self._fix_hardcoded_secret(file_path, issue)
345 |
346 |     def _fix_sonarqube_token(self, file_path: Path, issue: Issue) -> bool:
    |                                                     ^^^^^ ARG002
347 |         """Fix SonarQube token exposure"""
348 |         try:
    |

scripts/sonarqube/issue-resolver.py:349:18: PTH123 `open()` should be replaced by `Path.open()`
    |
347 |         """Fix SonarQube token exposure"""
348 |         try:
349 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
350 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:370:22: PTH123 `open()` should be replaced by `Path.open()`
    |
369 |             if modified:
370 |                 with open(file_path, "w", encoding="utf-8") as f:
    |                      ^^^^ PTH123
371 |                     f.write(content)
    |

scripts/sonarqube/issue-resolver.py:409:65: ARG002 Unused method argument: `file_extension`
    |
407 |         return "\n".join(function_lines), end_line
408 |
409 |     def _refactor_complex_function(self, function_content: str, file_extension: str) -> str:
    |                                                                 ^^^^^^^^^^^^^^ ARG002
410 |         """Refactor complex function by extracting helper functions"""
411 |         # This is a simplified refactoring - in practice, you'd need more sophisticated analysis
    |

scripts/sonarqube/issue-resolver.py:416:25: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
    |
414 |         # Look for common patterns that can be extracted
415 |         # For now, just add a comment suggesting manual refactoring
416 |         if len(lines) > 50:
    |                         ^^ PLR2004
417 |             comment = "  // TODO: Consider breaking this function into smaller functions to reduce complexity"
418 |             lines.insert(1, comment)
    |

scripts/sonarqube/run-sonar-analysis.py:208:14: PTH123 `open()` should be replaced by `Path.open()`
    |
206 |         output_path = Path(self.report_generator.report_config.output_dir) / output_file
207 |
208 |         with open(output_path, "w") as f:
    |              ^^^^ PTH123
209 |             json.dump(results, f, indent=2, default=str)
    |

scripts/sonarqube/run-sonar-analysis.py:263:18: PTH123 `open()` should be replaced by `Path.open()`
    |
261 |             output_path = Path(runner.report_generator.report_config.output_dir) / output_file
262 |
263 |             with open(output_path, "w") as f:
    |                  ^^^^ PTH123
264 |                 f.write(report)
    |

simple-mcp-test-runner.py:25:5: S110 `try`-`except`-`pass` detected, consider logging the exception
   |
23 |       except requests.exceptions.Timeout:
24 |           pass
25 | /     except Exception:
26 | |         pass
   | |____________^ S110
27 |
28 |       # Test 2: Framework can generate proper test data
   |

simple-mcp-test-runner.py:65:9: S110 `try`-`except`-`pass` detected, consider logging the exception
   |
63 |               else:
64 |                   pass
65 | /         except Exception:
66 | |             pass
   | |________________^ S110
67 |
68 |       return True
   |

simple-mcp-test-runner.py:129:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
127 |     for _component_name, file_path in components:
128 |         full_path = f"/Users/lsendel/IdeaProjects/zamaz-debate-mcp/{file_path}"
129 |         if os.path.exists(full_path):
    |            ^^^^^^^^^^^^^^ PTH110
130 |             available_components += 1
131 |         else:
    |

Found 2326 errors (1463 fixed, 863 remaining).
error: Failed to parse .github/scripts/context_manager.py:416:23: unexpected EOF while parsing
error: Failed to parse .github/tests/test_code_analyzer.py:349:24: Got unexpected string
3 files reformatted, 78 files left unchanged

/Users/lsendel/IdeaProjects/zamaz-debate-mcp/debate-ui/src/api/debateClient.ts
  248:1  warning  Assign instance to a variable before exporting as module default  import/no-anonymous-default-export

/Users/lsendel/IdeaProjects/zamaz-debate-mcp/debate-ui/src/api/llmClient.ts
  243:1  warning  Assign instance to a variable before exporting as module default  import/no-anonymous-default-export

/Users/lsendel/IdeaProjects/zamaz-debate-mcp/debate-ui/src/api/organizationClient.ts
  134:1  warning  Assign instance to a variable before exporting as module default  import/no-anonymous-default-export

/Users/lsendel/IdeaProjects/zamaz-debate-mcp/debate-ui/src/components/SettingsDialog.jsx
  49:6  warning  React Hook useEffect has a missing dependency: 'loadCacheInfo'. Either include it or remove the dependency array  react-hooks/exhaustive-deps

✖ 4 problems (0 errors, 4 warnings)

src/api/baseClient.ts 67ms
src/api/debateClient.ts 16ms
src/api/llmClient.ts 10ms
src/api/mockAuth.ts 3ms
src/api/mockLLMData.ts 4ms
src/api/organizationClient.ts 4ms
src/App.tsx 5ms
src/components/AnalyticsPage.tsx 17ms
src/components/CreateDebateDialog.tsx 20ms
src/components/DebateDetailPage.tsx 27ms
src/components/DebatesPage.tsx 15ms
src/components/Layout.tsx 7ms
src/components/LoginPage.tsx 10ms
src/components/NotificationSnackbar.tsx 4ms
src/components/OrganizationSwitcher.tsx 3ms
src/components/PWAPrompt.jsx 79ms
src/components/SettingsDialog.jsx 11ms
src/components/SettingsPage.tsx 14ms
src/hooks/usePWA.js 11ms
src/index.css 13ms
src/index.tsx 2ms
src/react-app-env.d.ts 1ms
src/store/index.ts 1ms
src/store/slices/authSlice.ts 4ms
src/store/slices/debateSlice.ts 7ms
src/store/slices/organizationSlice.ts 4ms
src/store/slices/uiSlice.ts 4ms
src/test/e2e/E2EScenarios.js 31ms
src/test/utils/ComponentTestUtils.js 13ms
.github/__init__.py:1:1: N999 Invalid module name: '.github'
.github/monitoring/custom_metrics.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from prometheus_client import CollectorRegistry, Counter, Gauge, Histogram, Info, Summary, generate_latest
12 |
13 | from ..scripts.core.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 |
15 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/monitoring/custom_metrics.py:244:41: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
243 |         # Maintain rolling window (last 1000 requests)
244 |         if len(self.processing_times) > 1000:
    |                                         ^^^^ PLR2004
245 |             self.processing_times.pop(0)
    |

.github/monitoring/custom_metrics.py:322:63: PLR2004 Magic value used in comparison, consider replacing `0.05` with a constant variable
    |
320 |             {
321 |                 "name": "HighErrorRate",
322 |                 "condition": lambda: self._get_error_rate() > 0.05,
    |                                                               ^^^^ PLR2004
323 |                 "severity": "critical",
324 |                 "message": "Error rate exceeds 5%",
    |

.github/monitoring/custom_metrics.py:328:71: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
326 |             {
327 |                 "name": "LowGitHubRateLimit",
328 |                 "condition": lambda: self._get_rate_limit_percent() < 10,
    |                                                                       ^^ PLR2004
329 |                 "severity": "warning",
330 |                 "message": "GitHub rate limit below 10%",
    |

.github/monitoring/custom_metrics.py:334:67: PLR2004 Magic value used in comparison, consider replacing `300` with a constant variable
    |
332 |             {
333 |                 "name": "SlowPRProcessing",
334 |                 "condition": lambda: self._get_processing_p95() > 300,
    |                                                                   ^^^ PLR2004
335 |                 "severity": "warning",
336 |                 "message": "PR processing P95 exceeds 5 minutes",
    |

.github/monitoring/custom_metrics.py:340:67: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
338 |             {
339 |                 "name": "HighQueueSize",
340 |                 "condition": lambda: self._get_max_queue_size() > 100,
    |                                                                   ^^^ PLR2004
341 |                 "severity": "warning",
342 |                 "message": "PR queue size exceeds 100",
    |

.github/monitoring/custom_metrics.py:346:68: PLR2004 Magic value used in comparison, consider replacing `1024` with a constant variable
    |
344 |             {
345 |                 "name": "MemoryUsageHigh",
346 |                 "condition": lambda: self._get_memory_usage_mb() > 1024,
    |                                                                    ^^^^ PLR2004
347 |                 "severity": "warning",
348 |                 "message": "Memory usage exceeds 1GB",
    |

.github/scripts/__init__.py:1:1: N999 Invalid module name: '.github'
.github/scripts/analytics_collector.py:23:19: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
22 | # Constants
23 | DEFAULT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "analytics.db")
   |                   ^^^^^^^^^^^^ PTH118
   |

.github/scripts/analytics_collector.py:23:32: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
22 | # Constants
23 | DEFAULT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "analytics.db")
   |                                ^^^^^^^^^^^^^^^ PTH120
   |

.github/scripts/analytics_collector.py:34:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
33 |         # Ensure directory exists
34 |         os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
35 |
36 |         # Initialize database
   |

.github/scripts/analytics_collector.py:34:21: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
33 |         # Ensure directory exists
34 |         os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
   |                     ^^^^^^^^^^^^^^^ PTH120
35 |
36 |         # Initialize database
   |

.github/scripts/analytics_dashboard.py:525:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
524 |     # Create templates directory
525 |     templates_dir = os.path.join(os.path.dirname(__file__), "templates")
    |                     ^^^^^^^^^^^^ PTH118
526 |     os.makedirs(templates_dir, exist_ok=True)
    |

.github/scripts/analytics_dashboard.py:525:34: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
    |
524 |     # Create templates directory
525 |     templates_dir = os.path.join(os.path.dirname(__file__), "templates")
    |                                  ^^^^^^^^^^^^^^^ PTH120
526 |     os.makedirs(templates_dir, exist_ok=True)
    |

.github/scripts/analytics_dashboard.py:526:5: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
524 |     # Create templates directory
525 |     templates_dir = os.path.join(os.path.dirname(__file__), "templates")
526 |     os.makedirs(templates_dir, exist_ok=True)
    |     ^^^^^^^^^^^ PTH103
527 |
528 |     # Write the HTML template
    |

.github/scripts/analytics_dashboard.py:529:10: PTH123 `open()` should be replaced by `Path.open()`
    |
528 |     # Write the HTML template
529 |     with open(os.path.join(templates_dir, "dashboard.html"), "w") as f:
    |          ^^^^ PTH123
530 |         f.write(html_content)
    |

.github/scripts/analytics_dashboard.py:529:15: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
528 |     # Write the HTML template
529 |     with open(os.path.join(templates_dir, "dashboard.html"), "w") as f:
    |               ^^^^^^^^^^^^ PTH118
530 |         f.write(html_content)
    |

.github/scripts/analytics_dashboard.py:539:49: PLW1508 Invalid type for environment variable default; expected `str` or `None`
    |
538 |     # Run the Flask app
539 |     port = int(os.environ.get("DASHBOARD_PORT", 5001))
    |                                                 ^^^^ PLW1508
540 |     app.run(host="0.0.0.0", port=port, debug=True)
    |

.github/scripts/analytics_dashboard.py:540:18: S104 Possible binding to all interfaces
    |
538 |     # Run the Flask app
539 |     port = int(os.environ.get("DASHBOARD_PORT", 5001))
540 |     app.run(host="0.0.0.0", port=port, debug=True)
    |                  ^^^^^^^^^ S104
    |

.github/scripts/analytics_dashboard.py:540:40: S201 Use of `debug=True` in Flask app detected
    |
538 |     # Run the Flask app
539 |     port = int(os.environ.get("DASHBOARD_PORT", 5001))
540 |     app.run(host="0.0.0.0", port=port, debug=True)
    |                                        ^^^^^^^^^^ S201
    |

.github/scripts/analyzers/__init__.py:1:1: N999 Invalid module name: '.github'
.github/scripts/analyzers/base_analyzer.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from typing import Any
14 |
15 | from ..core.exceptions import AnalysisTimeoutError, FileNotSupportedError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ..core.interfaces import AnalysisResult, AnalyzerInterface, CodeIssue, IssueLevel
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/base_analyzer.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from typing import Any
14 |
15 | from ..core.exceptions import AnalysisTimeoutError, FileNotSupportedError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ..core.interfaces import AnalysisResult, AnalyzerInterface, CodeIssue, IssueLevel
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/base_analyzer.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ..core.exceptions import AnalysisTimeoutError, FileNotSupportedError
16 | from ..core.interfaces import AnalysisResult, AnalyzerInterface, CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/base_analyzer.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ..core.exceptions import AnalysisTimeoutError, FileNotSupportedError
16 | from ..core.interfaces import AnalysisResult, AnalyzerInterface, CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/base_analyzer.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ..core.exceptions import AnalysisTimeoutError, FileNotSupportedError
16 | from ..core.interfaces import AnalysisResult, AnalyzerInterface, CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/base_analyzer.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ..core.exceptions import AnalysisTimeoutError, FileNotSupportedError
16 | from ..core.interfaces import AnalysisResult, AnalyzerInterface, CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/base_analyzer.py:141:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
140 |             except TimeoutError:
141 |                 raise AnalysisTimeoutError(file_path, analysis_context.timeout_seconds)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
142 |             except Exception as e:
143 |                 # Log error but continue with other strategies
    |

.github/scripts/analyzers/documentation_analyzer.py:39:12: F401 `docutils.parsers.rst` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
38 |     import docutils.core
39 |     import docutils.parsers.rst
   |            ^^^^^^^^^^^^^^^^^^^^ F401
40 |     import javalang
41 |     import markdown
   |
   = help: Remove unused import: `docutils.parsers.rst`

.github/scripts/analyzers/documentation_analyzer.py:42:12: F401 `mistune` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
40 |     import javalang
41 |     import markdown
42 |     import mistune
   |            ^^^^^^^ F401
43 |     import nltk
44 |     import numpy as np
   |
   = help: Remove unused import: `mistune`

.github/scripts/analyzers/documentation_analyzer.py:43:12: F401 `nltk` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
41 |     import markdown
42 |     import mistune
43 |     import nltk
   |            ^^^^ F401
44 |     import numpy as np
45 |     import spacy
   |
   = help: Remove unused import: `nltk`

.github/scripts/analyzers/documentation_analyzer.py:44:21: F401 `numpy` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
42 |     import mistune
43 |     import nltk
44 |     import numpy as np
   |                     ^^ F401
45 |     import spacy
46 |     from asciidoc import AsciiDocAPI
   |
   = help: Remove unused import: `numpy`

.github/scripts/analyzers/documentation_analyzer.py:45:12: F401 `spacy` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
43 |     import nltk
44 |     import numpy as np
45 |     import spacy
   |            ^^^^^ F401
46 |     from asciidoc import AsciiDocAPI
47 |     from bs4 import BeautifulSoup
   |
   = help: Remove unused import: `spacy`

.github/scripts/analyzers/documentation_analyzer.py:51:26: F401 `pygments.highlight` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
49 |     from nltk.stem import WordNetLemmatizer
50 |     from nltk.tokenize import sent_tokenize, word_tokenize
51 |     from pygments import highlight
   |                          ^^^^^^^^^ F401
52 |     from pygments.formatters import HtmlFormatter
53 |     from pygments.lexers import get_lexer_by_name, guess_lexer
   |
   = help: Remove unused import: `pygments.highlight`

.github/scripts/analyzers/documentation_analyzer.py:52:37: F401 `pygments.formatters.HtmlFormatter` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
50 |     from nltk.tokenize import sent_tokenize, word_tokenize
51 |     from pygments import highlight
52 |     from pygments.formatters import HtmlFormatter
   |                                     ^^^^^^^^^^^^^ F401
53 |     from pygments.lexers import get_lexer_by_name, guess_lexer
54 |     from sentence_transformers import SentenceTransformer
   |
   = help: Remove unused import: `pygments.formatters.HtmlFormatter`

.github/scripts/analyzers/documentation_analyzer.py:53:33: F401 `pygments.lexers.get_lexer_by_name` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
51 |     from pygments import highlight
52 |     from pygments.formatters import HtmlFormatter
53 |     from pygments.lexers import get_lexer_by_name, guess_lexer
   |                                 ^^^^^^^^^^^^^^^^^ F401
54 |     from sentence_transformers import SentenceTransformer
55 |     from sklearn.cluster import KMeans
   |
   = help: Remove unused import

.github/scripts/analyzers/documentation_analyzer.py:53:52: F401 `pygments.lexers.guess_lexer` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
51 |     from pygments import highlight
52 |     from pygments.formatters import HtmlFormatter
53 |     from pygments.lexers import get_lexer_by_name, guess_lexer
   |                                                    ^^^^^^^^^^^ F401
54 |     from sentence_transformers import SentenceTransformer
55 |     from sklearn.cluster import KMeans
   |
   = help: Remove unused import

.github/scripts/analyzers/documentation_analyzer.py:54:39: F401 `sentence_transformers.SentenceTransformer` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
52 |     from pygments.formatters import HtmlFormatter
53 |     from pygments.lexers import get_lexer_by_name, guess_lexer
54 |     from sentence_transformers import SentenceTransformer
   |                                       ^^^^^^^^^^^^^^^^^^^ F401
55 |     from sklearn.cluster import KMeans
56 |     from sklearn.feature_extraction.text import TfidfVectorizer
   |
   = help: Remove unused import: `sentence_transformers.SentenceTransformer`

.github/scripts/analyzers/documentation_analyzer.py:55:33: F401 `sklearn.cluster.KMeans` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
53 |     from pygments.lexers import get_lexer_by_name, guess_lexer
54 |     from sentence_transformers import SentenceTransformer
55 |     from sklearn.cluster import KMeans
   |                                 ^^^^^^ F401
56 |     from sklearn.feature_extraction.text import TfidfVectorizer
57 |     from sklearn.metrics.pairwise import cosine_similarity
   |
   = help: Remove unused import: `sklearn.cluster.KMeans`

.github/scripts/analyzers/documentation_analyzer.py:629:18: PTH123 `open()` should be replaced by `Path.open()`
    |
628 |         try:
629 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
630 |                 content = f.read()
631 |         except UnicodeDecodeError:
    |

.github/scripts/analyzers/documentation_analyzer.py:633:22: PTH123 `open()` should be replaced by `Path.open()`
    |
631 |         except UnicodeDecodeError:
632 |             try:
633 |                 with open(file_path, encoding="latin-1") as f:
    |                      ^^^^ PTH123
634 |                     content = f.read()
635 |             except:
    |

.github/scripts/analyzers/documentation_analyzer.py:635:13: E722 Do not use bare `except`
    |
633 |                 with open(file_path, encoding="latin-1") as f:
634 |                     content = f.read()
635 |             except:
    |             ^^^^^^ E722
636 |                 logger.warning(f"Could not read file: {file_path}")
637 |                 return CodeFile(path=file_path, language="unknown")
    |

.github/scripts/analyzers/documentation_analyzer.py:1003:13: E722 Do not use bare `except`
     |
1001 |                 self.lemmatizer = WordNetLemmatizer()
1002 |                 self.stop_words = set(stopwords.words("english"))
1003 |             except:
     |             ^^^^^^ E722
1004 |                 pass
     |

.github/scripts/analyzers/documentation_analyzer.py:1003:13: S110 `try`-`except`-`pass` detected, consider logging the exception
     |
1001 |                   self.lemmatizer = WordNetLemmatizer()
1002 |                   self.stop_words = set(stopwords.words("english"))
1003 | /             except:
1004 | |                 pass
     | |____________________^ S110
1005 |
1006 |       def analyze_document(self, doc: DocumentationFile) -> DocumentationFile:
     |

.github/scripts/analyzers/documentation_analyzer.py:1028:9: E722 Do not use bare `except`
     |
1026 |                 sentences = len([s for s in content.split(".") if s.strip()])
1027 |                 words = len(content.split())
1028 |         except:
     |         ^^^^^^ E722
1029 |             sentences = len([s for s in content.split(".") if s.strip()])
1030 |             words = len(content.split())
     |

.github/scripts/analyzers/documentation_analyzer.py:1059:36: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
     |
1057 |         if doc.headers:
1058 |             score += 20
1059 |             if len(doc.headers) >= 3:
     |                                    ^ PLR2004
1060 |                 score += 10
     |

.github/scripts/analyzers/documentation_analyzer.py:1083:12: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
     |
1082 |         # Check for content length (not too short, not too long)
1083 |         if 100 <= doc.word_count <= 5000:
     |            ^^^ PLR2004
1084 |             score += 15
1085 |         elif doc.word_count > 5000:
     |

.github/scripts/analyzers/documentation_analyzer.py:1083:37: PLR2004 Magic value used in comparison, consider replacing `5000` with a constant variable
     |
1082 |         # Check for content length (not too short, not too long)
1083 |         if 100 <= doc.word_count <= 5000:
     |                                     ^^^^ PLR2004
1084 |             score += 15
1085 |         elif doc.word_count > 5000:
     |

.github/scripts/analyzers/documentation_analyzer.py:1085:31: PLR2004 Magic value used in comparison, consider replacing `5000` with a constant variable
     |
1083 |         if 100 <= doc.word_count <= 5000:
1084 |             score += 15
1085 |         elif doc.word_count > 5000:
     |                               ^^^^ PLR2004
1086 |             score += 10
1087 |         elif doc.word_count > 50:
     |

.github/scripts/analyzers/documentation_analyzer.py:1087:31: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
     |
1085 |         elif doc.word_count > 5000:
1086 |             score += 10
1087 |         elif doc.word_count > 50:
     |                               ^^ PLR2004
1088 |             score += 5
     |

.github/scripts/analyzers/documentation_analyzer.py:1100:23: PLR2004 Magic value used in comparison, consider replacing `30` with a constant variable
     |
1098 |         days_old = (now - doc.last_modified).days
1099 |
1100 |         if days_old < 30:
     |                       ^^ PLR2004
1101 |             return 100.0
1102 |         elif days_old < 90:
     |

.github/scripts/analyzers/documentation_analyzer.py:1102:25: PLR2004 Magic value used in comparison, consider replacing `90` with a constant variable
     |
1100 |         if days_old < 30:
1101 |             return 100.0
1102 |         elif days_old < 90:
     |                         ^^ PLR2004
1103 |             return 80.0
1104 |         elif days_old < 180:
     |

.github/scripts/analyzers/documentation_analyzer.py:1104:25: PLR2004 Magic value used in comparison, consider replacing `180` with a constant variable
     |
1102 |         elif days_old < 90:
1103 |             return 80.0
1104 |         elif days_old < 180:
     |                         ^^^ PLR2004
1105 |             return 60.0
1106 |         elif days_old < 365:
     |

.github/scripts/analyzers/documentation_analyzer.py:1106:25: PLR2004 Magic value used in comparison, consider replacing `365` with a constant variable
     |
1104 |         elif days_old < 180:
1105 |             return 60.0
1106 |         elif days_old < 365:
     |                         ^^^ PLR2004
1107 |             return 40.0
1108 |         else:
     |

.github/scripts/analyzers/documentation_analyzer.py:1128:9: PLR0912 Too many branches (17 > 12)
     |
1126 |         self.code_extractor = CodeDocumentationExtractor()
1127 |
1128 |     def analyze_coverage(self, project_path: str) -> dict[str, Any]:
     |         ^^^^^^^^^^^^^^^^ PLR0912
1129 |         """Analyze documentation coverage for the entire project."""
1130 |         coverage_data = {
     |

.github/scripts/analyzers/documentation_analyzer.py:1149:39: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1147 |             for file in files:
1148 |                 if file.endswith((".java", ".py", ".js", ".ts", ".jsx", ".tsx")):
1149 |                     code_files.append(os.path.join(root, file))
     |                                       ^^^^^^^^^^^^ PTH118
1150 |
1151 |         coverage_data["total_files"] = len(code_files)
     |

.github/scripts/analyzers/documentation_analyzer.py:1204:13: B007 Loop control variable `file_type` not used within loop body
     |
1203 |         # Calculate coverage percentages
1204 |         for file_type, data in coverage_data["coverage_by_type"].items():
     |             ^^^^^^^^^ B007
1205 |             if data["total"] > 0:
1206 |                 data["coverage"] = (data["documented"] / data["total"]) * 100
     |
     = help: Rename unused `file_type` to `_file_type`

.github/scripts/analyzers/documentation_analyzer.py:1225:13: SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
     |
1224 |           if OPTIONAL_IMPORTS:
1225 | /             try:
1226 | |                 self.vectorizer = TfidfVectorizer(stop_words="english", max_features=5000)
1227 | |                 # For semantic search, we'd use a sentence transformer
1228 | |                 # self.sentence_model = SentenceTransformer('all-MiniLM-L6-v2')
1229 | |             except:
1230 | |                 pass
     | |____________________^ SIM105
1231 |
1232 |       def build_index(self, docs: list[DocumentationFile]) -> None:
     |
     = help: Replace with `contextlib.suppress(Exception)`

.github/scripts/analyzers/documentation_analyzer.py:1228:17: ERA001 Found commented-out code
     |
1226 |                 self.vectorizer = TfidfVectorizer(stop_words="english", max_features=5000)
1227 |                 # For semantic search, we'd use a sentence transformer
1228 |                 # self.sentence_model = SentenceTransformer('all-MiniLM-L6-v2')
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
1229 |             except:
1230 |                 pass
     |
     = help: Remove commented-out code

.github/scripts/analyzers/documentation_analyzer.py:1229:13: E722 Do not use bare `except`
     |
1227 |                 # For semantic search, we'd use a sentence transformer
1228 |                 # self.sentence_model = SentenceTransformer('all-MiniLM-L6-v2')
1229 |             except:
     |             ^^^^^^ E722
1230 |                 pass
     |

.github/scripts/analyzers/documentation_analyzer.py:1229:13: S110 `try`-`except`-`pass` detected, consider logging the exception
     |
1227 |                   # For semantic search, we'd use a sentence transformer
1228 |                   # self.sentence_model = SentenceTransformer('all-MiniLM-L6-v2')
1229 | /             except:
1230 | |                 pass
     | |____________________^ S110
1231 |
1232 |       def build_index(self, docs: list[DocumentationFile]) -> None:
     |

.github/scripts/analyzers/documentation_analyzer.py:1323:22: S603 `subprocess` call: check for execution of untrusted input
     |
1321 |         try:
1322 |             # Get recently modified code files
1323 |             result = subprocess.run(
     |                      ^^^^^^^^^^^^^^ S603
1324 |                 ["git", "log", "--name-only", "--pretty=format:", "--since=30 days ago"],
1325 |                 cwd=project_path,
     |

.github/scripts/analyzers/documentation_analyzer.py:1324:17: S607 Starting a process with a partial executable path
     |
1322 |             # Get recently modified code files
1323 |             result = subprocess.run(
1324 |                 ["git", "log", "--name-only", "--pretty=format:", "--since=30 days ago"],
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
1325 |                 cwd=project_path,
1326 |                 capture_output=True,
     |

.github/scripts/analyzers/documentation_analyzer.py:1340:28: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
     |
1339 |                     for doc_path in doc_candidates:
1340 |                         if os.path.exists(doc_path):
     |                            ^^^^^^^^^^^^^^ PTH110
1341 |                             # Check if documentation is older than code
1342 |                             code_mtime = os.path.getmtime(os.path.join(project_path, code_file))
     |

.github/scripts/analyzers/documentation_analyzer.py:1342:42: PTH204 `os.path.getmtime` should be replaced by `Path.stat().st_mtime`
     |
1340 |                         if os.path.exists(doc_path):
1341 |                             # Check if documentation is older than code
1342 |                             code_mtime = os.path.getmtime(os.path.join(project_path, code_file))
     |                                          ^^^^^^^^^^^^^^^^ PTH204
1343 |                             doc_mtime = os.path.getmtime(doc_path)
     |

.github/scripts/analyzers/documentation_analyzer.py:1342:59: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1340 |                         if os.path.exists(doc_path):
1341 |                             # Check if documentation is older than code
1342 |                             code_mtime = os.path.getmtime(os.path.join(project_path, code_file))
     |                                                           ^^^^^^^^^^^^ PTH118
1343 |                             doc_mtime = os.path.getmtime(doc_path)
     |

.github/scripts/analyzers/documentation_analyzer.py:1343:41: PTH204 `os.path.getmtime` should be replaced by `Path.stat().st_mtime`
     |
1341 |                             # Check if documentation is older than code
1342 |                             code_mtime = os.path.getmtime(os.path.join(project_path, code_file))
1343 |                             doc_mtime = os.path.getmtime(doc_path)
     |                                         ^^^^^^^^^^^^^^^^ PTH204
1344 |
1345 |                             if doc_mtime < code_mtime:
     |

.github/scripts/analyzers/documentation_analyzer.py:1369:21: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
     |
1367 |     def _find_related_docs(self, code_file: str, project_path: str) -> list[str]:
1368 |         """Find documentation files related to a code file."""
1369 |         base_name = os.path.splitext(os.path.basename(code_file))[0]
     |                     ^^^^^^^^^^^^^^^^ PTH122
1370 |         candidates = []
     |

.github/scripts/analyzers/documentation_analyzer.py:1369:38: PTH119 `os.path.basename()` should be replaced by `Path.name`
     |
1367 |     def _find_related_docs(self, code_file: str, project_path: str) -> list[str]:
1368 |         """Find documentation files related to a code file."""
1369 |         base_name = os.path.splitext(os.path.basename(code_file))[0]
     |                                      ^^^^^^^^^^^^^^^^ PTH119
1370 |         candidates = []
     |

.github/scripts/analyzers/documentation_analyzer.py:1373:43: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1372 |         # Look for documentation files with similar names
1373 |         for root, _dirs, files in os.walk(os.path.join(project_path, "docs")):
     |                                           ^^^^^^^^^^^^ PTH118
1374 |             for file in files:
1375 |                 if file.endswith((".md", ".rst", ".adoc")) and base_name.lower() in file.lower():
     |

.github/scripts/analyzers/documentation_analyzer.py:1376:39: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1374 |             for file in files:
1375 |                 if file.endswith((".md", ".rst", ".adoc")) and base_name.lower() in file.lower():
1376 |                     candidates.append(os.path.join(root, file))
     |                                       ^^^^^^^^^^^^ PTH118
1377 |
1378 |         return candidates
     |

.github/scripts/analyzers/documentation_analyzer.py:1388:33: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1386 |             for file in files:
1387 |                 if file.endswith((".md", ".rst", ".adoc")):
1388 |                     file_path = os.path.join(root, file)
     |                                 ^^^^^^^^^^^^ PTH118
1389 |
1390 |                     try:
     |

.github/scripts/analyzers/documentation_analyzer.py:1391:30: PTH123 `open()` should be replaced by `Path.open()`
     |
1390 |                     try:
1391 |                         with open(file_path, encoding="utf-8") as f:
     |                              ^^^^ PTH123
1392 |                             content = f.read()
     |

.github/scripts/analyzers/documentation_analyzer.py:1403:51: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1401 | …                     # Resolve relative path
1402 | …                     if url.startswith("/"):
1403 | …                         target_path = os.path.join(project_path, url[1:])
     |                                         ^^^^^^^^^^^^ PTH118
1404 | …                     else:
1405 | …                         target_path = os.path.join(os.path.dirname(file_path), url)
     |

.github/scripts/analyzers/documentation_analyzer.py:1405:51: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1403 |                                     target_path = os.path.join(project_path, url[1:])
1404 |                                 else:
1405 |                                     target_path = os.path.join(os.path.dirname(file_path), url)
     |                                                   ^^^^^^^^^^^^ PTH118
1406 |
1407 |                                 # Remove anchor
     |

.github/scripts/analyzers/documentation_analyzer.py:1405:64: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
     |
1403 |                                     target_path = os.path.join(project_path, url[1:])
1404 |                                 else:
1405 |                                     target_path = os.path.join(os.path.dirname(file_path), url)
     |                                                                ^^^^^^^^^^^^^^^ PTH120
1406 |
1407 |                                 # Remove anchor
     |

.github/scripts/analyzers/documentation_analyzer.py:1411:40: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
     |
1409 |                                     target_path = target_path.split("#")[0]
1410 |
1411 |                                 if not os.path.exists(target_path):
     |                                        ^^^^^^^^^^^^^^ PTH110
1412 |                                     issues.append(
1413 |                                         DocumentationIssue(
     |

.github/scripts/analyzers/documentation_analyzer.py:1436:33: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1434 |             for file in files:
1435 |                 if file.endswith((".java", ".py", ".js", ".ts")):
1436 |                     file_path = os.path.join(root, file)
     |                                 ^^^^^^^^^^^^ PTH118
1437 |
1438 |                     try:
     |

.github/scripts/analyzers/documentation_analyzer.py:1447:43: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1445 |         # Check if API documentation exists
1446 |         api_doc_files = []
1447 |         for root, _dirs, files in os.walk(os.path.join(project_path, "docs")):
     |                                           ^^^^^^^^^^^^ PTH118
1448 |             for file in files:
1449 |                 if "api" in file.lower() and file.endswith((".md", ".rst", ".adoc")):
     |

.github/scripts/analyzers/documentation_analyzer.py:1450:42: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1448 |             for file in files:
1449 |                 if "api" in file.lower() and file.endswith((".md", ".rst", ".adoc")):
1450 |                     api_doc_files.append(os.path.join(root, file))
     |                                          ^^^^^^^^^^^^ PTH118
1451 |
1452 |         if api_endpoints and not api_doc_files:
     |

.github/scripts/analyzers/documentation_analyzer.py:1490:48: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
     |
1489 |         # High priority recommendations
1490 |         if coverage_data["overall_coverage"] < 50:
     |                                                ^^ PLR2004
1491 |             recommendations["high_priority"].append(
1492 |                 {
     |

.github/scripts/analyzers/documentation_analyzer.py:1516:35: PLR2004 Magic value used in comparison, consider replacing `70` with a constant variable
     |
1514 |         # Medium priority recommendations
1515 |         for file_type, data in coverage_data["coverage_by_type"].items():
1516 |             if data["coverage"] < 70:
     |                                   ^^ PLR2004
1517 |                 recommendations["medium_priority"].append(
1518 |                     {
     |

.github/scripts/analyzers/documentation_analyzer.py:1809:29: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1808 |             for file in files:
1809 |                 file_path = os.path.join(root, file)
     |                             ^^^^^^^^^^^^ PTH118
1810 |                 file_extension = Path(file).suffix.lower()
     |

.github/scripts/analyzers/documentation_analyzer.py:1825:30: PTH123 `open()` should be replaced by `Path.open()`
     |
1823 |                 if parser:
1824 |                     try:
1825 |                         with open(file_path, encoding="utf-8") as f:
     |                              ^^^^ PTH123
1826 |                             content = f.read()
     |

.github/scripts/analyzers/documentation_analyzer.py:1831:32: PTH116 `os.stat()` should be replaced by `Path.stat()`, `Path.owner()`, or `Path.group()`
     |
1830 |                         # Get file stats
1831 |                         stat = os.stat(file_path)
     |                                ^^^^^^^ PTH116
1832 |                         doc.last_modified = datetime.datetime.fromtimestamp(stat.st_mtime)
     |

.github/scripts/analyzers/documentation_analyzer.py:1858:33: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
     |
1856 |             for file in files:
1857 |                 if file.endswith((".java", ".py", ".js", ".ts", ".jsx", ".tsx")):
1858 |                     file_path = os.path.join(root, file)
     |                                 ^^^^^^^^^^^^ PTH118
1859 |
1860 |                     # Check if file actually exists
     |

.github/scripts/analyzers/documentation_analyzer.py:1861:28: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
     |
1860 |                     # Check if file actually exists
1861 |                     if not os.path.exists(file_path):
     |                            ^^^^^^^^^^^^^^ PTH110
1862 |                         continue
     |

.github/scripts/analyzers/documentation_analyzer.py:1914:36: PLR2004 Magic value used in comparison, consider replacing `30` with a constant variable
     |
1912 |         # Check for low-quality documentation
1913 |         for doc in docs:
1914 |             if doc.quality_score < 30:
     |                                    ^^ PLR2004
1915 |                 issues.append(
1916 |                     DocumentationIssue(
     |

.github/scripts/analyzers/documentation_analyzer.py:1925:33: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
     |
1923 |                 )
1924 |
1925 |             if doc.word_count < 50:
     |                                 ^^ PLR2004
1926 |                 issues.append(
1927 |                     DocumentationIssue(
     |

.github/scripts/analyzers/documentation_analyzer.py:1949:18: PTH123 `open()` should be replaced by `Path.open()`
     |
1947 |         """Export analysis results to JSON file."""
1948 |         try:
1949 |             with open(output_path, "w", encoding="utf-8") as f:
     |                  ^^^^ PTH123
1950 |                 json.dump(analysis_results, f, indent=2, default=str)
1951 |             logger.info(f"Analysis results exported to {output_path}")
     |

.github/scripts/analyzers/documentation_analyzer.py:1955:9: PLR0912 Too many branches (16 > 12)
     |
1953 |             logger.error(f"Error exporting analysis: {e}")
1954 |
1955 |     def generate_report(self, analysis_results: dict[str, Any]) -> str:
     |         ^^^^^^^^^^^^^^^ PLR0912
1956 |         """Generate a comprehensive markdown report."""
1957 |         report = []
     |

.github/scripts/analyzers/documentation_analyzer.py:1955:9: PLR0915 Too many statements (60 > 50)
     |
1953 |             logger.error(f"Error exporting analysis: {e}")
1954 |
1955 |     def generate_report(self, analysis_results: dict[str, Any]) -> str:
     |         ^^^^^^^^^^^^^^^ PLR0915
1956 |         """Generate a comprehensive markdown report."""
1957 |         report = []
     |

.github/scripts/analyzers/documentation_analyzer.py:2074:14: PTH123 `open()` should be replaced by `Path.open()`
     |
2072 |     if args.report:
2073 |         report = system.generate_report(results)
2074 |         with open(args.report, "w", encoding="utf-8") as f:
     |              ^^^^ PTH123
2075 |             f.write(report)
     |

.github/scripts/analyzers/security_analyzer.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | import re
 9 |
10 | from ..core.interfaces import CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from .base_analyzer import AnalysisStrategy, AnalyzerContext
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/security_analyzer.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | import re
 9 |
10 | from ..core.interfaces import CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from .base_analyzer import AnalysisStrategy, AnalyzerContext
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/security_analyzer.py:207:13: PLW2901 `for` loop variable `line` overwritten by assignment target
    |
206 |         for line_num, line in enumerate(lines, 1):
207 |             line = line.strip()
    |             ^^^^ PLW2901
208 |             if not line or line.startswith("#"):
209 |                 continue
    |

.github/scripts/analyzers/security_analyzer.py:236:41: ARG002 Unused method argument: `context`
    |
234 |         return issues
235 |
236 |     async def _check_npm_packages(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                                         ^^^^^^^ ARG002
237 |         """Check package.json for vulnerabilities."""
238 |         # Implementation would parse JSON and check dependencies
    |

.github/scripts/analyzers/security_analyzer.py:241:38: ARG002 Unused method argument: `context`
    |
239 |         return []
240 |
241 |     async def _check_ruby_gems(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                                      ^^^^^^^ ARG002
242 |         """Check Gemfile for vulnerabilities."""
243 |         return []
    |

.github/scripts/analyzers/security_analyzer.py:245:39: ARG002 Unused method argument: `context`
    |
243 |         return []
244 |
245 |     async def _check_go_modules(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                                       ^^^^^^^ ARG002
246 |         """Check go.mod for vulnerabilities."""
247 |         return []
    |

.github/scripts/analyzers/security_analyzer.py:249:47: ARG002 Unused method argument: `context`
    |
247 |         return []
248 |
249 |     async def _check_maven_dependencies(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                                               ^^^^^^^ ARG002
250 |         """Check pom.xml for vulnerabilities."""
251 |         return []
    |

.github/scripts/analyzers/security_analyzer.py:253:48: ARG002 Unused method argument: `context`
    |
251 |         return []
252 |
253 |     async def _check_gradle_dependencies(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                                                ^^^^^^^ ARG002
254 |         """Check build.gradle for vulnerabilities."""
255 |         return []
    |

.github/scripts/analyzers/security_analyzer.py:330:56: ARG002 Unused method argument: `context`
    |
328 |         return issues
329 |
330 |     async def _check_javascript_input_validation(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                                                        ^^^^^^^ ARG002
331 |         """Check JavaScript code for input validation issues."""
332 |         # Implementation for JavaScript
    |

.github/scripts/analyzers/style_analyzer.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | import re
 9 |
10 | from ..core.interfaces import CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from .base_analyzer import AnalysisStrategy, AnalyzerContext
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/style_analyzer.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | import re
 9 |
10 | from ..core.interfaces import CodeIssue, IssueLevel
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from .base_analyzer import AnalysisStrategy, AnalyzerContext
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/analyzers/style_analyzer.py:26:55: PLR2004 Magic value used in comparison, consider replacing `120` with a constant variable
   |
24 |                 {
25 |                     "name": "line_length",
26 |                     "check": lambda line: len(line) > 120,
   |                                                       ^^^ PLR2004
27 |                     "message": "Line too long ({length} > 120 characters)",
28 |                     "level": IssueLevel.INFO,
   |

.github/scripts/analyzers/style_analyzer.py:53:55: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
   |
51 |                 {
52 |                     "name": "line_length",
53 |                     "check": lambda line: len(line) > 100,
   |                                                       ^^^ PLR2004
54 |                     "message": "Line too long ({length} > 100 characters)",
55 |                     "level": IssueLevel.INFO,
   |

.github/scripts/analyzers/style_analyzer.py:94:94: F821 Undefined name `Optional`
   |
92 |         return issues
93 |
94 |     def _check_rule(self, rule: dict, line: str, line_num: int, context: AnalyzerContext) -> Optional[CodeIssue]:
   |                                                                                              ^^^^^^^^ F821
95 |         """Check a single style rule."""
96 |         # Simple check function
   |

.github/scripts/analyzers/style_analyzer.py:199:33: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
197 |                 complexity = self._calculate_complexity(func)
198 |
199 |                 if complexity > 10:
    |                                 ^^ PLR2004
200 |                     issues.append(
201 |                         CodeIssue(
    |

.github/scripts/analyzers/style_analyzer.py:286:25: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
    |
284 |             length = func["end_line"] - func["start_line"] + 1
285 |
286 |             if length > 50:
    |                         ^^ PLR2004
287 |                 issues.append(
288 |                     CodeIssue(
    |

.github/scripts/analyzers/style_analyzer.py:315:35: PLR2004 Magic value used in comparison, consider replacing `300` with a constant variable
    |
313 |                     if current_class:
314 |                         size = line_num - current_class["start_line"]
315 |                         if size > 300:
    |                                   ^^^ PLR2004
316 |                             issues.append(
317 |                                 CodeIssue(
    |

.github/scripts/analyzers/style_analyzer.py:333:27: PLR2004 Magic value used in comparison, consider replacing `300` with a constant variable
    |
331 |             if current_class:
332 |                 size = len(lines) - current_class["start_line"] + 1
333 |                 if size > 300:
    |                           ^^^ PLR2004
334 |                     issues.append(
335 |                         CodeIssue(
    |

.github/scripts/analyzers/style_analyzer.py:421:28: ARG002 Unused method argument: `context`
    |
419 |         return issues
420 |
421 |     def _check_jsdoc(self, context: AnalyzerContext) -> list[CodeIssue]:
    |                            ^^^^^^^ ARG002
422 |         """Check JSDoc documentation."""
423 |         # Implementation for JavaScript/TypeScript
    |

.github/scripts/api/diagnostic_endpoints.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from fastapi import APIRouter, Depends, HTTPException, Query
17 |
18 | from ..core.container import ServiceContainer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
20 | from ..core.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ..core.container import ServiceContainer
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ..core.container import ServiceContainer
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ..core.container import ServiceContainer
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ..core.container import ServiceContainer
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ..core.container import ServiceContainer
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ..core.container import ServiceContainer
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
20 | from ..core.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 |
23 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 |
23 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 |
23 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ..core.interfaces import CacheInterface, DatabaseInterface, GitHubClientInterface, MetricsInterface, QueueInterface
20 | from ..core.logging import get_logger
21 | from ..diagnostics.diagnostic_collector import DiagnosticCollector, ErrorAnalyzer, PerformanceProfiler, RequestTracer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 |
23 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/api/diagnostic_endpoints.py:28:60: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
28 | def get_diagnostic_collector(container: ServiceContainer = Depends()) -> DiagnosticCollector:
   |                                                            ^^^^^^^^^ B008
29 |     """Get diagnostic collector instance."""
30 |     database = container.resolve(DatabaseInterface)
   |

.github/scripts/api/diagnostic_endpoints.py:35:57: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
35 | def get_request_tracer(collector: DiagnosticCollector = Depends(get_diagnostic_collector)) -> RequestTracer:
   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
36 |     """Get request tracer instance."""
37 |     return RequestTracer(collector)
   |

.github/scripts/api/diagnostic_endpoints.py:51:63: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
50 | @router.get("/health/detailed")
51 | async def detailed_health_check(container: ServiceContainer = Depends()) -> dict[str, Any]:
   |                                                               ^^^^^^^^^ B008
52 |     """
53 |     Detailed health check with component status.
   |

.github/scripts/api/diagnostic_endpoints.py:138:61: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
137 | @router.get("/system-state")
138 | async def get_system_state(collector: DiagnosticCollector = Depends(get_diagnostic_collector)) -> dict[str, Any]:
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
139 |     """Get current system state snapshot."""
140 |     return collector.collect_system_state()
    |

.github/scripts/api/diagnostic_endpoints.py:145:59: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
143 | @router.get("/diagnostics/{correlation_id}")
144 | async def get_diagnostic_data(
145 |     correlation_id: str, collector: DiagnosticCollector = Depends(get_diagnostic_collector)
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
146 | ) -> dict[str, Any]:
147 |     """Get diagnostic data for a specific correlation ID."""
    |

.github/scripts/api/diagnostic_endpoints.py:155:74: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
154 | @router.get("/trace/{correlation_id}")
155 | async def get_request_trace(correlation_id: str, tracer: RequestTracer = Depends(get_request_tracer)) -> dict[str, Any]:
    |                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
156 |     """Get request trace for a correlation ID."""
157 |     trace = tracer.get_trace(correlation_id)
    |

.github/scripts/api/diagnostic_endpoints.py:164:55: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
163 | @router.get("/errors/summary")
164 | async def get_error_summary(analyzer: ErrorAnalyzer = Depends(get_error_analyzer)) -> dict[str, Any]:
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
165 |     """Get error analysis summary."""
166 |     return analyzer.get_error_summary()
    |

.github/scripts/api/diagnostic_endpoints.py:170:67: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
169 | @router.get("/performance/summary")
170 | async def get_performance_summary(profiler: PerformanceProfiler = Depends(get_performance_profiler)) -> dict[str, Any]:
    |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
171 |     """Get performance profiling summary."""
172 |     summary = profiler.get_performance_summary()
    |

.github/scripts/api/diagnostic_endpoints.py:179:61: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
178 | @router.get("/metrics/current")
179 | async def get_current_metrics(container: ServiceContainer = Depends()) -> dict[str, Any]:
    |                                                             ^^^^^^^^^ B008
180 |     """Get current metrics snapshot."""
181 |     metrics = container.resolve(MetricsInterface)
    |

.github/scripts/api/diagnostic_endpoints.py:206:38: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
204 |     operation: str,
205 |     duration_seconds: int = Query(default=60, le=300),
206 |     collector: DiagnosticCollector = Depends(get_diagnostic_collector),
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
207 | ) -> dict[str, Any]:
208 |     """
    |

.github/scripts/api/diagnostic_endpoints.py:225:5: RUF006 Store a reference to the return value of `asyncio.create_task`
    |
223 |         collector.end_diagnostic(context.correlation_id)
224 |
225 |     asyncio.create_task(end_profiling())
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF006
226 |
227 |     return {
    |

.github/scripts/api/diagnostic_endpoints.py:238:38: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
236 | @router.get("/active-diagnostics")
237 | async def get_active_diagnostics(
238 |     collector: DiagnosticCollector = Depends(get_diagnostic_collector),
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
239 | ) -> list[dict[str, Any]]:
240 |     """Get list of active diagnostic sessions."""
    |

.github/scripts/api/diagnostic_endpoints.py:259:83: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
258 | @router.post("/test-connection/{component}")
259 | async def test_component_connection(component: str, container: ServiceContainer = Depends()) -> dict[str, Any]:
    |                                                                                   ^^^^^^^^^ B008
260 |     """Test connection to a specific component."""
261 |     start_time = datetime.utcnow()
    |

.github/scripts/api/diagnostic_endpoints.py:303:92: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
301 | @router.delete("/diagnostics/cleanup")
302 | async def cleanup_old_diagnostics(
303 |     older_than_hours: int = Query(default=24, ge=1, le=168), container: ServiceContainer = Depends()
    |                                                                                            ^^^^^^^^^ B008
304 | ) -> dict[str, Any]:
305 |     """Clean up old diagnostic data."""
    |

.github/scripts/claude_kiro_next.py:28:18: PTH123 `open()` should be replaced by `Path.open()`
   |
26 |                 continue
27 |
28 |             with open(tasks_file) as f:
   |                  ^^^^ PTH123
29 |                 content = f.read()
30 |                 lines = content.split("\n")
   |

.github/scripts/claude_kiro_next.py:78:18: PTH123 `open()` should be replaced by `Path.open()`
   |
76 |         """Mark a task as complete in the file."""
77 |         try:
78 |             with open(task["file"]) as f:
   |                  ^^^^ PTH123
79 |                 lines = f.readlines()
   |

.github/scripts/claude_kiro_next.py:84:18: PTH123 `open()` should be replaced by `Path.open()`
   |
82 |             lines[task["line"]] = lines[task["line"]].replace("- [ ]", "- [x]", 1)
83 |
84 |             with open(task["file"], "w") as f:
   |                  ^^^^ PTH123
85 |                 f.writelines(lines)
   |

.github/scripts/code_analyzer.py:118:80: ARG002 Unused method argument: `diff`
    |
116 |         self.temp_dir = None
117 |
118 |     def analyze_pr(self, pr_data: dict[str, Any], files: list[dict[str, Any]], diff: str) -> list[CodeIssue]:
    |                                                                                ^^^^ ARG002
119 |         """Analyze a pull request and return a list of issues."""
120 |         logger.info(f"Analyzing PR #{pr_data['number']} in {pr_data['repository']['full_name']}")
    |

.github/scripts/code_analyzer.py:156:25: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
155 |             # Create directory structure
156 |             full_path = os.path.join(self.temp_dir, file_path)
    |                         ^^^^^^^^^^^^ PTH118
157 |             os.makedirs(os.path.dirname(full_path), exist_ok=True)
    |

.github/scripts/code_analyzer.py:157:13: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
155 |             # Create directory structure
156 |             full_path = os.path.join(self.temp_dir, file_path)
157 |             os.makedirs(os.path.dirname(full_path), exist_ok=True)
    |             ^^^^^^^^^^^ PTH103
158 |
159 |             # Write file content
    |

.github/scripts/code_analyzer.py:157:25: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
    |
155 |             # Create directory structure
156 |             full_path = os.path.join(self.temp_dir, file_path)
157 |             os.makedirs(os.path.dirname(full_path), exist_ok=True)
    |                         ^^^^^^^^^^^^^^^ PTH120
158 |
159 |             # Write file content
    |

.github/scripts/code_analyzer.py:170:18: PTH123 `open()` should be replaced by `Path.open()`
    |
168 |                     logger.warning(f"Error fetching file content: {e!s}")
169 |
170 |             with open(full_path, "w") as f:
    |                  ^^^^ PTH123
171 |                 f.write(content)
    |

.github/scripts/code_analyzer.py:187:24: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    |
186 |             # Determine file type
187 |             file_ext = os.path.splitext(file_path)[1].lower()
    |                        ^^^^^^^^^^^^^^^^ PTH122
188 |
189 |             # Run appropriate syntax checker based on file type
    |

.github/scripts/code_analyzer.py:203:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
201 |     def _check_python_syntax(self, file_path: str) -> None:
202 |         """Check Python syntax using pyflakes."""
203 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
204 |
205 |         try:
    |

.github/scripts/code_analyzer.py:207:18: PTH123 `open()` should be replaced by `Path.open()`
    |
205 |         try:
206 |             # Use Python's built-in compile function to check syntax
207 |             with open(full_path) as f:
    |                  ^^^^ PTH123
208 |                 source = f.read()
    |

.github/scripts/code_analyzer.py:228:26: S603 `subprocess` call: check for execution of untrusted input
    |
226 |             # Try to run pyflakes if available
227 |             try:
228 |                 result = subprocess.run(["pyflakes", full_path], capture_output=True, text=True, check=False)
    |                          ^^^^^^^^^^^^^^ S603
229 |
230 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:228:41: S607 Starting a process with a partial executable path
    |
226 |             # Try to run pyflakes if available
227 |             try:
228 |                 result = subprocess.run(["pyflakes", full_path], capture_output=True, text=True, check=False)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^ S607
229 |
230 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:255:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
253 |     def _check_javascript_syntax(self, file_path: str) -> None:
254 |         """Check JavaScript/TypeScript syntax using ESLint if available."""
255 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
256 |
257 |         try:
    |

.github/scripts/code_analyzer.py:260:26: S603 `subprocess` call: check for execution of untrusted input
    |
258 |             # Try to run ESLint if available
259 |             try:
260 |                 result = subprocess.run(
    |                          ^^^^^^^^^^^^^^ S603
261 |                     ["eslint", "--format", "json", full_path], capture_output=True, text=True, check=False
262 |                 )
    |

.github/scripts/code_analyzer.py:261:21: S607 Starting a process with a partial executable path
    |
259 |             try:
260 |                 result = subprocess.run(
261 |                     ["eslint", "--format", "json", full_path], capture_output=True, text=True, check=False
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
262 |                 )
    |

.github/scripts/code_analyzer.py:299:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
297 |     def _check_java_syntax(self, file_path: str) -> None:
298 |         """Check Java syntax using javac if available."""
299 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
300 |
301 |         try:
    |

.github/scripts/code_analyzer.py:304:26: S603 `subprocess` call: check for execution of untrusted input
    |
302 |             # Try to run javac if available
303 |             try:
304 |                 result = subprocess.run(["javac", "-Xlint:all", full_path], capture_output=True, text=True, check=False)
    |                          ^^^^^^^^^^^^^^ S603
305 |
306 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:304:41: S607 Starting a process with a partial executable path
    |
302 |             # Try to run javac if available
303 |             try:
304 |                 result = subprocess.run(["javac", "-Xlint:all", full_path], capture_output=True, text=True, check=False)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
305 |
306 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:346:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
344 |     def _check_go_syntax(self, file_path: str) -> None:
345 |         """Check Go syntax using go vet if available."""
346 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
347 |
348 |         try:
    |

.github/scripts/code_analyzer.py:351:26: S603 `subprocess` call: check for execution of untrusted input
    |
349 |             # Try to run go vet if available
350 |             try:
351 |                 result = subprocess.run(["go", "vet", full_path], capture_output=True, text=True, check=False)
    |                          ^^^^^^^^^^^^^^ S603
352 |
353 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:351:41: S607 Starting a process with a partial executable path
    |
349 |             # Try to run go vet if available
350 |             try:
351 |                 result = subprocess.run(["go", "vet", full_path], capture_output=True, text=True, check=False)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ S607
352 |
353 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:379:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
377 |     def _check_ruby_syntax(self, file_path: str) -> None:
378 |         """Check Ruby syntax using ruby -c if available."""
379 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
380 |
381 |         try:
    |

.github/scripts/code_analyzer.py:384:26: S603 `subprocess` call: check for execution of untrusted input
    |
382 |             # Try to run ruby -c if available
383 |             try:
384 |                 result = subprocess.run(["ruby", "-c", full_path], capture_output=True, text=True, check=False)
    |                          ^^^^^^^^^^^^^^ S603
385 |
386 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:384:41: S607 Starting a process with a partial executable path
    |
382 |             # Try to run ruby -c if available
383 |             try:
384 |                 result = subprocess.run(["ruby", "-c", full_path], capture_output=True, text=True, check=False)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ S607
385 |
386 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:424:24: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    |
423 |             # Determine file type
424 |             file_ext = os.path.splitext(file_path)[1].lower()
    |                        ^^^^^^^^^^^^^^^^ PTH122
425 |
426 |             # Run appropriate style checker based on file type
    |

.github/scripts/code_analyzer.py:436:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
434 |     def _check_python_style(self, file_path: str) -> None:
435 |         """Check Python style using flake8 if available."""
436 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
437 |
438 |         try:
    |

.github/scripts/code_analyzer.py:441:26: S603 `subprocess` call: check for execution of untrusted input
    |
439 |             # Try to run flake8 if available
440 |             try:
441 |                 result = subprocess.run(
    |                          ^^^^^^^^^^^^^^ S603
442 |                     ["flake8", "--format", "default", full_path], capture_output=True, text=True, check=False
443 |                 )
    |

.github/scripts/code_analyzer.py:442:21: S607 Starting a process with a partial executable path
    |
440 |             try:
441 |                 result = subprocess.run(
442 |                     ["flake8", "--format", "default", full_path], capture_output=True, text=True, check=False
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
443 |                 )
    |

.github/scripts/code_analyzer.py:478:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
476 |     def _check_javascript_style(self, file_path: str) -> None:
477 |         """Check JavaScript/TypeScript style using prettier if available."""
478 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
479 |
480 |         try:
    |

.github/scripts/code_analyzer.py:483:26: S603 `subprocess` call: check for execution of untrusted input
    |
481 |             # Try to run prettier if available
482 |             try:
483 |                 result = subprocess.run(["prettier", "--check", full_path], capture_output=True, text=True, check=False)
    |                          ^^^^^^^^^^^^^^ S603
484 |
485 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:483:41: S607 Starting a process with a partial executable path
    |
481 |             # Try to run prettier if available
482 |             try:
483 |                 result = subprocess.run(["prettier", "--check", full_path], capture_output=True, text=True, check=False)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
484 |
485 |                 if result.returncode != 0:
    |

.github/scripts/code_analyzer.py:507:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
505 |     def _check_java_style(self, file_path: str) -> None:
506 |         """Check Java style using checkstyle if available."""
507 |         full_path = os.path.join(self.temp_dir, file_path)
    |                     ^^^^^^^^^^^^ PTH118
508 |
509 |         try:
    |

.github/scripts/code_analyzer.py:512:26: S603 `subprocess` call: check for execution of untrusted input
    |
510 |             # Try to run checkstyle if available
511 |             try:
512 |                 result = subprocess.run(
    |                          ^^^^^^^^^^^^^^ S603
513 |                     ["checkstyle", "-f", "plain", full_path], capture_output=True, text=True, check=False
514 |                 )
    |

.github/scripts/code_analyzer.py:513:21: S607 Starting a process with a partial executable path
    |
511 |             try:
512 |                 result = subprocess.run(
513 |                     ["checkstyle", "-f", "plain", full_path], capture_output=True, text=True, check=False
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
514 |                 )
    |

.github/scripts/code_analyzer.py:554:17: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
552 |         try:
553 |             python_files = [
554 |                 os.path.join(self.temp_dir, file.get("filename"))
    |                 ^^^^^^^^^^^^ PTH118
555 |                 for file in files
556 |                 if file.get("filename", "").endswith(".py") and file.get("status") != "removed"
    |

.github/scripts/code_analyzer.py:561:30: S603 `subprocess` call: check for execution of untrusted input
    |
559 |             if python_files:
560 |                 try:
561 |                     result = subprocess.run(
    |                              ^^^^^^^^^^^^^^ S603
562 |                         ["bandit", "-f", "json", "-r", *python_files], capture_output=True, text=True, check=False
563 |                     )
    |

.github/scripts/code_analyzer.py:562:25: S607 Starting a process with a partial executable path
    |
560 |                 try:
561 |                     result = subprocess.run(
562 |                         ["bandit", "-f", "json", "-r", *python_files], capture_output=True, text=True, check=False
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
563 |                     )
    |

.github/scripts/code_analyzer.py:656:25: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
655 |             # Get file content
656 |             full_path = os.path.join(self.temp_dir, file_path)
    |                         ^^^^^^^^^^^^ PTH118
657 |             try:
658 |                 with open(full_path) as f:
    |

.github/scripts/code_analyzer.py:658:22: PTH123 `open()` should be replaced by `Path.open()`
    |
656 |             full_path = os.path.join(self.temp_dir, file_path)
657 |             try:
658 |                 with open(full_path) as f:
    |                      ^^^^ PTH123
659 |                     content = f.read()
    |

.github/scripts/code_analyzer.py:740:24: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    |
739 |             # Get file extension
740 |             file_ext = os.path.splitext(file_path)[1].lower()
    |                        ^^^^^^^^^^^^^^^^ PTH122
741 |
742 |             # Get file content
    |

.github/scripts/code_analyzer.py:743:25: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
742 |             # Get file content
743 |             full_path = os.path.join(self.temp_dir, file_path)
    |                         ^^^^^^^^^^^^ PTH118
744 |             try:
745 |                 with open(full_path) as f:
    |

.github/scripts/code_analyzer.py:745:22: PTH123 `open()` should be replaced by `Path.open()`
    |
743 |             full_path = os.path.join(self.temp_dir, file_path)
744 |             try:
745 |                 with open(full_path) as f:
    |                      ^^^^ PTH123
746 |                     content = f.read()
    |

.github/scripts/code_analyzer.py:795:24: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
793 |     import sys
794 |
795 |     if len(sys.argv) < 2:
    |                        ^ PLR2004
796 |         sys.exit(1)
    |

.github/scripts/code_analyzer.py:807:32: PTH119 `os.path.basename()` should be replaced by `Path.name`
    |
806 |     # Create a mock file structure
807 |     mock_files = [{"filename": os.path.basename(file_path), "status": "modified", "raw_url": f"file://{file_path}"}]
    |                                ^^^^^^^^^^^^^^^^ PTH119
808 |
809 |     # Analyze the file
    |

.github/scripts/comment_generator.py:66:58: ARG002 Unused method argument: `line_number`
   |
64 |         return {"summary_comment": summary_comment, "file_comments": file_comments}
65 |
66 |     def _generate_comment_for_line(self, file_path: str, line_number: int, issues: list[dict[str, Any]]) -> str:
   |                                                          ^^^^^^^^^^^ ARG002
67 |         """Generate a comment for a specific line with issues."""
68 |         if not issues:
   |

.github/scripts/comment_generator.py:75:23: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
   |
74 |         # Get file extension
75 |         _, file_ext = os.path.splitext(file_path)
   |                       ^^^^^^^^^^^^^^^^ PTH122
76 |
77 |         # Start with a header
   |

.github/scripts/comment_generator.py:143:55: ARG002 Unused method argument: `file_ext`
    |
141 |             return self._get_general_explanation(rule_id, file_ext)
142 |
143 |     def _get_security_explanation(self, rule_id: str, file_ext: str) -> str:
    |                                                       ^^^^^^^^ ARG002
144 |         """Get an explanation for a security issue."""
145 |         explanations = {
    |

.github/scripts/comment_generator.py:160:58: ARG002 Unused method argument: `file_ext`
    |
158 |         )
159 |
160 |     def _get_performance_explanation(self, rule_id: str, file_ext: str) -> str:
    |                                                          ^^^^^^^^ ARG002
161 |         """Get an explanation for a performance issue."""
162 |         explanations = {
    |

.github/scripts/comment_generator.py:227:54: ARG002 Unused method argument: `file_ext`
    |
225 |         )
226 |
227 |     def _get_general_explanation(self, rule_id: str, file_ext: str) -> str:
    |                                                      ^^^^^^^^ ARG002
228 |         """Get a general explanation for an issue."""
229 |         explanations = {
    |

.github/scripts/comment_generator.py:334:24: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
332 |     import sys
333 |
334 |     if len(sys.argv) < 2:
    |                        ^ PLR2004
335 |         sys.exit(1)
    |

.github/scripts/comment_generator.py:340:14: PTH123 `open()` should be replaced by `Path.open()`
    |
339 |     try:
340 |         with open(issues_file) as f:
    |              ^^^^ PTH123
341 |             issues = json.load(f)
    |

.github/scripts/config_cli.py:40:24: ARG002 Unused method argument: `params`
   |
38 |         self.config_path = config_path
39 |
40 |     def get(self, url, params=None):
   |                        ^^^^^^ ARG002
41 |         """Mock GET request."""
42 |         if "contents/.kiro/config/github.yml" in url and self.config_path:
   |

.github/scripts/config_cli.py:44:22: PTH123 `open()` should be replaced by `Path.open()`
   |
42 |         if "contents/.kiro/config/github.yml" in url and self.config_path:
43 |             try:
44 |                 with open(self.config_path) as f:
   |                      ^^^^ PTH123
45 |                     content = f.read()
   |

.github/scripts/config_cli.py:53:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
51 |                 return {"content": encoded_content, "sha": "mock-sha"}
52 |             except FileNotFoundError:
53 |                 raise Exception("File not found")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
54 |
55 |         raise Exception("Not implemented")
   |

.github/scripts/config_cli.py:61:27: F821 Undefined name `base64`
   |
59 |         if "contents/.kiro/config/github.yml" in url and self.config_path:
60 |             try:
61 |                 content = base64.b64decode(json["content"]).decode("utf-8")
   |                           ^^^^^^ F821
62 |
63 |                 # Write to file
   |

.github/scripts/config_cli.py:64:22: PTH123 `open()` should be replaced by `Path.open()`
   |
63 |                 # Write to file
64 |                 with open(self.config_path, "w") as f:
   |                      ^^^^ PTH123
65 |                     f.write(content)
   |

.github/scripts/config_cli.py:69:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
67 |                 return {"content": {"sha": "new-mock-sha"}}
68 |             except Exception as e:
69 |                 raise Exception(f"Error writing file: {e!s}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
70 |
71 |         raise Exception("Not implemented")
   |

.github/scripts/config_cli.py:163:28: S113 Probable use of `requests` call without timeout
    |
161 |                 import requests
162 |
163 |                 response = requests.put(url, headers=self.headers, json=json)
    |                            ^^^^^^^^^^^^ S113
164 |                 response.raise_for_status()
165 |                 return response.json()
    |

.github/scripts/config_cli.py:176:22: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
174 |     """Parse repository string into owner and name."""
175 |     parts = repo.split("/")
176 |     if len(parts) != 2:
    |                      ^ PLR2004
177 |         logger.error("Repository must be in format owner/name")
178 |         sys.exit(1)
    |

.github/scripts/config_cli.py:187:18: PTH123 `open()` should be replaced by `Path.open()`
    |
185 |     if data_file:
186 |         try:
187 |             with open(data_file) as f:
    |                  ^^^^ PTH123
188 |                 data_str = f.read()
189 |         except Exception as e:
    |

.github/scripts/config_cli.py:218:18: PTH123 `open()` should be replaced by `Path.open()`
    |
216 |         # Write to file or print to stdout
217 |         if args.output:
218 |             with open(args.output, "w") as f:
    |                  ^^^^ PTH123
219 |                 f.write(output)
220 |             logger.info(f"Configuration written to {args.output}")
    |

.github/scripts/config_cli.py:273:14: PTH123 `open()` should be replaced by `Path.open()`
    |
271 |     try:
272 |         # Load configuration
273 |         with open(args.config) as f:
    |              ^^^^ PTH123
274 |             config = json.load(f) if args.config.endswith(".json") else yaml.safe_load(f)
    |

.github/scripts/config_cli.py:347:18: PTH123 `open()` should be replaced by `Path.open()`
    |
345 |         # Write to file or print to stdout
346 |         if args.output:
347 |             with open(args.output, "w") as f:
    |                  ^^^^ PTH123
348 |                 f.write(output)
349 |             logger.info(f"Team standards written to {args.output}")
    |

.github/scripts/config_manager.py:24:23: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
23 | # Constants
24 | DEFAULT_CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.yml")
   |                       ^^^^^^^^^^^^ PTH118
25 | CONFIG_SCHEMA_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.schema.json")
   |

.github/scripts/config_manager.py:24:36: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
23 | # Constants
24 | DEFAULT_CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.yml")
   |                                    ^^^^^^^^^^^^^^^ PTH120
25 | CONFIG_SCHEMA_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.schema.json")
   |

.github/scripts/config_manager.py:25:22: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
23 | # Constants
24 | DEFAULT_CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.yml")
25 | CONFIG_SCHEMA_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.schema.json")
   |                      ^^^^^^^^^^^^ PTH118
   |

.github/scripts/config_manager.py:25:35: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
23 | # Constants
24 | DEFAULT_CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.yml")
25 | CONFIG_SCHEMA_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "config", "github.schema.json")
   |                                   ^^^^^^^^^^^^^^^ PTH120
   |

.github/scripts/config_manager.py:40:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
38 |         """Load the default configuration."""
39 |         try:
40 |             if os.path.exists(DEFAULT_CONFIG_PATH):
   |                ^^^^^^^^^^^^^^ PTH110
41 |                 with open(DEFAULT_CONFIG_PATH) as f:
42 |                     return yaml.safe_load(f)
   |

.github/scripts/config_manager.py:41:22: PTH123 `open()` should be replaced by `Path.open()`
   |
39 |         try:
40 |             if os.path.exists(DEFAULT_CONFIG_PATH):
41 |                 with open(DEFAULT_CONFIG_PATH) as f:
   |                      ^^^^ PTH123
42 |                     return yaml.safe_load(f)
43 |         except Exception as e:
   |

.github/scripts/config_manager.py:68:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
66 |         """Load the configuration schema."""
67 |         try:
68 |             if os.path.exists(CONFIG_SCHEMA_PATH):
   |                ^^^^^^^^^^^^^^ PTH110
69 |                 with open(CONFIG_SCHEMA_PATH) as f:
70 |                     return json.load(f)
   |

.github/scripts/config_manager.py:69:22: PTH123 `open()` should be replaced by `Path.open()`
   |
67 |         try:
68 |             if os.path.exists(CONFIG_SCHEMA_PATH):
69 |                 with open(CONFIG_SCHEMA_PATH) as f:
   |                      ^^^^ PTH123
70 |                     return json.load(f)
71 |         except Exception as e:
   |

.github/scripts/config_manager.py:162:9: PLR0912 Too many branches (27 > 12)
    |
160 |         return result
161 |
162 |     def _validate_config(self, config: dict[str, Any]) -> bool:
    |         ^^^^^^^^^^^^^^^^ PLR0912
163 |         """Validate a configuration against the schema."""
164 |         try:
    |

.github/scripts/config_manager.py:162:9: PLR0915 Too many statements (65 > 50)
    |
160 |         return result
161 |
162 |     def _validate_config(self, config: dict[str, Any]) -> bool:
    |         ^^^^^^^^^^^^^^^^ PLR0915
163 |         """Validate a configuration against the schema."""
164 |         try:
    |

.github/scripts/config_manager.py:299:13: E722 Do not use bare `except`
    |
297 |                 logger.warning(f"Configuration file already exists in {repo_owner}/{repo_name}")
298 |                 return False
299 |             except:
    |             ^^^^^^ E722
300 |                 # File doesn't exist, create it
301 |                 pass
    |

.github/scripts/config_manager.py:299:13: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
297 |                   logger.warning(f"Configuration file already exists in {repo_owner}/{repo_name}")
298 |                   return False
299 | /             except:
300 | |                 # File doesn't exist, create it
301 | |                 pass
    | |____________________^ S110
302 |
303 |               # Create the file
    |

.github/scripts/config_manager.py:346:13: E722 Do not use bare `except`
    |
344 |                 response = self.github.get(contents_url)
345 |                 sha = response.get("sha")
346 |             except:
    |             ^^^^^^ E722
347 |                 # File doesn't exist, create it instead
348 |                 return self.create_default_config(repo_owner, repo_name)
    |

.github/scripts/config_manager.py:566:24: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
564 |     import sys
565 |
566 |     if len(sys.argv) < 3:
    |                        ^ PLR2004
567 |         sys.exit(1)
    |

.github/scripts/config_manager.py:574:23: ARG002 Unused method argument: `url`
    |
572 |     # Create a mock GitHub client
573 |     class MockGitHubClient:
574 |         def get(self, url, params=None):
    |                       ^^^ ARG002
575 |             raise Exception("File not found")
    |

.github/scripts/config_manager.py:574:28: ARG002 Unused method argument: `params`
    |
572 |     # Create a mock GitHub client
573 |     class MockGitHubClient:
574 |         def get(self, url, params=None):
    |                            ^^^^^^ ARG002
575 |             raise Exception("File not found")
    |

.github/scripts/config_manager.py:577:23: ARG002 Unused method argument: `url`
    |
575 |             raise Exception("File not found")
576 |
577 |         def put(self, url, json=None):
    |                       ^^^ ARG002
578 |             return {}
    |

.github/scripts/config_manager.py:577:28: ARG002 Unused method argument: `json`
    |
575 |             raise Exception("File not found")
576 |
577 |         def put(self, url, json=None):
    |                            ^^^^ ARG002
578 |             return {}
    |

.github/scripts/context_manager.py:62:1: W293 Blank line contains whitespace
   |
60 |     relevance_score: float = 0.0
61 |     token_count: int = 0
62 |     
   | ^^^^ W293
63 |     def to_dict(self) -> Dict[str, Any]:
64 |         """Convert to dictionary for storage"""
   |
   = help: Remove whitespace from blank line

.github/scripts/context_manager.py:76:1: W293 Blank line contains whitespace
   |
74 |             "token_count": self.token_count
75 |         }
76 |     
   | ^^^^ W293
77 |     @classmethod
78 |     def from_dict(cls, data: Dict[str, Any]) -> 'ContextItem':
   |
   = help: Remove whitespace from blank line

.github/scripts/context_manager.py:95:1: W293 Blank line contains whitespace
   |
93 | class ContextWindow:
94 |     """Manages a sliding context window with intelligent pruning"""
95 |     
   | ^^^^ W293
96 |     def __init__(self, max_tokens: int = 8000, target_tokens: int = 6000):
97 |         self.max_tokens = max_tokens
   |
   = help: Remove whitespace from blank line

.github/scripts/context_manager.py:101:1: W293 Blank line contains whitespace
    |
 99 |         self.items: List[ContextItem] = []
100 |         self.total_tokens = 0
101 |     
    | ^^^^ W293
102 |     def add_item(self, item: ContextItem) -> bool:
103 |         """Add item to context window"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:106:1: W293 Blank line contains whitespace
    |
104 |         if self.total_tokens + item.token_count > self.max_tokens:
105 |             self._prune_to_target()
106 |         
    | ^^^^^^^^ W293
107 |         if self.total_tokens + item.token_count <= self.max_tokens:
108 |             self.items.append(item)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:112:1: W293 Blank line contains whitespace
    |
110 |             return True
111 |         return False
112 |     
    | ^^^^ W293
113 |     def _prune_to_target(self):
114 |         """Prune context to target size based on relevance"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:117:1: W293 Blank line contains whitespace
    |
115 |         if self.total_tokens <= self.target_tokens:
116 |             return
117 |         
    | ^^^^^^^^ W293
118 |         # Sort by relevance score and recency
119 |         self.items.sort(
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:123:1: W293 Blank line contains whitespace
    |
121 |             reverse=True
122 |         )
123 |         
    | ^^^^^^^^ W293
124 |         # Keep most relevant items up to target tokens
125 |         new_items = []
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:127:1: W293 Blank line contains whitespace
    |
125 |         new_items = []
126 |         new_tokens = 0
127 |         
    | ^^^^^^^^ W293
128 |         for item in self.items:
129 |             if new_tokens + item.token_count <= self.target_tokens:
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:134:1: W293 Blank line contains whitespace
    |
132 |             else:
133 |                 break
134 |         
    | ^^^^^^^^ W293
135 |         self.items = new_items
136 |         self.total_tokens = new_tokens
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:137:1: W293 Blank line contains whitespace
    |
135 |         self.items = new_items
136 |         self.total_tokens = new_tokens
137 |     
    | ^^^^ W293
138 |     def get_context_string(self) -> str:
139 |         """Get formatted context string"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:148:1: W293 Blank line contains whitespace
    |
146 | class AdvancedContextManager:
147 |     """Advanced context management with semantic understanding"""
148 |     
    | ^^^^ W293
149 |     def __init__(self, redis_url: str = "redis://localhost:6379"):
150 |         self.redis_url = redis_url
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:155:1: W293 Blank line contains whitespace
    |
153 |         self.context_cache: Dict[str, ContextItem] = {}
154 |         self.embedding_cache: Dict[str, np.ndarray] = {}
155 |         
    | ^^^^^^^^ W293
156 |     async def initialize(self):
157 |         """Initialize Redis connection"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:159:1: W293 Blank line contains whitespace
    |
157 |         """Initialize Redis connection"""
158 |         self.redis = await aioredis.create_redis_pool(self.redis_url)
159 |     
    | ^^^^ W293
160 |     async def close(self):
161 |         """Close Redis connection"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:165:1: W293 Blank line contains whitespace
    |
163 |             self.redis.close()
164 |             await self.redis.wait_closed()
165 |     
    | ^^^^ W293
166 |     def _calculate_token_count(self, text: str) -> int:
167 |         """Estimate token count (rough approximation)"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:170:1: W293 Blank line contains whitespace
    |
168 |         # Rough estimation: 1 token ≈ 4 characters
169 |         return len(text) // 4
170 |     
    | ^^^^ W293
171 |     def _generate_embedding(self, text: str) -> np.ndarray:
172 |         """Generate sentence embedding for text"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:174:1: W293 Blank line contains whitespace
    |
172 |         """Generate sentence embedding for text"""
173 |         cache_key = hashlib.md5(text.encode()).hexdigest()
174 |         
    | ^^^^^^^^ W293
175 |         if cache_key in self.embedding_cache:
176 |             return self.embedding_cache[cache_key]
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:177:1: W293 Blank line contains whitespace
    |
175 |         if cache_key in self.embedding_cache:
176 |             return self.embedding_cache[cache_key]
177 |         
    | ^^^^^^^^ W293
178 |         embedding = self.model.encode([text])[0]
179 |         self.embedding_cache[cache_key] = embedding
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:180:1: W293 Blank line contains whitespace
    |
178 |         embedding = self.model.encode([text])[0]
179 |         self.embedding_cache[cache_key] = embedding
180 |         
    | ^^^^^^^^ W293
181 |         return embedding
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:182:1: W293 Blank line contains whitespace
    |
181 |         return embedding
182 |     
    | ^^^^ W293
183 |     def _calculate_relevance(
184 |         self,
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:193:1: W293 Blank line contains whitespace
    |
191 |         query_embedding = self._generate_embedding(query)
192 |         item_embedding = item.embedding or self._generate_embedding(item.content)
193 |         
    | ^^^^^^^^ W293
194 |         similarity = cosine_similarity(
195 |             query_embedding.reshape(1, -1),
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:198:1: W293 Blank line contains whitespace
    |
196 |             item_embedding.reshape(1, -1)
197 |         )[0][0]
198 |         
    | ^^^^^^^^ W293
199 |         # Type-based weight
200 |         type_weight = context_type_weight.get(item.type, 1.0)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:201:1: W293 Blank line contains whitespace
    |
199 |         # Type-based weight
200 |         type_weight = context_type_weight.get(item.type, 1.0)
201 |         
    | ^^^^^^^^ W293
202 |         # Recency factor (exponential decay)
203 |         age_hours = (datetime.utcnow() - item.accessed_at).total_seconds() / 3600
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:205:1: W293 Blank line contains whitespace
    |
203 |         age_hours = (datetime.utcnow() - item.accessed_at).total_seconds() / 3600
204 |         recency_factor = np.exp(-age_hours / 24)  # Half-life of 24 hours
205 |         
    | ^^^^^^^^ W293
206 |         # Access frequency factor
207 |         access_factor = min(1.0 + (item.access_count * 0.1), 2.0)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:208:1: W293 Blank line contains whitespace
    |
206 |         # Access frequency factor
207 |         access_factor = min(1.0 + (item.access_count * 0.1), 2.0)
208 |         
    | ^^^^^^^^ W293
209 |         # Combined relevance score
210 |         relevance = similarity * type_weight * recency_factor * access_factor
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:211:1: W293 Blank line contains whitespace
    |
209 |         # Combined relevance score
210 |         relevance = similarity * type_weight * recency_factor * access_factor
211 |         
    | ^^^^^^^^ W293
212 |         return relevance
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:213:1: W293 Blank line contains whitespace
    |
212 |         return relevance
213 |     
    | ^^^^ W293
214 |     async def add_context(
215 |         self,
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:229:1: W293 Blank line contains whitespace
    |
227 |             token_count=self._calculate_token_count(content)
228 |         )
229 |         
    | ^^^^^^^^ W293
230 |         # Generate embedding
231 |         item.embedding = self._generate_embedding(content)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:232:1: W293 Blank line contains whitespace
    |
230 |         # Generate embedding
231 |         item.embedding = self._generate_embedding(content)
232 |         
    | ^^^^^^^^ W293
233 |         # Store in cache and Redis
234 |         self.context_cache[context_id] = item
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:235:1: W293 Blank line contains whitespace
    |
233 |         # Store in cache and Redis
234 |         self.context_cache[context_id] = item
235 |         
    | ^^^^^^^^ W293
236 |         if self.redis:
237 |             await self.redis.setex(
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:242:1: W293 Blank line contains whitespace
    |
240 |                 json.dumps(item.to_dict())
241 |             )
242 |         
    | ^^^^^^^^ W293
243 |         logger.info(f"Added context item: {context_id} ({context_type.value})")
244 |         return item
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:245:1: W293 Blank line contains whitespace
    |
243 |         logger.info(f"Added context item: {context_id} ({context_type.value})")
244 |         return item
245 |     
    | ^^^^ W293
246 |     async def get_relevant_context(
247 |         self,
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:256:1: W293 Blank line contains whitespace
    |
254 |         # Define context type weights based on query
255 |         context_type_weight = self._infer_context_weights(query)
256 |         
    | ^^^^^^^^ W293
257 |         # Filter by context types if specified
258 |         items = list(self.context_cache.values())
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:261:1: W293 Blank line contains whitespace
    |
259 |         if context_types:
260 |             items = [item for item in items if item.type in context_types]
261 |         
    | ^^^^^^^^ W293
262 |         # Calculate relevance scores
263 |         for item in items:
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:267:1: W293 Blank line contains whitespace
    |
265 |                 item, query, context_type_weight
266 |             )
267 |         
    | ^^^^^^^^ W293
268 |         # Sort by relevance
269 |         items.sort(key=lambda x: x.relevance_score, reverse=True)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:270:1: W293 Blank line contains whitespace
    |
268 |         # Sort by relevance
269 |         items.sort(key=lambda x: x.relevance_score, reverse=True)
270 |         
    | ^^^^^^^^ W293
271 |         # Create context window
272 |         window = ContextWindow(max_tokens=max_tokens)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:273:1: W293 Blank line contains whitespace
    |
271 |         # Create context window
272 |         window = ContextWindow(max_tokens=max_tokens)
273 |         
    | ^^^^^^^^ W293
274 |         for item in items[:max_items]:
275 |             # Update access metadata
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:278:1: W293 Blank line contains whitespace
    |
276 |             item.accessed_at = datetime.utcnow()
277 |             item.access_count += 1
278 |             
    | ^^^^^^^^^^^^ W293
279 |             # Add to window
280 |             if window.add_item(item):
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:285:1: W293 Blank line contains whitespace
    |
283 |                     f"(relevance: {item.relevance_score:.3f})"
284 |                 )
285 |         
    | ^^^^^^^^ W293
286 |         return window
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:287:1: W293 Blank line contains whitespace
    |
286 |         return window
287 |     
    | ^^^^ W293
288 |     def _infer_context_weights(self, query: str) -> Dict[ContextType, float]:
289 |         """Infer context type weights based on query content"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:291:1: W293 Blank line contains whitespace
    |
289 |         """Infer context type weights based on query content"""
290 |         weights = defaultdict(lambda: 1.0)
291 |         
    | ^^^^^^^^ W293
292 |         # Keywords for different context types
293 |         code_keywords = ["function", "class", "method", "variable", "bug", "error"]
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:297:1: W293 Blank line contains whitespace
    |
295 |         discussion_keywords = ["discuss", "question", "opinion", "feedback"]
296 |         doc_keywords = ["document", "readme", "guide", "tutorial", "api"]
297 |         
    | ^^^^^^^^ W293
298 |         query_lower = query.lower()
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:299:1: W293 Blank line contains whitespace
    |
298 |         query_lower = query.lower()
299 |         
    | ^^^^^^^^ W293
300 |         # Adjust weights based on keywords
301 |         if any(kw in query_lower for kw in code_keywords):
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:304:1: W293 Blank line contains whitespace
    |
302 |             weights[ContextType.CODE_REVIEW] = 2.0
303 |             weights[ContextType.COMMIT] = 1.5
304 |         
    | ^^^^^^^^ W293
305 |         if any(kw in query_lower for kw in issue_keywords):
306 |             weights[ContextType.ISSUE] = 2.0
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:307:1: W293 Blank line contains whitespace
    |
305 |         if any(kw in query_lower for kw in issue_keywords):
306 |             weights[ContextType.ISSUE] = 2.0
307 |         
    | ^^^^^^^^ W293
308 |         if any(kw in query_lower for kw in discussion_keywords):
309 |             weights[ContextType.DISCUSSION] = 1.8
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:310:1: W293 Blank line contains whitespace
    |
308 |         if any(kw in query_lower for kw in discussion_keywords):
309 |             weights[ContextType.DISCUSSION] = 1.8
310 |         
    | ^^^^^^^^ W293
311 |         if any(kw in query_lower for kw in doc_keywords):
312 |             weights[ContextType.DOCUMENTATION] = 2.0
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:313:1: W293 Blank line contains whitespace
    |
311 |         if any(kw in query_lower for kw in doc_keywords):
312 |             weights[ContextType.DOCUMENTATION] = 2.0
313 |         
    | ^^^^^^^^ W293
314 |         return dict(weights)
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:315:1: W293 Blank line contains whitespace
    |
314 |         return dict(weights)
315 |     
    | ^^^^ W293
316 |     async def prune_old_context(self, max_age_days: int = 7):
317 |         """Prune context older than specified days"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:319:1: W293 Blank line contains whitespace
    |
317 |         """Prune context older than specified days"""
318 |         cutoff_date = datetime.utcnow() - timedelta(days=max_age_days)
319 |         
    | ^^^^^^^^ W293
320 |         items_to_remove = []
321 |         for context_id, item in self.context_cache.items():
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:324:1: W293 Blank line contains whitespace
    |
322 |             if item.accessed_at < cutoff_date:
323 |                 items_to_remove.append(context_id)
324 |         
    | ^^^^^^^^ W293
325 |         for context_id in items_to_remove:
326 |             del self.context_cache[context_id]
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:329:1: W293 Blank line contains whitespace
    |
327 |             if self.redis:
328 |                 await self.redis.delete(f"context:{context_id}")
329 |         
    | ^^^^^^^^ W293
330 |         logger.info(f"Pruned {len(items_to_remove)} old context items")
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:331:1: W293 Blank line contains whitespace
    |
330 |         logger.info(f"Pruned {len(items_to_remove)} old context items")
331 |     
    | ^^^^ W293
332 |     async def get_context_summary(self) -> Dict[str, Any]:
333 |         """Get summary statistics about current context"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:336:1: W293 Blank line contains whitespace
    |
334 |         type_counts = defaultdict(int)
335 |         total_tokens = 0
336 |         
    | ^^^^^^^^ W293
337 |         for item in self.context_cache.values():
338 |             type_counts[item.type.value] += 1
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:340:1: W293 Blank line contains whitespace
    |
338 |             type_counts[item.type.value] += 1
339 |             total_tokens += item.token_count
340 |         
    | ^^^^^^^^ W293
341 |         return {
342 |             "total_items": len(self.context_cache),
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:347:1: W293 Blank line contains whitespace
    |
345 |             "cache_size_mb": len(str(self.context_cache)) / (1024 * 1024)
346 |         }
347 |     
    | ^^^^ W293
348 |     async def export_context(self, context_ids: List[str]) -> Dict[str, Any]:
349 |         """Export specific context items"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:351:1: W293 Blank line contains whitespace
    |
349 |         """Export specific context items"""
350 |         exported_items = []
351 |         
    | ^^^^^^^^ W293
352 |         for context_id in context_ids:
353 |             if context_id in self.context_cache:
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:356:1: W293 Blank line contains whitespace
    |
354 |                 item = self.context_cache[context_id]
355 |                 exported_items.append(item.to_dict())
356 |         
    | ^^^^^^^^ W293
357 |         return {
358 |             "exported_at": datetime.utcnow().isoformat(),
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:361:1: W293 Blank line contains whitespace
    |
359 |             "items": exported_items
360 |         }
361 |     
    | ^^^^ W293
362 |     async def import_context(self, context_data: Dict[str, Any]):
363 |         """Import context items"""
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:365:1: W293 Blank line contains whitespace
    |
363 |         """Import context items"""
364 |         imported_count = 0
365 |         
    | ^^^^^^^^ W293
366 |         for item_data in context_data.get("items", []):
367 |             try:
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:374:1: W293 Blank line contains whitespace
    |
372 |             except Exception as e:
373 |                 logger.error(f"Failed to import context item: {e}")
374 |         
    | ^^^^^^^^ W293
375 |         logger.info(f"Imported {imported_count} context items")
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:383:1: W293 Blank line contains whitespace
    |
381 |     manager = AdvancedContextManager()
382 |     await manager.initialize()
383 |     
    | ^^^^ W293
384 |     try:
385 |         # Add some context
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:392:1: W293 Blank line contains whitespace
    |
390 |             {"pr_number": 123, "author": "john_doe"}
391 |         )
392 |         
    | ^^^^^^^^ W293
393 |         await manager.add_context(
394 |             "issue-456",
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:399:1: W293 Blank line contains whitespace
    |
397 |             {"issue_number": 456, "severity": "high"}
398 |         )
399 |         
    | ^^^^^^^^ W293
400 |         # Get relevant context
401 |         query = "authentication problems and memory issues"
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:403:1: W293 Blank line contains whitespace
    |
401 |         query = "authentication problems and memory issues"
402 |         context_window = await manager.get_relevant_context(query)
403 |         
    | ^^^^^^^^ W293
404 |         print("Relevant context:")
405 |         print(context_window.get_context_string())
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:406:1: W293 Blank line contains whitespace
    |
404 |         print("Relevant context:")
405 |         print(context_window.get_context_string())
406 |         
    | ^^^^^^^^ W293
407 |         # Get summary
408 |         summary = await manager.get_context_summary()
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:410:1: W293 Blank line contains whitespace
    |
408 |         summary = await manager.get_context_summary()
409 |         print(f"\nContext summary: {json.dumps(summary, indent=2)}")
410 |         
    | ^^^^^^^^ W293
411 |     finally:
412 |         await manager.close()
    |
    = help: Remove whitespace from blank line

.github/scripts/context_manager.py:416:23: SyntaxError: unexpected EOF while parsing
    |
415 | if __name__ == "__main__":
416 |     asyncio.run(main()
    |                       ^
    |

.github/scripts/context_manager.py:416:23: W292 No newline at end of file
    |
415 | if __name__ == "__main__":
416 |     asyncio.run(main()
    |                       ^ W292
    |
    = help: Add trailing newline

.github/scripts/core/__init__.py:1:1: N999 Invalid module name: '.github'
.github/scripts/core/container.py:29:36: F821 Undefined name `Tuple`
   |
28 |     def __init__(self):
29 |         self._services: dict[type, Tuple[Any, bool]] = {}
   |                                    ^^^^^ F821
30 |         self._singletons: dict[type, Any] = {}
31 |         self._factories: dict[type, Callable] = {}
   |

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/container.py:176:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
175 |       # Import implementations
176 | /     from ..implementations import (
177 | |         FernetEncryption,
178 | |         FileConfiguration,
179 | |         GitHubClient,
180 | |         JWTAuthentication,
181 | |         PrometheusMetrics,
182 | |         RBACAuthorization,
183 | |         RedisCache,
184 | |         SQLiteDatabase,
185 | |     )
    | |_____^ TID252
186 |       from .interfaces import (
187 |           AuthenticationInterface,
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/core/exceptions.py:11:7: N818 Exception name `KiroException` should be named with an Error suffix
   |
11 | class KiroException(Exception):
   |       ^^^^^^^^^^^^^ N818
12 |     """Base exception for all Kiro-related errors."""
   |

.github/scripts/core/logging.py:96:14: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
 95 |       # ANSI color codes
 96 |       COLORS = {
    |  ______________^
 97 | |         "DEBUG": "\033[36m",  # Cyan
 98 | |         "INFO": "\033[32m",  # Green
 99 | |         "WARNING": "\033[33m",  # Yellow
100 | |         "ERROR": "\033[31m",  # Red
101 | |         "CRITICAL": "\033[35m",  # Magenta
102 | |     }
    | |_____^ RUF012
103 |       RESET = "\033[0m"
    |

.github/scripts/demo_documentation_analysis.py:13:20: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
12 | # Add the current directory to the Python path
13 | sys.path.insert(0, os.path.dirname(__file__))
   |                    ^^^^^^^^^^^^^^^ PTH120
14 |
15 | import contextlib
   |

.github/scripts/demo_documentation_analysis.py:305:5: PLR0912 Too many branches (27 > 12)
    |
305 | def run_demo():
    |     ^^^^^^^^ PLR0912
306 |     """Run the documentation analysis demo."""
    |

.github/scripts/demo_documentation_analysis.py:356:22: B007 Loop control variable `doc` not used within loop body
    |
354 |         results_search = system.search_documentation(query, top_k=3)
355 |         if results_search:
356 |             for _i, (doc, _score) in enumerate(results_search, 1):
    |                      ^^^ B007
357 |                 pass
358 |         else:
    |
    = help: Rename unused `doc` to `_doc`

.github/scripts/demo_improvements.py:35:29: ARG002 Unused method argument: `key`
   |
33 |             return f"cached_{key}"
34 |
35 |         async def set(self, key, value, ttl=None):
   |                             ^^^ ARG002
36 |             return True
   |

.github/scripts/demo_improvements.py:35:34: ARG002 Unused method argument: `value`
   |
33 |             return f"cached_{key}"
34 |
35 |         async def set(self, key, value, ttl=None):
   |                                  ^^^^^ ARG002
36 |             return True
   |

.github/scripts/demo_improvements.py:35:41: ARG002 Unused method argument: `ttl`
   |
33 |             return f"cached_{key}"
34 |
35 |         async def set(self, key, value, ttl=None):
   |                                         ^^^ ARG002
36 |             return True
   |

.github/scripts/demo_improvements.py:86:9: ERA001 Found commented-out code
   |
84 |         # In production, this would use the actual signature
85 |         logger.info("Validating webhook signature...")
86 |         # is_valid = validator.validate_signature(payload, signature)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
87 |         logger.info("✅ Webhook validation passed")
88 |     except Exception as e:
   |
   = help: Remove commented-out code

.github/scripts/demo_improvements.py:117:5: ERA001 Found commented-out code
    |
116 |     # In production, this would save to database
117 |     # repository = ReviewRepository(db_path)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
118 |     # await repository.save(review)
    |
    = help: Remove commented-out code

.github/scripts/demo_improvements.py:118:5: ERA001 Found commented-out code
    |
116 |     # In production, this would save to database
117 |     # repository = ReviewRepository(db_path)
118 |     # await repository.save(review)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
    |
    = help: Remove commented-out code

.github/scripts/diagnostics/__init__.py:1:1: N999 Invalid module name: '.github'
.github/scripts/diagnostics/diagnostic_collector.py:27:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
25 | import psutil
26 |
27 | from ..core.interfaces import CacheInterface, DatabaseInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
28 | from ..core.logging import get_correlation_id, get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/diagnostics/diagnostic_collector.py:27:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
25 | import psutil
26 |
27 | from ..core.interfaces import CacheInterface, DatabaseInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
28 | from ..core.logging import get_correlation_id, get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/diagnostics/diagnostic_collector.py:28:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
27 | from ..core.interfaces import CacheInterface, DatabaseInterface
28 | from ..core.logging import get_correlation_id, get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
29 |
30 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/diagnostics/diagnostic_collector.py:28:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
27 | from ..core.interfaces import CacheInterface, DatabaseInterface
28 | from ..core.logging import get_correlation_id, get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
29 |
30 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/diagnostics/diagnostic_collector.py:123:13: RUF006 Store a reference to the return value of `asyncio.create_task`
    |
121 |             self.end_diagnostic(context.correlation_id)
122 |             # Store diagnostic data
123 |             asyncio.create_task(self._store_diagnostic(context))
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF006
124 |
125 |     async def _store_diagnostic(self, context: DiagnosticContext):
    |

.github/scripts/diagnostics/diagnostic_collector.py:314:9: PLR0911 Too many return statements (8 > 6)
    |
312 |         }
313 |
314 |     def _identify_root_cause(self, error: Exception, context: dict[str, Any]) -> str:
    |         ^^^^^^^^^^^^^^^^^^^^ PLR0911
315 |         """Identify likely root cause of error."""
316 |         type(error).__name__
    |

.github/scripts/diagnostics/diagnostic_collector.py:314:54: ARG002 Unused method argument: `context`
    |
312 |         }
313 |
314 |     def _identify_root_cause(self, error: Exception, context: dict[str, Any]) -> str:
    |                                                      ^^^^^^^ ARG002
315 |         """Identify likely root cause of error."""
316 |         type(error).__name__
    |

.github/scripts/diagnostics/diagnostic_collector.py:316:9: B018 Found useless attribute access. Either assign it to a variable or remove it.
    |
314 |     def _identify_root_cause(self, error: Exception, context: dict[str, Any]) -> str:
315 |         """Identify likely root cause of error."""
316 |         type(error).__name__
    |         ^^^^^^^^^^^^^^^^^^^^ B018
317 |         error_msg = str(error).lower()
    |

.github/scripts/diagnostics/diagnostic_collector.py:337:32: ARG002 Unused method argument: `error_type`
    |
335 |             return "unknown"
336 |
337 |     def _get_suggestions(self, error_type: str, root_cause: str) -> list[str]:
    |                                ^^^^^^^^^^ ARG002
338 |         """Get suggestions for fixing the error."""
339 |         suggestions = []
    |

.github/scripts/diagnostics/diagnostic_collector.py:398:26: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
397 |         # Log slow operations
398 |         if duration_ms > 1000:  # > 1 second
    |                          ^^^^ PLR2004
399 |             logger.warning("Slow operation detected", operation=operation, duration_ms=duration_ms, metadata=metadata)
    |

.github/scripts/diagnostics/diagnostic_collector.py:425:34: PLR2004 Magic value used in comparison, consider replacing `500` with a constant variable
    |
424 |         for operation, stats in self.get_performance_summary().items():
425 |             if stats["p95_ms"] > 500:  # Operations taking > 500ms at P95
    |                                  ^^^ PLR2004
426 |                 bottlenecks.append((operation, stats["p95_ms"]))
    |

.github/scripts/email_templates.py:111:29: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
109 |             status_text = "Critical Issues Found"
110 |             status_emoji = "🔴"
111 |         elif total_issues > 5:
    |                             ^ PLR2004
112 |             status_color = "#fd7e14"
113 |             status_text = "Multiple Issues Found"
    |

.github/scripts/email_templates.py:424:39: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
422 |                 """
423 |
424 |             if len(pending_reviews) > 5:
    |                                       ^ PLR2004
425 |                 content += f"""
426 |             <p style="text-align: center; margin: 15px 0 0 0;">
    |

.github/scripts/fix_suggester.py:185:37: PLR2004 Magic value used in comparison, consider replacing `79` with a constant variable
    |
183 |         elif rule_id == "flake8-E501":
184 |             # Fix long lines by breaking at appropriate points
185 |             if len(original_text) > 79 and "," in original_text:
    |                                     ^^ PLR2004
186 |                 # Try to break at commas
187 |                 parts = original_text.split(",")
    |

.github/scripts/fix_suggester.py:196:58: PLR2004 Magic value used in comparison, consider replacing `75` with a constant variable
    |
195 |                 for part in parts[1:]:
196 |                     if current_line_length + len(part) > 75:  # Leave some margin
    |                                                          ^^ PLR2004
197 |                         result += f"\n{indent_str}{part.lstrip()},"
198 |                         current_line_length = indentation + len(part.lstrip()) + 1
    |

.github/scripts/fix_suggester.py:270:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
268 |           elif rule_id == "sql-injection":
269 |               # Replace string concatenation in SQL with parameterized query
270 | /             if (
271 | |                 "SELECT" in original_text
272 | |                 or "INSERT" in original_text
273 | |                 or "UPDATE" in original_text
274 | |                 or "DELETE" in original_text
275 | |             ):
276 | |                 # This is a simplified example - real SQL parsing would be more complex
277 | |                 if "+" in original_text and "'" in original_text:
    | |_________________________________________________________________^ SIM102
278 |                       # Replace string concatenation with parameter placeholder
279 |                       replacement_text = re.sub(r"'([^']*)'\s*\+\s*([^']+)\s*\+\s*'([^']*)'", r"'\1?\3'", original_text)
    |
    = help: Combine `if` statements using `and`

.github/scripts/fix_suggester.py:336:9: SIM102 Use a single `if` statement instead of nested `if` statements
    |
334 |                           }
335 |
336 | /         elif rule_id == "select-all":
337 | |             # Replace SELECT * with specific columns
338 | |             if "SELECT *" in original_text:
    | |___________________________________________^ SIM102
339 |                   # This is a placeholder - in a real implementation, we would need to analyze the schema
340 |                   replacement_text = original_text.replace("SELECT *", "SELECT id, name, created_at")
    |
    = help: Combine `if` statements using `and`

.github/scripts/fix_suggester.py:527:24: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
525 |     import sys
526 |
527 |     if len(sys.argv) < 3:
    |                        ^ PLR2004
528 |         sys.exit(1)
    |

.github/scripts/fix_suggester.py:534:14: PTH123 `open()` should be replaced by `Path.open()`
    |
533 |     try:
534 |         with open(issue_file) as f:
    |              ^^^^ PTH123
535 |             issues = json.load(f)
    |

.github/scripts/fix_suggester.py:537:14: PTH123 `open()` should be replaced by `Path.open()`
    |
535 |             issues = json.load(f)
536 |
537 |         with open(file_path) as f:
    |              ^^^^ PTH123
538 |             file_content = f.read()
    |

.github/scripts/fix_suggester.py:541:31: PTH119 `os.path.basename()` should be replaced by `Path.name`
    |
540 |         # Create a mock file structure
541 |         files = [{"filename": os.path.basename(file_path), "content": file_content}]
    |                               ^^^^^^^^^^^^^^^^ PTH119
542 |
543 |         # Create a mock GitHub client
    |

.github/scripts/fix_suggester.py:545:27: ARG002 Unused method argument: `url`
    |
543 |         # Create a mock GitHub client
544 |         class MockGitHubClient:
545 |             def get(self, url, params=None):
    |                           ^^^ ARG002
546 |                 return {}
    |

.github/scripts/fix_suggester.py:545:32: ARG002 Unused method argument: `params`
    |
543 |         # Create a mock GitHub client
544 |         class MockGitHubClient:
545 |             def get(self, url, params=None):
    |                                ^^^^^^ ARG002
546 |                 return {}
    |

.github/scripts/fix_suggester.py:548:28: ARG002 Unused method argument: `url`
    |
546 |                 return {}
547 |
548 |             def post(self, url, json=None):
    |                            ^^^ ARG002
549 |                 return {}
    |

.github/scripts/fix_suggester.py:548:33: ARG002 Unused method argument: `json`
    |
546 |                 return {}
547 |
548 |             def post(self, url, json=None):
    |                                 ^^^^ ARG002
549 |                 return {}
    |

.github/scripts/fix_suggester.py:551:29: ARG002 Unused method argument: `url`
    |
549 |                 return {}
550 |
551 |             def patch(self, url, json=None):
    |                             ^^^ ARG002
552 |                 return {}
    |

.github/scripts/fix_suggester.py:551:34: ARG002 Unused method argument: `json`
    |
549 |                 return {}
550 |
551 |             def patch(self, url, json=None):
    |                                  ^^^^ ARG002
552 |                 return {}
    |

.github/scripts/github_auth.py:29:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
28 |         # Ensure directory exists
29 |         os.makedirs(os.path.dirname(self.storage_path), exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
30 |
31 |         # Set up encryption
   |

.github/scripts/github_auth.py:29:21: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
28 |         # Ensure directory exists
29 |         os.makedirs(os.path.dirname(self.storage_path), exist_ok=True)
   |                     ^^^^^^^^^^^^^^^ PTH120
30 |
31 |         # Set up encryption
   |

.github/scripts/github_auth.py:61:14: PTH123 `open()` should be replaced by `Path.open()`
   |
60 |         # Write to file
61 |         with open(self.storage_path, "wb") as f:
   |              ^^^^ PTH123
62 |             f.write(encrypted_data)
   |

.github/scripts/github_auth.py:65:9: PTH101 `os.chmod()` should be replaced by `Path.chmod()`
   |
64 |         # Set secure permissions
65 |         os.chmod(self.storage_path, 0o600)
   |         ^^^^^^^^ PTH101
66 |
67 |         return True
   |

.github/scripts/github_auth.py:71:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
69 |     def get_credentials(self):
70 |         """Retrieve GitHub App credentials."""
71 |         if not os.path.exists(self.storage_path):
   |                ^^^^^^^^^^^^^^ PTH110
72 |             return None
   |

.github/scripts/github_auth.py:76:18: PTH123 `open()` should be replaced by `Path.open()`
   |
74 |         try:
75 |             # Read encrypted data
76 |             with open(self.storage_path, "rb") as f:
   |                  ^^^^ PTH123
77 |                 encrypted_data = f.read()
   |

.github/scripts/github_auth.py:104:14: PTH123 `open()` should be replaced by `Path.open()`
    |
103 |         # Write to file
104 |         with open(self.storage_path, "wb") as f:
    |              ^^^^ PTH123
105 |             f.write(encrypted_data)
    |

.github/scripts/github_auth.py:127:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
125 |     def clear_credentials(self):
126 |         """Clear all stored credentials."""
127 |         if os.path.exists(self.storage_path):
    |            ^^^^^^^^^^^^^^ PTH110
128 |             os.remove(self.storage_path)
129 |         return True
    |

.github/scripts/github_auth.py:128:13: PTH107 `os.remove()` should be replaced by `Path.unlink()`
    |
126 |         """Clear all stored credentials."""
127 |         if os.path.exists(self.storage_path):
128 |             os.remove(self.storage_path)
    |             ^^^^^^^^^ PTH107
129 |         return True
    |

.github/scripts/github_auth.py:144:29: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
142 |     private_key_base64 = os.environ.get("GITHUB_PRIVATE_KEY_BASE64")
143 |
144 |     if private_key_path and os.path.exists(private_key_path):
    |                             ^^^^^^^^^^^^^^ PTH110
145 |         with open(private_key_path) as f:
146 |             private_key = f.read()
    |

.github/scripts/github_auth.py:145:14: PTH123 `open()` should be replaced by `Path.open()`
    |
144 |     if private_key_path and os.path.exists(private_key_path):
145 |         with open(private_key_path) as f:
    |              ^^^^ PTH123
146 |             private_key = f.read()
147 |     elif private_key_base64:
    |

.github/scripts/github_event_handlers.py:91:24: S113 Probable use of `requests` call without timeout
   |
90 |         def patch(self, url, data=None, json=None):
91 |             response = requests.patch(url, headers=self.headers, data=data, json=json)
   |                        ^^^^^^^^^^^^^^ S113
92 |             response.raise_for_status()
93 |             return response.json()
   |

.github/scripts/github_event_handlers.py:259:9: E722 Do not use bare `except`
    |
257 |             reply_data = {"body": f"❌ Error applying suggestion: {e!s}", "in_reply_to": comment_id}
258 |             github.post(reply_url, json=reply_data)
259 |         except:
    |         ^^^^^^ E722
260 |             logger.error("Failed to add error reply")
    |

.github/scripts/github_event_handlers.py:445:46: F821 Undefined name `Tuple`
    |
445 | def analyze_feedback_sentiment(text: str) -> Tuple[str, int]:
    |                                              ^^^^^ F821
446 |     """Analyze the sentiment of feedback text."""
447 |     text_lower = text.lower()
    |

.github/scripts/github_event_handlers.py:475:43: F821 Undefined name `List`
    |
475 | def extract_mentioned_rules(text: str) -> List[Tuple[str, str]]:
    |                                           ^^^^ F821
476 |     """Extract mentioned rules from feedback text."""
477 |     # Look for rule patterns in the text
    |

.github/scripts/github_event_handlers.py:475:48: F821 Undefined name `Tuple`
    |
475 | def extract_mentioned_rules(text: str) -> List[Tuple[str, str]]:
    |                                                ^^^^^ F821
476 |     """Extract mentioned rules from feedback text."""
477 |     # Look for rule patterns in the text
    |

.github/scripts/github_webhook_handler.py:43:14: PTH123 `open()` should be replaced by `Path.open()`
   |
42 |     try:
43 |         with open(GITHUB_PRIVATE_KEY_PATH) as key_file:
   |              ^^^^ PTH123
44 |             private_key = key_file.read()
45 |     except Exception:
   |

.github/scripts/github_webhook_handler.py:103:60: ARG001 Unused function argument: `is_update`
    |
103 | def process_pr_for_review(pr, repository, installation_id, is_update=False):
    |                                                            ^^^^^^^^^ ARG001
104 |     """Process a pull request for review by Kiro."""
105 |     # Get installation token
    |

.github/scripts/github_webhook_handler.py:158:14: PTH123 `open()` should be replaced by `Path.open()`
    |
156 |     """Main entry point for the webhook handler."""
157 |     try:
158 |         with open(payload_path) as f:
    |              ^^^^ PTH123
159 |             payload = json.load(f)
    |

.github/scripts/github_webhook_handler.py:173:24: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
172 | if __name__ == "__main__":
173 |     if len(sys.argv) < 3:
    |                        ^ PLR2004
174 |         sys.exit(1)
    |

.github/scripts/issue_to_spec.py:110:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
108 |             response = requests.post(f"{KIRO_API_URL}/v1/specs/generate", headers=headers, json=payload, timeout=30)
109 |
110 |             if response.status_code == 200:
    |                                        ^^^ PLR2004
111 |                 result = response.json()
112 |                 return {
    |

.github/scripts/issue_to_spec.py:120:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
118 |                   pass
119 |                   # Fall back to placeholder documents
120 | /         except Exception:
121 | |             pass
    | |________________^ S110
122 |       else:
123 |           pass
    |

.github/scripts/issue_to_spec.py:133:31: ARG001 Unused function argument: `feature_name`
    |
133 | def generate_requirements_doc(feature_name, issue_details, capabilities):
    |                               ^^^^^^^^^^^^ ARG001
134 |     """Generate a basic requirements document based on the issue."""
135 |     title = issue_details.get("title", "Unknown Feature")
    |

.github/scripts/issue_to_spec.py:196:24: ARG001 Unused function argument: `feature_name`
    |
196 | def generate_tasks_doc(feature_name):
    |                        ^^^^^^^^^^^^ ARG001
197 |     """Generate a placeholder tasks document."""
198 |     return """# Implementation Plan
    |

.github/scripts/issue_to_spec.py:235:14: PTH123 `open()` should be replaced by `Path.open()`
    |
233 |     # Write the spec files
234 |     for filename, content in spec_content.items():
235 |         with open(spec_dir / filename, "w") as f:
    |              ^^^^ PTH123
236 |             f.write(content)
    |

.github/scripts/issue_to_spec.py:253:5: ERA001 Found commented-out code
    |
252 |     # Regular expression to match top-level tasks (those with single digit numbers)
253 |     # Format: "- [ ] 1. Task title"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
254 |     task_pattern = re.compile(r"- \[ \] (\d+)\. (.*?)$", re.MULTILINE)
    |
    = help: Remove commented-out code

.github/scripts/issue_to_spec.py:332:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
330 |               issue = response.json()
331 |               created_issues.append({"number": issue["number"], "title": issue["title"], "html_url": issue["html_url"]})
332 | /         except Exception:
333 | |             pass
    | |________________^ S110
334 |
335 |       return created_issues
    |

.github/scripts/kiro_next.py:35:18: PTH123 `open()` should be replaced by `Path.open()`
   |
34 |             spec_tasks = []
35 |             with open(tasks_file) as f:
   |                  ^^^^ PTH123
36 |                 lines = f.readlines()
   |

.github/scripts/kiro_next.py:59:18: PTH123 `open()` should be replaced by `Path.open()`
   |
58 |         try:
59 |             with open(file_path) as f:
   |                  ^^^^ PTH123
60 |                 lines = f.readlines()
   |

.github/scripts/kiro_next.py:65:18: PTH123 `open()` should be replaced by `Path.open()`
   |
63 |             lines[line_num] = lines[line_num].replace("- [ ]", "- [x]", 1)
64 |
65 |             with open(file_path, "w") as f:
   |                  ^^^^ PTH123
66 |                 f.writelines(lines)
   |

.github/scripts/kiro_task_implementation.py:20:57: ARG002 Unused method argument: `description`
   |
18 |             dir_path.mkdir(parents=True, exist_ok=True)
19 |
20 |     def write_file(self, file_path: Path, content: str, description: str):
   |                                                         ^^^^^^^^^^^ ARG002
21 |         """Write content to a file."""
22 |         file_path.parent.mkdir(parents=True, exist_ok=True)
   |

.github/scripts/kiro_task_implementation.py:1005:25: F821 Undefined name `resources_dir`
     |
1003 |     </root>
1004 | </configuration>"""
1005 |         self.write_file(resources_dir / "logback.xml", logback_config, "Logback configuration")
     |                         ^^^^^^^^^^^^^ F821
1006 |
1007 |         return True
     |

.github/scripts/kiro_task_implementation.py:1494:9: S110 `try`-`except`-`pass` detected, consider logging the exception
     |
1492 |               if task_func():
1493 |                   completed += 1
1494 | /         except Exception:
1495 | |             pass
     | |________________^ S110
     |

.github/scripts/learning_system.py:23:19: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
22 | # Constants
23 | DEFAULT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "analytics.db")
   |                   ^^^^^^^^^^^^ PTH118
24 | LEARNING_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "learning.db")
   |

.github/scripts/learning_system.py:23:32: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
22 | # Constants
23 | DEFAULT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "analytics.db")
   |                                ^^^^^^^^^^^^^^^ PTH120
24 | LEARNING_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "learning.db")
   |

.github/scripts/learning_system.py:24:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
22 | # Constants
23 | DEFAULT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "analytics.db")
24 | LEARNING_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "learning.db")
   |                    ^^^^^^^^^^^^ PTH118
   |

.github/scripts/learning_system.py:24:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
22 | # Constants
23 | DEFAULT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "analytics.db")
24 | LEARNING_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "learning.db")
   |                                 ^^^^^^^^^^^^^^^ PTH120
   |

.github/scripts/learning_system.py:36:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
35 |         # Ensure directory exists
36 |         os.makedirs(os.path.dirname(self.learning_db_path), exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
37 |
38 |         # Initialize learning database
   |

.github/scripts/learning_system.py:36:21: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
35 |         # Ensure directory exists
36 |         os.makedirs(os.path.dirname(self.learning_db_path), exist_ok=True)
   |                     ^^^^^^^^^^^^^^^ PTH120
37 |
38 |         # Initialize learning database
   |

.github/scripts/learning_system.py:235:9: SIM108 Use ternary operator `feedback_score = positive_feedback / total_feedback if total_feedback > 0 else 0.5` instead of `if`-`else`-block
    |
233 |           # Calculate feedback score
234 |           total_feedback = positive_feedback + negative_feedback
235 | /         if total_feedback > 0:
236 | |             feedback_score = positive_feedback / total_feedback
237 | |         else:
238 | |             feedback_score = 0.5  # Neutral if no feedback
    | |________________________________^ SIM108
239 |
240 |           # Calculate suggestion score
    |
    = help: Replace `if`-`else`-block with `feedback_score = positive_feedback / total_feedback if total_feedback > 0 else 0.5`

.github/scripts/learning_system.py:242:9: SIM108 Use ternary operator `suggestion_score = suggestions_applied / total_suggestions if total_suggestions > 0 else 0.5` instead of `if`-`else`-block
    |
240 |           # Calculate suggestion score
241 |           total_suggestions = suggestions_applied + suggestions_rejected
242 | /         if total_suggestions > 0:
243 | |             suggestion_score = suggestions_applied / total_suggestions
244 | |         else:
245 | |             suggestion_score = 0.5  # Neutral if no suggestions
    | |__________________________________^ SIM108
246 |
247 |           # Combine scores
    |
    = help: Replace `if`-`else`-block with `suggestion_score = suggestions_applied / total_suggestions if total_suggestions > 0 else 0.5`

.github/scripts/learning_system.py:490:37: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
488 |                 # Adjust confidence based on sample size
489 |                 total_attempts = success_count + failure_count
490 |                 if total_attempts < 5:
    |                                     ^ PLR2004
491 |                     # Reduce confidence for small sample sizes
492 |                     confidence_score *= total_attempts / 5.0
    |

.github/scripts/learning_system.py:507:30: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    |
505 |             # Get file extension from context
506 |             file_path = context.get("file_path", "")
507 |             file_extension = os.path.splitext(file_path)[1].lower()
    |                              ^^^^^^^^^^^^^^^^ PTH122
508 |
509 |             # Check for learned improvements
    |

.github/scripts/learning_system.py:582:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
580 |           for line in lines:
581 |               stripped = line.strip()
582 | /             if stripped and not stripped.endswith((";", "{", "}", ",")):
583 | |                 if not stripped.startswith(("if", "for", "while", "function", "class")):
    | |________________________________________________________________________________________^ SIM102
584 |                       line += ";"
585 |               improved_lines.append(line)
    |
    = help: Combine `if` statements using `and`

.github/scripts/learning_system.py:584:21: PLW2901 `for` loop variable `line` overwritten by assignment target
    |
582 |             if stripped and not stripped.endswith((";", "{", "}", ",")):
583 |                 if not stripped.startswith(("if", "for", "while", "function", "class")):
584 |                     line += ";"
    |                     ^^^^ PLW2901
585 |             improved_lines.append(line)
    |

.github/scripts/learning_system.py:674:37: ARG002 Unused method argument: `repo_owner`
    |
672 |             return False
673 |
674 |     def get_learning_insights(self, repo_owner: str | None = None, repo_name: str | None = None) -> dict[str, Any]:
    |                                     ^^^^^^^^^^ ARG002
675 |         """Get insights from the learning system."""
676 |         try:
    |

.github/scripts/learning_system.py:674:68: ARG002 Unused method argument: `repo_name`
    |
672 |             return False
673 |
674 |     def get_learning_insights(self, repo_owner: str | None = None, repo_name: str | None = None) -> dict[str, Any]:
    |                                                                    ^^^^^^^^^ ARG002
675 |         """Get insights from the learning system."""
676 |         try:
    |

.github/scripts/main_with_diagnostics.py:22:20: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
21 | # Add parent directory to path
22 | sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
   |                    ^^^^^^^^^^^^^^^ PTH120
23 |
24 | from scripts.api import diagnostic_endpoints, review_endpoints, webhook_endpoints
   |

.github/scripts/main_with_diagnostics.py:22:36: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
21 | # Add parent directory to path
22 | sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
   |                                    ^^^^^^^^^^^^^^^ PTH120
23 |
24 | from scripts.api import diagnostic_endpoints, review_endpoints, webhook_endpoints
   |

.github/scripts/main_with_diagnostics.py:22:52: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
21 | # Add parent directory to path
22 | sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
   |                                                    ^^^^^^^^^^^^^^^ PTH100
23 |
24 | from scripts.api import diagnostic_endpoints, review_endpoints, webhook_endpoints
   |

.github/scripts/main_with_diagnostics.py:52:12: PLW0603 Using the global statement to update `container` is discouraged
   |
50 | async def lifespan(app: FastAPI):
51 |     """Application lifespan manager."""
52 |     global container, diagnostic_collector, request_tracer, error_analyzer, performance_profiler
   |            ^^^^^^^^^ PLW0603
53 |
54 |     logger.info("Starting application with diagnostics")
   |

.github/scripts/main_with_diagnostics.py:52:23: PLW0603 Using the global statement to update `diagnostic_collector` is discouraged
   |
50 | async def lifespan(app: FastAPI):
51 |     """Application lifespan manager."""
52 |     global container, diagnostic_collector, request_tracer, error_analyzer, performance_profiler
   |                       ^^^^^^^^^^^^^^^^^^^^ PLW0603
53 |
54 |     logger.info("Starting application with diagnostics")
   |

.github/scripts/main_with_diagnostics.py:52:45: PLW0603 Using the global statement to update `request_tracer` is discouraged
   |
50 | async def lifespan(app: FastAPI):
51 |     """Application lifespan manager."""
52 |     global container, diagnostic_collector, request_tracer, error_analyzer, performance_profiler
   |                                             ^^^^^^^^^^^^^^ PLW0603
53 |
54 |     logger.info("Starting application with diagnostics")
   |

.github/scripts/main_with_diagnostics.py:52:61: PLW0603 Using the global statement to update `error_analyzer` is discouraged
   |
50 | async def lifespan(app: FastAPI):
51 |     """Application lifespan manager."""
52 |     global container, diagnostic_collector, request_tracer, error_analyzer, performance_profiler
   |                                                             ^^^^^^^^^^^^^^ PLW0603
53 |
54 |     logger.info("Starting application with diagnostics")
   |

.github/scripts/main_with_diagnostics.py:52:77: PLW0603 Using the global statement to update `performance_profiler` is discouraged
   |
50 | async def lifespan(app: FastAPI):
51 |     """Application lifespan manager."""
52 |     global container, diagnostic_collector, request_tracer, error_analyzer, performance_profiler
   |                                                                             ^^^^^^^^^^^^^^^^^^^^ PLW0603
53 |
54 |     logger.info("Starting application with diagnostics")
   |

.github/scripts/main_with_diagnostics.py:204:29: ARG001 Unused function argument: `frame`
    |
204 | def handle_shutdown(signum, frame):
    |                             ^^^^^ ARG001
205 |     """Handle shutdown signals."""
206 |     logger.info("Received shutdown signal", signal=signum)
    |

.github/scripts/main_with_diagnostics.py:217:30: S104 Possible binding to all interfaces
    |
216 |     # Get configuration
217 |     host = os.getenv("HOST", "0.0.0.0")
    |                              ^^^^^^^^^ S104
218 |     port = int(os.getenv("PORT", "5000"))
219 |     workers = int(os.getenv("WORKERS", "4"))
    |

.github/scripts/main_with_documentation.py:19:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
18 | # Add the scripts directory to the Python path
19 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))
   |                    ^^^^^^^^^^^^ PTH118
20 |
21 | # Import existing analysis modules
   |

.github/scripts/main_with_documentation.py:19:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
18 | # Add the scripts directory to the Python path
19 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))
   |                                 ^^^^^^^^^^^^^^^ PTH120
20 |
21 | # Import existing analysis modules
   |

.github/scripts/main_with_documentation.py:53:9: E722 Do not use bare `except`
   |
51 |         try:
52 |             self.repo_analyzer = RepositoryAnalyzer(str(self.project_path))
53 |         except:
   |         ^^^^^^ E722
54 |             logger.warning("Repository analyzer not available")
   |

.github/scripts/main_with_documentation.py:60:13: E722 Do not use bare `except`
   |
58 |                 self.github_client = GitHubAPIClient(github_token)
59 |                 self.issue_tracker = IssueTracker(github_token)
60 |             except:
   |             ^^^^^^ E722
61 |                 logger.warning("GitHub integration not available")
   |

.github/scripts/main_with_documentation.py:254:62: ARG002 Unused method argument: `repo_results`
    |
252 |         return integration_data
253 |
254 |     def _analyze_doc_code_alignment(self, doc_results: dict, repo_results: dict) -> dict[str, Any]:
    |                                                              ^^^^^^^^^^^^ ARG002
255 |         """Analyze alignment between documentation and code."""
256 |         alignment_data = {
    |

.github/scripts/main_with_documentation.py:408:60: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
    |
406 |             # Documentation Gaps
407 |             doc_metrics = doc_results.get("metrics", {})
408 |             if doc_metrics.get("coverage_percentage", 0) < 50:
    |                                                            ^^ PLR2004
409 |                 gaps.append(
410 |                     {
    |

.github/scripts/main_with_documentation.py:421:62: PLR2004 Magic value used in comparison, consider replacing `0.5` with a constant variable
    |
419 |             # GitHub Activity Gaps
420 |             activity_metrics = github_results.get("activity_metrics", {})
421 |             if activity_metrics.get("issue_close_rate", 0) < 0.5:
    |                                                              ^^^ PLR2004
422 |                 gaps.append(
423 |                     {
    |

.github/scripts/main_with_documentation.py:434:36: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
432 |             # Community Engagement Gaps
433 |             contributors = github_results.get("contributors", [])
434 |             if len(contributors) < 3:
    |                                    ^ PLR2004
435 |                 gaps.append(
436 |                     {
    |

.github/scripts/main_with_documentation.py:447:34: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
445 |             # API Documentation Gaps
446 |             doc_issues = github_results.get("documentation_issues", [])
447 |             if len(doc_issues) > 3:
    |                                  ^ PLR2004
448 |                 gaps.append(
449 |                     {
    |

.github/scripts/main_with_documentation.py:475:30: PLR2004 Magic value used in comparison, consider replacing `70` with a constant variable
    |
473 |             contributors = github_results.get("contributors", [])
474 |
475 |             if doc_quality > 70 and len(contributors) > 5:
    |                              ^^ PLR2004
476 |                 insights.append(
477 |                     {
    |

.github/scripts/main_with_documentation.py:475:57: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
473 |             contributors = github_results.get("contributors", [])
474 |
475 |             if doc_quality > 70 and len(contributors) > 5:
    |                                                         ^ PLR2004
476 |                 insights.append(
477 |                     {
    |

.github/scripts/main_with_documentation.py:484:32: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
    |
482 |                     }
483 |                 )
484 |             elif doc_quality < 50 and len(contributors) < 3:
    |                                ^^ PLR2004
485 |                 insights.append(
486 |                     {
    |

.github/scripts/main_with_documentation.py:484:59: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
482 |                     }
483 |                 )
484 |             elif doc_quality < 50 and len(contributors) < 3:
    |                                                           ^ PLR2004
485 |                 insights.append(
486 |                     {
    |

.github/scripts/main_with_documentation.py:498:62: PLR2004 Magic value used in comparison, consider replacing `0.8` with a constant variable
    |
496 |             doc_issues = github_results.get("documentation_issues", [])
497 |
498 |             if activity_metrics.get("issue_close_rate", 0) > 0.8 and len(doc_issues) > 0:
    |                                                              ^^^ PLR2004
499 |                 insights.append(
500 |                     {
    |

.github/scripts/main_with_documentation.py:512:31: PLR2004 Magic value used in comparison, consider replacing `70` with a constant variable
    |
510 |             pr_merge_rate = activity_metrics.get("pr_merge_rate", 0)
511 |
512 |             if doc_coverage > 70 and pr_merge_rate > 0.7:
    |                               ^^ PLR2004
513 |                 insights.append(
514 |                     {
    |

.github/scripts/main_with_documentation.py:512:54: PLR2004 Magic value used in comparison, consider replacing `0.7` with a constant variable
    |
510 |             pr_merge_rate = activity_metrics.get("pr_merge_rate", 0)
511 |
512 |             if doc_coverage > 70 and pr_merge_rate > 0.7:
    |                                                      ^^^ PLR2004
513 |                 insights.append(
514 |                     {
    |

.github/scripts/main_with_documentation.py:603:66: PLR2004 Magic value used in comparison, consider replacing `40` with a constant variable
    |
602 |             # Critical recommendations based on combined metrics
603 |             if combined_metrics.get("overall_health_score", 0) < 40:
    |                                                                  ^^ PLR2004
604 |                 recommendations["critical"].append(
605 |                     {
    |

.github/scripts/main_with_documentation.py:624:66: PLR2004 Magic value used in comparison, consider replacing `60` with a constant variable
    |
623 |             # Strategic recommendations
624 |             if combined_metrics.get("documentation_health", 0) < 60:
    |                                                                  ^^ PLR2004
625 |                 recommendations["strategic"].append(
626 |                     {
    |

.github/scripts/main_with_documentation.py:638:66: PLR2004 Magic value used in comparison, consider replacing `40` with a constant variable
    |
636 |                 )
637 |
638 |             if combined_metrics.get("community_engagement", 0) < 40:
    |                                                                  ^^ PLR2004
639 |                 recommendations["strategic"].append(
640 |                     {
    |

.github/scripts/main_with_documentation.py:675:14: PTH123 `open()` should be replaced by `Path.open()`
    |
673 |         # JSON export
674 |         json_path = output_path / "comprehensive_analysis.json"
675 |         with open(json_path, "w", encoding="utf-8") as f:
    |              ^^^^ PTH123
676 |             json.dump(analysis_results, f, indent=2, default=str)
    |

.github/scripts/main_with_documentation.py:681:14: PTH123 `open()` should be replaced by `Path.open()`
    |
679 |         report_path = output_path / "analysis_report.md"
680 |         report_content = self._generate_markdown_report(analysis_results)
681 |         with open(report_path, "w", encoding="utf-8") as f:
    |              ^^^^ PTH123
682 |             f.write(report_content)
    |

.github/scripts/main_with_documentation.py:689:9: PLR0915 Too many statements (65 > 50)
    |
687 |         logger.info(f"Analysis results exported to {output_path}")
688 |
689 |     def _generate_markdown_report(self, analysis_results: dict[str, Any]) -> str:
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
690 |         """Generate a comprehensive markdown report."""
691 |         report = []
    |

.github/scripts/main_with_documentation.py:788:18: PTH123 `open()` should be replaced by `Path.open()`
    |
786 |         if combined_metrics:
787 |             csv_path = output_path / "combined_metrics.csv"
788 |             with open(csv_path, "w", newline="", encoding="utf-8") as f:
    |                  ^^^^ PTH123
789 |                 writer = csv.writer(f)
790 |                 writer.writerow(["Metric", "Value"])
    |

.github/scripts/main_with_documentation.py:798:18: PTH123 `open()` should be replaced by `Path.open()`
    |
796 |         if doc_metrics:
797 |             csv_path = output_path / "documentation_metrics.csv"
798 |             with open(csv_path, "w", newline="", encoding="utf-8") as f:
    |                  ^^^^ PTH123
799 |                 writer = csv.writer(f)
800 |                 writer.writerow(["Metric", "Value"])
    |

.github/scripts/notification_service.py:147:43: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
145 |                 ) as response,
146 |             ):
147 |                 return response.status == 200
    |                                           ^^^ PLR2004
148 |         except Exception as e:
149 |             logger.error(f"Slack notification error: {e!s}")
    |

.github/scripts/notification_service.py:372:47: ARG002 Unused method argument: `recipient`
    |
370 |         return text
371 |
372 |     async def _send_github_notification(self, recipient: NotificationRecipient, content: NotificationContent) -> bool:
    |                                               ^^^^^^^^^ ARG002
373 |         """Send a notification via GitHub (comment or status)."""
374 |         if not self.github_token or not content.repository:
    |

.github/scripts/notification_service.py:391:47: PLR2004 Magic value used in comparison, consider replacing `201` with a constant variable
    |
389 |                     session.post(url, headers=headers, json={"body": comment_body}) as response,
390 |                 ):
391 |                     return response.status == 201
    |                                               ^^^ PLR2004
392 |
393 |             return False
    |

.github/scripts/notification_service.py:506:14: B007 Loop control variable `recipient_id` not used within loop body
    |
505 |         # Send individual or digest notifications
506 |         for (recipient_id, notif_type), group in grouped.items():
    |              ^^^^^^^^^^^^ B007
507 |             if len(group) == 1:
508 |                 # Send individual notification
    |
    = help: Rename unused `recipient_id` to `_recipient_id`

.github/scripts/notification_service.py:533:20: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
531 |                 message_parts.append(f"   Repository: {content.repository}")
532 |
533 |         if count > 5:
    |                    ^ PLR2004
534 |             message_parts.append(f"\n... and {count - 5} more")
    |

.github/scripts/pr_processor.py:439:12: PLW0602 Using global for `processing_threads` but no assignment is done
    |
437 | def start_processing_threads():
438 |     """Start processing threads for the queue."""
439 |     global processing_threads
    |            ^^^^^^^^^^^^^^^^^^ PLW0602
440 |     global is_running
    |

.github/scripts/pr_processor.py:440:12: PLW0603 Using the global statement to update `is_running` is discouraged
    |
438 |     """Start processing threads for the queue."""
439 |     global processing_threads
440 |     global is_running
    |            ^^^^^^^^^^ PLW0603
441 |
442 |     is_running = True
    |

.github/scripts/pr_processor.py:455:12: PLW0603 Using the global statement to update `is_running` is discouraged
    |
453 | def stop_processing_threads():
454 |     """Stop processing threads."""
455 |     global is_running
    |            ^^^^^^^^^^ PLW0603
456 |
457 |     is_running = False
    |

.github/scripts/pr_processor.py:470:1: E402 Module level import not at top of file
    |
469 | # Register shutdown function
470 | import atexit
    | ^^^^^^^^^^^^^ E402
471 |
472 | atexit.register(stop_processing_threads)
    |

.github/scripts/repositories/__init__.py:1:1: N999 Invalid module name: '.github'
.github/scripts/repositories/base_repository.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from typing import Any, TypeVar
12 |
13 | from ..core.exceptions import DatabaseError, EntityNotFoundError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..core.interfaces import DatabaseInterface, RepositoryInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/repositories/base_repository.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from typing import Any, TypeVar
12 |
13 | from ..core.exceptions import DatabaseError, EntityNotFoundError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..core.interfaces import DatabaseInterface, RepositoryInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/repositories/base_repository.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..core.exceptions import DatabaseError, EntityNotFoundError
14 | from ..core.interfaces import DatabaseInterface, RepositoryInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 |
16 | T = TypeVar("T")
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/repositories/base_repository.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..core.exceptions import DatabaseError, EntityNotFoundError
14 | from ..core.interfaces import DatabaseInterface, RepositoryInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 |
16 | T = TypeVar("T")
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/repositories/base_repository.py:56:17: S608 Possible SQL injection vector through string-based query construction
   |
54 |     async def find_by_id(self, entity_id: str) -> Entity | None:
55 |         """Find entity by ID."""
56 |         query = f"SELECT * FROM {self.table_name} WHERE id = ?"
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S608
57 |         result = await self.database.execute(query, {"id": entity_id})
   |

.github/scripts/repositories/base_repository.py:72:24: S608 Possible SQL injection vector through string-based query construction
   |
70 |     ) -> list[Entity]:
71 |         """Find all entities matching filters."""
72 |         query_parts = [f"SELECT * FROM {self.table_name}"]
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S608
73 |         params = {}
   |

.github/scripts/repositories/base_repository.py:120:17: S608 Possible SQL injection vector through string-based query construction
    |
118 |           placeholders = [f":{col}" for col in columns]
119 |
120 |           query = f"""
    |  _________________^
121 | |             INSERT INTO {self.table_name} ({", ".join(columns)})
122 | |             VALUES ({", ".join(placeholders)})
123 | |         """
    | |___________^ S608
124 |
125 |           await self.database.execute(query, data)
    |

.github/scripts/repositories/base_repository.py:140:17: S608 Possible SQL injection vector through string-based query construction
    |
138 |           # Build update query
139 |           set_clauses = [f"{col} = :{col}" for col in updates]
140 |           query = f"""
    |  _________________^
141 | |             UPDATE {self.table_name}
142 | |             SET {", ".join(set_clauses)}
143 | |             WHERE id = :id
144 | |         """
    | |___________^ S608
145 |
146 |           params = {**updates, "id": entity_id}
    |

.github/scripts/repositories/base_repository.py:153:17: S608 Possible SQL injection vector through string-based query construction
    |
151 |     async def delete(self, entity_id: str) -> bool:
152 |         """Delete entity."""
153 |         query = f"DELETE FROM {self.table_name} WHERE id = ?"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S608
154 |         result = await self.database.execute(query, {"id": entity_id})
    |

.github/scripts/repositories/base_repository.py:160:24: S608 Possible SQL injection vector through string-based query construction
    |
158 |     async def count(self, filters: dict[str, Any] | None = None) -> int:
159 |         """Count entities matching filters."""
160 |         query_parts = [f"SELECT COUNT(*) FROM {self.table_name}"]
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S608
161 |         params = {}
    |

.github/scripts/repositories/base_repository.py:182:17: S608 Possible SQL injection vector through string-based query construction
    |
180 |     async def exists(self, entity_id: str) -> bool:
181 |         """Check if entity exists."""
182 |         query = f"SELECT 1 FROM {self.table_name} WHERE id = ? LIMIT 1"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S608
183 |         result = await self.database.execute(query, {"id": entity_id})
    |

.github/scripts/repositories/base_repository.py:223:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
222 |     def __init__(self, db_path: str, table_name: str):
223 |         from ..implementations.sqlite_database import SQLiteDatabase
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
224 |
225 |         database = SQLiteDatabase(db_path)
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/scripts/repositories/review_repository.py:286:1: E402 Module level import not at top of file
    |
285 | # Import json at the top of file
286 | import json
    | ^^^^^^^^^^^ E402
    |

.github/scripts/run_documentation_analysis.py:14:20: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
13 | # Add the current directory to the Python path
14 | sys.path.insert(0, os.path.dirname(__file__))
   |                    ^^^^^^^^^^^^^^^ PTH120
15 |
16 | from analyzers.documentation_analyzer import DocumentationAnalysisSystem
   |

.github/scripts/run_documentation_analysis.py:29:5: PLR0912 Too many branches (21 > 12)
   |
29 | def main():
   |     ^^^^ PLR0912
30 |     """Main function."""
31 |     parser = argparse.ArgumentParser(
   |

.github/scripts/run_documentation_analysis.py:29:5: PLR0915 Too many statements (78 > 50)
   |
29 | def main():
   |     ^^^^ PLR0915
30 |     """Main function."""
31 |     parser = argparse.ArgumentParser(
   |

.github/scripts/run_documentation_analysis.py:128:18: PTH123 `open()` should be replaced by `Path.open()`
    |
126 |             report_path = output_dir / "documentation_analysis_report.md"
127 |             report_content = system.generate_report(results)
128 |             with open(report_path, "w", encoding="utf-8") as f:
    |                  ^^^^ PTH123
129 |                 f.write(report_content)
130 |             logger.info(f"Markdown report exported to: {report_path}")
    |

.github/scripts/run_documentation_analysis.py:135:18: PTH123 `open()` should be replaced by `Path.open()`
    |
133 |             html_path = output_dir / "documentation_analysis_report.html"
134 |             html_content = generate_html_report(results)
135 |             with open(html_path, "w", encoding="utf-8") as f:
    |                  ^^^^ PTH123
136 |                 f.write(html_content)
137 |             logger.info(f"HTML report exported to: {html_path}")
    |

.github/scripts/security_manager.py:30:17: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
29 | # Constants
30 | AUDIT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "audit.db")
   |                 ^^^^^^^^^^^^ PTH118
31 | ENCRYPTION_KEY_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "security", "encryption.key")
   |

.github/scripts/security_manager.py:30:30: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
29 | # Constants
30 | AUDIT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "audit.db")
   |                              ^^^^^^^^^^^^^^^ PTH120
31 | ENCRYPTION_KEY_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "security", "encryption.key")
   |

.github/scripts/security_manager.py:31:23: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
29 | # Constants
30 | AUDIT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "audit.db")
31 | ENCRYPTION_KEY_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "security", "encryption.key")
   |                       ^^^^^^^^^^^^ PTH118
   |

.github/scripts/security_manager.py:31:36: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
29 | # Constants
30 | AUDIT_DB_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "data", "audit.db")
31 | ENCRYPTION_KEY_PATH = os.path.join(os.path.dirname(__file__), "..", "..", ".kiro", "security", "encryption.key")
   |                                    ^^^^^^^^^^^^^^^ PTH120
   |

.github/scripts/security_manager.py:43:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
42 |         # Ensure directories exist
43 |         os.makedirs(os.path.dirname(self.audit_db_path), exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
44 |         os.makedirs(os.path.dirname(self.encryption_key_path), exist_ok=True)
   |

.github/scripts/security_manager.py:43:21: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
42 |         # Ensure directories exist
43 |         os.makedirs(os.path.dirname(self.audit_db_path), exist_ok=True)
   |                     ^^^^^^^^^^^^^^^ PTH120
44 |         os.makedirs(os.path.dirname(self.encryption_key_path), exist_ok=True)
   |

.github/scripts/security_manager.py:44:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
42 |         # Ensure directories exist
43 |         os.makedirs(os.path.dirname(self.audit_db_path), exist_ok=True)
44 |         os.makedirs(os.path.dirname(self.encryption_key_path), exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
45 |
46 |         # Initialize encryption
   |

.github/scripts/security_manager.py:44:21: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
42 |         # Ensure directories exist
43 |         os.makedirs(os.path.dirname(self.audit_db_path), exist_ok=True)
44 |         os.makedirs(os.path.dirname(self.encryption_key_path), exist_ok=True)
   |                     ^^^^^^^^^^^^^^^ PTH120
45 |
46 |         # Initialize encryption
   |

.github/scripts/security_manager.py:56:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
54 |         try:
55 |             # Try to load existing key
56 |             if os.path.exists(self.encryption_key_path):
   |                ^^^^^^^^^^^^^^ PTH110
57 |                 with open(self.encryption_key_path, "rb") as f:
58 |                     key = f.read()
   |

.github/scripts/security_manager.py:57:22: PTH123 `open()` should be replaced by `Path.open()`
   |
55 |             # Try to load existing key
56 |             if os.path.exists(self.encryption_key_path):
57 |                 with open(self.encryption_key_path, "rb") as f:
   |                      ^^^^ PTH123
58 |                     key = f.read()
59 |             else:
   |

.github/scripts/security_manager.py:62:22: PTH123 `open()` should be replaced by `Path.open()`
   |
60 |                 # Generate new key
61 |                 key = Fernet.generate_key()
62 |                 with open(self.encryption_key_path, "wb") as f:
   |                      ^^^^ PTH123
63 |                     f.write(key)
64 |                 # Set secure permissions
   |

.github/scripts/security_manager.py:65:17: PTH101 `os.chmod()` should be replaced by `Path.chmod()`
   |
63 |                     f.write(key)
64 |                 # Set secure permissions
65 |                 os.chmod(self.encryption_key_path, 0o600)
   |                 ^^^^^^^^ PTH101
66 |                 logger.info("Generated new encryption key")
   |

.github/scripts/security_manager.py:595:21: E722 Do not use bare `except`
    |
593 |                         decrypted_details = self.cipher.decrypt(row[7].encode()).decode()
594 |                         log_entry["details"] = json.loads(decrypted_details)
595 |                     except:
    |                     ^^^^^^ E722
596 |                         log_entry["details"] = {"error": "Failed to decrypt details"}
    |

.github/scripts/services/__init__.py:1:1: N999 Invalid module name: '.github'
.github/scripts/services/authentication_service.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | import jwt
13 |
14 | from ..core.exceptions import AuthenticationError, ConfigurationError, TokenError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..core.interfaces import AuthenticationInterface, CacheInterface, DatabaseInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/authentication_service.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | import jwt
13 |
14 | from ..core.exceptions import AuthenticationError, ConfigurationError, TokenError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..core.interfaces import AuthenticationInterface, CacheInterface, DatabaseInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/authentication_service.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | import jwt
13 |
14 | from ..core.exceptions import AuthenticationError, ConfigurationError, TokenError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..core.interfaces import AuthenticationInterface, CacheInterface, DatabaseInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/authentication_service.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..core.exceptions import AuthenticationError, ConfigurationError, TokenError
15 | from ..core.interfaces import AuthenticationInterface, CacheInterface, DatabaseInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/authentication_service.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..core.exceptions import AuthenticationError, ConfigurationError, TokenError
15 | from ..core.interfaces import AuthenticationInterface, CacheInterface, DatabaseInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/authentication_service.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..core.exceptions import AuthenticationError, ConfigurationError, TokenError
15 | from ..core.interfaces import AuthenticationInterface, CacheInterface, DatabaseInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/authentication_service.py:28:48: PLR2004 Magic value used in comparison, consider replacing `32` with a constant variable
   |
26 |         refresh_token_expire_days: int = 30,
27 |     ):
28 |         if not secret_key or len(secret_key) < 32:
   |                                                ^^ PLR2004
29 |             raise ConfigurationError("JWT secret key must be at least 32 characters")
   |

.github/scripts/services/authentication_service.py:53:57: F821 Undefined name `Any`
   |
51 |         self.cache = cache
52 |
53 |     async def authenticate(self, credentials: dict[str, Any]) -> str | None:
   |                                                         ^^^ F821
54 |         """
55 |         Authenticate user and return access token.
   |

.github/scripts/services/authentication_service.py:76:61: F821 Undefined name `Any`
   |
74 |         raise AuthenticationError("Invalid credentials format")
75 |
76 |     async def validate_token(self, token: str) -> dict[str, Any] | None:
   |                                                             ^^^ F821
77 |         """
78 |         Validate token and return claims.
   |

.github/scripts/services/authentication_service.py:138:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
137 |         except jwt.ExpiredSignatureError:
138 |             raise TokenError("Refresh token has expired")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
139 |         except jwt.InvalidTokenError:
140 |             raise TokenError("Invalid refresh token")
    |

.github/scripts/services/authentication_service.py:140:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
138 |             raise TokenError("Refresh token has expired")
139 |         except jwt.InvalidTokenError:
140 |             raise TokenError("Invalid refresh token")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
141 |
142 |     async def revoke_token(self, token: str) -> bool:
    |

.github/scripts/services/webhook_service.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from typing import Any
15 |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from typing import Any
15 |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from typing import Any
15 |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | logger = logging.getLogger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | logger = logging.getLogger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | logger = logging.getLogger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ..core.exceptions import ConfigurationError, WebhookProcessingError, WebhookValidationError
17 | from ..core.interfaces import CacheInterface, GitHubClientInterface, MetricsInterface, QueueInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | logger = logging.getLogger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/scripts/services/webhook_service.py:133:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
131 |             payload = json.loads(body.decode("utf-8"))
132 |         except json.JSONDecodeError as e:
133 |             raise WebhookValidationError(f"Invalid JSON payload: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
134 |
135 |         # Create event object
    |

.github/scripts/services/webhook_service.py:182:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
180 |             self.metrics.increment("webhook.processed", tags={"event": event.event_type, "status": "error"})
181 |
182 |             raise WebhookProcessingError(f"Failed to process {event.event_type}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
183 |
184 |     async def _handle_pull_request(self, event: WebhookEvent) -> dict[str, Any]:
    |

.github/scripts/services/webhook_service.py:238:49: ARG002 Unused method argument: `event`
    |
236 |         return {"processed": False, "reason": "no_kiro_mention"}
237 |
238 |     async def _handle_pull_request_review(self, event: WebhookEvent) -> dict[str, Any]:
    |                                                 ^^^^^ ARG002
239 |         """Handle pull request review events."""
240 |         # Implementation for review events
    |

.github/scripts/services/webhook_service.py:243:34: ARG002 Unused method argument: `event`
    |
241 |         return {"processed": True, "action": "review_recorded"}
242 |
243 |     async def _handle_push(self, event: WebhookEvent) -> dict[str, Any]:
    |                                  ^^^^^ ARG002
244 |         """Handle push events."""
245 |         # Implementation for push events
    |

.github/scripts/services/webhook_service.py:248:37: ARG002 Unused method argument: `event`
    |
246 |         return {"processed": False, "reason": "push_events_not_supported"}
247 |
248 |     async def _handle_release(self, event: WebhookEvent) -> dict[str, Any]:
    |                                     ^^^^^ ARG002
249 |         """Handle release events."""
250 |         # Implementation for release events
    |

.github/scripts/services/webhook_service.py:281:62: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
279 |         # Higher priority for smaller PRs
280 |         pr = pr_data["pr_data"]
281 |         if pr.get("additions", 0) + pr.get("deletions", 0) < 100:
    |                                                              ^^^ PLR2004
282 |             priority += 2
    |

.github/scripts/slack_integration.py:107:29: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
105 |             status_emoji = "🔴"
106 |             status_text = "Critical Issues Found"
107 |         elif total_issues > 5:
    |                             ^ PLR2004
108 |             status_emoji = "🟡"
109 |             status_text = "Multiple Issues Found"
    |

.github/scripts/slack_integration.py:288:26: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
287 |         parts = command["text"].strip().split()
288 |         if len(parts) != 2:
    |                          ^ PLR2004
289 |             await client.chat_postEphemeral(
290 |                 channel=command["channel_id"],
    |

.github/scripts/slack_integration.py:358:38: ARG002 Unused method argument: `repository`
    |
356 |         await client.chat_postMessage(channel=command["channel_id"], text="Kiro statistics", blocks=blocks)
357 |
358 |     def _generate_sample_stats(self, repository: str | None) -> dict[str, Any]:
    |                                      ^^^^^^^^^^ ARG002
359 |         """Generate sample statistics (would be replaced with real data)."""
360 |         return {
    |

.github/scripts/webhook_server.py:53:5: PLR0911 Too many return statements (7 > 6)
   |
52 | @app.route("/api/webhooks/github", methods=["POST"])
53 | def github_webhook():
   |     ^^^^^^^^^^^^^^ PLR0911
54 |     """Handle GitHub webhook events."""
55 |     # Verify signature
   |

.github/scripts/webhook_server.py:110:39: PLW1508 Invalid type for environment variable default; expected `str` or `None`
    |
108 | def main():
109 |     """Run the webhook server."""
110 |     port = int(os.environ.get("PORT", 5000))
    |                                       ^^^^ PLW1508
111 |     app.run(host="0.0.0.0", port=port)
    |

.github/scripts/webhook_server.py:111:18: S104 Possible binding to all interfaces
    |
109 |     """Run the webhook server."""
110 |     port = int(os.environ.get("PORT", 5000))
111 |     app.run(host="0.0.0.0", port=port)
    |                  ^^^^^^^^^ S104
    |

.github/tests/e2e/test_complete_flows.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | import pytest
15 |
16 | from ...scripts.core.container import ServiceContainer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ...scripts.core.logging import configure_logging, get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ...scripts.core.container import ServiceContainer
17 | from ...scripts.core.logging import configure_logging, get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | # Configure logging for tests
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ...scripts.core.container import ServiceContainer
17 | from ...scripts.core.logging import configure_logging, get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | # Configure logging for tests
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:37:9: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |           """Set up test environment."""
36 |           # Register mock services
37 | /         from ...scripts.core.interfaces import (
38 | |             CacheInterface,
39 | |             DatabaseInterface,
40 | |             GitHubClientInterface,
41 | |             MetricsInterface,
42 | |             NotificationInterface,
43 | |             QueueInterface,
44 | |         )
   | |_________^ TID252
45 |
46 |           # Mock implementations
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:37:9: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |           """Set up test environment."""
36 |           # Register mock services
37 | /         from ...scripts.core.interfaces import (
38 | |             CacheInterface,
39 | |             DatabaseInterface,
40 | |             GitHubClientInterface,
41 | |             MetricsInterface,
42 | |             NotificationInterface,
43 | |             QueueInterface,
44 | |         )
   | |_________^ TID252
45 |
46 |           # Mock implementations
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:37:9: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |           """Set up test environment."""
36 |           # Register mock services
37 | /         from ...scripts.core.interfaces import (
38 | |             CacheInterface,
39 | |             DatabaseInterface,
40 | |             GitHubClientInterface,
41 | |             MetricsInterface,
42 | |             NotificationInterface,
43 | |             QueueInterface,
44 | |         )
   | |_________^ TID252
45 |
46 |           # Mock implementations
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:37:9: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |           """Set up test environment."""
36 |           # Register mock services
37 | /         from ...scripts.core.interfaces import (
38 | |             CacheInterface,
39 | |             DatabaseInterface,
40 | |             GitHubClientInterface,
41 | |             MetricsInterface,
42 | |             NotificationInterface,
43 | |             QueueInterface,
44 | |         )
   | |_________^ TID252
45 |
46 |           # Mock implementations
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:37:9: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |           """Set up test environment."""
36 |           # Register mock services
37 | /         from ...scripts.core.interfaces import (
38 | |             CacheInterface,
39 | |             DatabaseInterface,
40 | |             GitHubClientInterface,
41 | |             MetricsInterface,
42 | |             NotificationInterface,
43 | |             QueueInterface,
44 | |         )
   | |_________^ TID252
45 |
46 |           # Mock implementations
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:37:9: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |           """Set up test environment."""
36 |           # Register mock services
37 | /         from ...scripts.core.interfaces import (
38 | |             CacheInterface,
39 | |             DatabaseInterface,
40 | |             GitHubClientInterface,
41 | |             MetricsInterface,
42 | |             NotificationInterface,
43 | |             QueueInterface,
44 | |         )
   | |_________^ TID252
45 |
46 |           # Mock implementations
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:71:69: ARG002 Unused method argument: `kwargs`
   |
69 |         self.notifications.send.side_effect = self._send_notification
70 |
71 |     async def _queue_publish(self, queue_name: str, message: Any, **kwargs):
   |                                                                     ^^^^^^ ARG002
72 |         """Mock queue publish."""
73 |         msg_id = f"msg-{len(self.webhook_events)}"
   |

.github/tests/e2e/test_complete_flows.py:95:86: ARG002 Unused method argument: `kwargs`
   |
93 |         }
94 |
95 |     async def _send_notification(self, recipient: str, subject: str, message: str, **kwargs):
   |                                                                                      ^^^^^^ ARG002
96 |         """Mock notification sending."""
97 |         notification = {
   |

.github/tests/e2e/test_complete_flows.py:145:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
144 |         # 2. Process webhook
145 |         from ...scripts.services.webhook_service import WebhookService, WebhookValidator
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
146 |
147 |         validator = WebhookValidator("test-secret")
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_complete_flows.py:145:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
144 |         # 2. Process webhook
145 |         from ...scripts.services.webhook_service import WebhookService, WebhookValidator
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
146 |
147 |         validator = WebhookValidator("test-secret")
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/tests/e2e/test_e2e_scenarios.py:16:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
15 | # Add parent directory to path for imports
16 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "scripts"))
   |                    ^^^^^^^^^^^^ PTH118
   |

.github/tests/e2e/test_e2e_scenarios.py:16:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
15 | # Add parent directory to path for imports
16 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "scripts"))
   |                                 ^^^^^^^^^^^^^^^ PTH120
   |

.github/tests/e2e/test_e2e_scenarios.py:53:55: ARG002 Unused method argument: `e2e_config`
   |
52 |     @pytest.mark.asyncio
53 |     async def test_new_pr_complete_review_cycle(self, e2e_config, mock_github_api):
   |                                                       ^^^^^^^^^^ ARG002
54 |         """Test complete cycle: PR opened -> analysis -> review -> notification."""
55 |         # Simulate webhook payload for new PR
   |

.github/tests/e2e/test_e2e_scenarios.py:96:59: ARG002 Unused method argument: `e2e_config`
   |
95 |     @pytest.mark.asyncio
96 |     async def test_pr_with_incremental_improvements(self, e2e_config, mock_github_api):
   |                                                           ^^^^^^^^^^ ARG002
97 |         """Test PR that gets updated based on review feedback."""
98 |         # Initial PR with issues
   |

.github/tests/e2e/test_e2e_scenarios.py:137:44: ARG002 Unused method argument: `e2e_config`
    |
136 |     @pytest.mark.asyncio
137 |     async def test_large_pr_handling(self, e2e_config, mock_github_api):
    |                                            ^^^^^^^^^^ ARG002
138 |         """Test handling of large PRs with many files."""
139 |         # Create a large PR with 50+ files
    |

.github/tests/e2e/test_e2e_scenarios.py:164:44: ARG002 Unused method argument: `e2e_config`
    |
163 |     @pytest.mark.asyncio
164 |     async def test_multi_language_pr(self, e2e_config, mock_github_api):
    |                                            ^^^^^^^^^^ ARG002
165 |         """Test PR with multiple programming languages."""
166 |         multi_lang_files = [
    |

.github/tests/e2e/test_e2e_scenarios.py:198:56: ARG002 Unused method argument: `e2e_config`
    |
197 |     @pytest.mark.asyncio
198 |     async def test_emergency_security_alert_flow(self, e2e_config, mock_github_api):
    |                                                        ^^^^^^^^^^ ARG002
199 |         """Test critical security issue triggers emergency flow."""
200 |         critical_security_pr = {
    |

.github/tests/e2e/test_e2e_scenarios.py:249:59: ARG002 Unused method argument: `e2e_config`
    |
248 |     @pytest.mark.asyncio
249 |     async def test_performance_regression_detection(self, e2e_config, mock_github_api):
    |                                                           ^^^^^^^^^^ ARG002
250 |         """Test detection of performance regressions."""
251 |         pr_with_perf_issue = {
    |

.github/tests/e2e/test_e2e_scenarios.py:289:52: ARG002 Unused method argument: `e2e_config`
    |
288 |     @pytest.mark.asyncio
289 |     async def test_custom_rule_configuration(self, e2e_config, mock_github_api):
    |                                                    ^^^^^^^^^^ ARG002
290 |         """Test repository-specific custom rules."""
    |

.github/tests/integration/test_github_api_integration.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | import pytest
14 |
15 | from ...scripts.core.interfaces import GitHubClientInterface
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ...scripts.repositories.review_repository import Review, ReviewRepository
17 | from ...scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...scripts.core.interfaces import GitHubClientInterface
16 | from ...scripts.repositories.review_repository import Review, ReviewRepository
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ...scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...scripts.core.interfaces import GitHubClientInterface
16 | from ...scripts.repositories.review_repository import Review, ReviewRepository
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ...scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...scripts.core.interfaces import GitHubClientInterface
16 | from ...scripts.repositories.review_repository import Review, ReviewRepository
17 | from ...scripts.services.webhook_service import WebhookService, WebhookValidator
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...scripts.core.interfaces import GitHubClientInterface
16 | from ...scripts.repositories.review_repository import Review, ReviewRepository
17 | from ...scripts.services.webhook_service import WebhookService, WebhookValidator
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:39:34: ARG002 Unused method argument: `owner`
   |
37 |         return self.pull_requests[key]
38 |
39 |     async def get_pr_files(self, owner: str, repo: str, pr_number: int) -> list[dict[str, Any]]:
   |                                  ^^^^^ ARG002
40 |         """Get mock PR files."""
41 |         # Return test files
   |

.github/tests/integration/test_github_api_integration.py:39:46: ARG002 Unused method argument: `repo`
   |
37 |         return self.pull_requests[key]
38 |
39 |     async def get_pr_files(self, owner: str, repo: str, pr_number: int) -> list[dict[str, Any]]:
   |                                              ^^^^ ARG002
40 |         """Get mock PR files."""
41 |         # Return test files
   |

.github/tests/integration/test_github_api_integration.py:39:57: ARG002 Unused method argument: `pr_number`
   |
37 |         return self.pull_requests[key]
38 |
39 |     async def get_pr_files(self, owner: str, repo: str, pr_number: int) -> list[dict[str, Any]]:
   |                                                         ^^^^^^^^^ ARG002
40 |         """Get mock PR files."""
41 |         # Return test files
   |

.github/tests/integration/test_github_api_integration.py:61:35: ARG002 Unused method argument: `owner`
   |
59 |         ]
60 |
61 |     async def create_review(self, owner: str, repo: str, pr_number: int, review_data: dict[str, Any]) -> dict[str, Any]:
   |                                   ^^^^^ ARG002
62 |         """Create mock review."""
63 |         review_id = f"review-{len(self.reviews) + 1}"
   |

.github/tests/integration/test_github_api_integration.py:61:47: ARG002 Unused method argument: `repo`
   |
59 |         ]
60 |
61 |     async def create_review(self, owner: str, repo: str, pr_number: int, review_data: dict[str, Any]) -> dict[str, Any]:
   |                                               ^^^^ ARG002
62 |         """Create mock review."""
63 |         review_id = f"review-{len(self.reviews) + 1}"
   |

.github/tests/integration/test_github_api_integration.py:75:42: ARG002 Unused method argument: `owner`
   |
73 |         return review
74 |
75 |     async def create_issue_comment(self, owner: str, repo: str, issue_number: int, body: str) -> dict[str, Any]:
   |                                          ^^^^^ ARG002
76 |         """Create mock issue comment."""
77 |         comment_id = f"comment-{len(self.comments) + 1}"
   |

.github/tests/integration/test_github_api_integration.py:75:54: ARG002 Unused method argument: `repo`
   |
73 |         return review
74 |
75 |     async def create_issue_comment(self, owner: str, repo: str, issue_number: int, body: str) -> dict[str, Any]:
   |                                                      ^^^^ ARG002
76 |         """Create mock issue comment."""
77 |         comment_id = f"comment-{len(self.comments) + 1}"
   |

.github/tests/integration/test_github_api_integration.py:205:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
203 |     async def test_pr_analysis_flow(self, mock_github_client):
204 |         """Test complete PR analysis flow."""
205 |         from ...scripts.analyzers.base_analyzer import BaseAnalyzer
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
206 |         from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:206:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
204 |         """Test complete PR analysis flow."""
205 |         from ...scripts.analyzers.base_analyzer import BaseAnalyzer
206 |         from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
207 |
208 |         # Get PR files
    |
    = help: Replace relative imports from parent modules with absolute imports

.github/tests/integration/test_github_api_integration.py:286:47: ARG002 Unused method argument: `mock_github_client`
    |
285 |     @pytest.mark.asyncio
286 |     async def test_pr_synchronize_event(self, mock_github_client):
    |                                               ^^^^^^^^^^^^^^^^^^ ARG002
287 |         """Test handling PR synchronization (new commits)."""
288 |         payload = {
    |

.github/tests/integration/test_github_api_integration.py:304:49: ARG002 Unused method argument: `mock_github_client`
    |
303 |     @pytest.mark.asyncio
304 |     async def test_review_requested_event(self, mock_github_client):
    |                                                 ^^^^^^^^^^^^^^^^^^ ARG002
305 |         """Test handling review request event."""
306 |         payload = {
    |

.github/tests/integration/test_github_api_integration.py:317:48: ARG002 Unused method argument: `mock_github_client`
    |
316 |     @pytest.mark.asyncio
317 |     async def test_comment_mention_event(self, mock_github_client):
    |                                                ^^^^^^^^^^^^^^^^^^ ARG002
318 |         """Test handling @kiro-ai mentions in comments."""
319 |         payload = {
    |

.github/tests/integration/test_github_integration.py:16:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
15 | # Add parent directory to path for imports
16 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "scripts"))
   |                    ^^^^^^^^^^^^ PTH118
17 |
18 | from code_analyzer import CodeAnalyzer
   |

.github/tests/integration/test_github_integration.py:16:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
15 | # Add parent directory to path for imports
16 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "scripts"))
   |                                 ^^^^^^^^^^^^^^^ PTH120
17 |
18 | from code_analyzer import CodeAnalyzer
   |

.github/tests/integration/test_github_integration.py:170:84: ARG002 Unused method argument: `github_client`
    |
169 |     @pytest.mark.asyncio
170 |     async def test_pr_with_security_issues(self, code_analyzer, comment_generator, github_client):
    |                                                                                    ^^^^^^^^^^^^^ ARG002
171 |         """Test handling PR with security vulnerabilities."""
172 |         # Analyze code with SQL injection
    |

.github/tests/integration/test_github_integration.py:228:55: ARG002 Unused method argument: `code_analyzer`
    |
227 |     @pytest.mark.asyncio
228 |     async def test_configuration_based_analysis(self, code_analyzer, integration_config):
    |                                                       ^^^^^^^^^^^^^ ARG002
229 |         """Test that analysis respects configuration settings."""
230 |         # Update config to disable certain checks
    |

.github/tests/integration/test_github_integration.py:254:49: ARG002 Unused method argument: `webhook_handler`
    |
253 |     @pytest.mark.asyncio
254 |     async def test_error_handling_in_flow(self, webhook_handler, pr_processor, github_client):
    |                                                 ^^^^^^^^^^^^^^^ ARG002
255 |         """Test error handling throughout the integration flow."""
256 |         # Simulate GitHub API error
    |

.github/tests/integration/test_github_integration.py:288:70: ARG002 Unused method argument: `pr_processor`
    |
287 |     @pytest.mark.asyncio
288 |     async def test_incremental_review_on_push(self, webhook_handler, pr_processor, code_analyzer):
    |                                                                      ^^^^^^^^^^^^ ARG002
289 |         """Test incremental review when new commits are pushed."""
290 |         # First review
    |

.github/tests/integration/test_github_integration.py:288:84: ARG002 Unused method argument: `code_analyzer`
    |
287 |     @pytest.mark.asyncio
288 |     async def test_incremental_review_on_push(self, webhook_handler, pr_processor, code_analyzer):
    |                                                                                    ^^^^^^^^^^^^^ ARG002
289 |         """Test incremental review when new commits are pushed."""
290 |         # First review
    |

.github/tests/integration/test_github_integration.py:319:85: ARG002 Unused method argument: `github_client`
    |
318 |     @pytest.mark.asyncio
319 |     async def test_auto_fix_suggestion_flow(self, code_analyzer, comment_generator, github_client):
    |                                                                                     ^^^^^^^^^^^^^ ARG002
320 |         """Test flow for suggesting automatic fixes."""
321 |         # Code with fixable issue
    |

.github/tests/integration/test_github_integration.py:348:13: ERA001 Found commented-out code
    |
347 |             # In a real implementation, would create a commit suggestion
348 |             # github_client.create_commit_suggestion(...)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
349 |
350 |     @pytest.mark.asyncio
    |
    = help: Remove commented-out code

.github/tests/performance/test_load.py:19:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
18 | # Add parent directory to path for imports
19 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "scripts"))
   |                    ^^^^^^^^^^^^ PTH118
   |

.github/tests/performance/test_load.py:19:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
18 | # Add parent directory to path for imports
19 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "scripts"))
   |                                 ^^^^^^^^^^^^^^^ PTH120
   |

.github/tests/performance/test_load.py:61:16: F821 Undefined name `random`
   |
60 |         for i in range(num_lines):
61 |             if random.random() < 0.7:  # 70% additions
   |                ^^^^^^ F821
62 |                 line = f"+    line_{i} = 'code here'"
63 |                 # Randomly add issues
   |

.github/tests/performance/test_load.py:64:20: F821 Undefined name `random`
   |
62 |                 line = f"+    line_{i} = 'code here'"
63 |                 # Randomly add issues
64 |                 if random.random() < 0.1:  # 10% security issues
   |                    ^^^^^^ F821
65 |                     line = "+    password = 'hardcoded123'"
66 |                 elif random.random() < 0.2:  # 20% style issues
   |

.github/tests/performance/test_load.py:66:22: F821 Undefined name `random`
   |
64 |                 if random.random() < 0.1:  # 10% security issues
65 |                     line = "+    password = 'hardcoded123'"
66 |                 elif random.random() < 0.2:  # 20% style issues
   |                      ^^^^^^ F821
67 |                     line = f"+line_{i}='no_spaces_around_equals'"
68 |             else:  # 30% context/deletions
   |

.github/tests/performance/test_load.py:188:16: F821 Undefined name `random`
    |
187 |         gc.collect()
188 |         return random.uniform(100, 200)  # Simulated value
    |                ^^^^^^ F821
189 |
190 |     @pytest.mark.asyncio
    |

.github/tests/performance/test_load.py:247:37: F821 Undefined name `random`
    |
246 |                 # Simulate PR processing with repo-specific config
247 |                 await asyncio.sleep(random.uniform(0.1, 0.3))
    |                                     ^^^^^^ F821
248 |
249 |                 repo_results.append({"repo": repo_name, "pr": pr_num, "time": time.time() - start_time})
    |

.github/tests/performance/test_load.py:348:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
346 |             return await asyncio.wait_for(self.simulate_pr_processing(pr_data), timeout=timeout)
347 |         except TimeoutError:
348 |             raise Exception(f"Processing timeout for PR {pr_data['pull_request']['number']}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
349 |
350 |     async def simulate_pr_processing(self, pr_data):
    |

.github/tests/performance/test_load.py:360:28: F821 Undefined name `random`
    |
359 |         # Add some randomness
360 |         processing_time += random.uniform(-0.05, 0.05)
    |                            ^^^^^^ F821
361 |
362 |         await asyncio.sleep(processing_time)
    |

.github/tests/performance/test_load.py:404:29: F821 Undefined name `random`
    |
402 |     async def simulate_operation(self, op_id):
403 |         """Simulate a single operation."""
404 |         await asyncio.sleep(random.uniform(0.01, 0.1))
    |                             ^^^^^^ F821
405 |         if random.random() < 0.95:  # 95% success rate
406 |             return {"op_id": op_id, "status": "success"}
    |

.github/tests/performance/test_load.py:405:12: F821 Undefined name `random`
    |
403 |         """Simulate a single operation."""
404 |         await asyncio.sleep(random.uniform(0.01, 0.1))
405 |         if random.random() < 0.95:  # 95% success rate
    |            ^^^^^^ F821
406 |             return {"op_id": op_id, "status": "success"}
407 |         else:
    |

.github/tests/performance/test_performance.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | import pytest
19 |
20 | from ...scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/performance/test_performance.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | import pytest
19 |
20 | from ...scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/performance/test_performance.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 | from ...scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
23 | from ...scripts.core.logging import configure_logging, get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/performance/test_performance.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 | from ...scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
23 | from ...scripts.core.logging import configure_logging, get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/performance/test_performance.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 | from ...scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
23 | from ...scripts.core.logging import configure_logging, get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/performance/test_performance.py:23:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
23 | from ...scripts.core.logging import configure_logging, get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
24 |
25 | # Configure logging
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/performance/test_performance.py:23:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
21 | from ...scripts.analyzers.security_analyzer import SecurityPatternStrategy
22 | from ...scripts.analyzers.style_analyzer import ComplexityStrategy, StyleGuideStrategy
23 | from ...scripts.core.logging import configure_logging, get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
24 |
25 | # Configure logging
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/run_tests.py:36:18: S603 `subprocess` call: check for execution of untrusted input
   |
34 |         cmd = [sys.executable, "-m", "pytest", suite["directory"], "-v", "--tb=short", f"-k {suite['pattern']}"]
35 |
36 |         result = subprocess.run(cmd, cwd=project_root, check=False)
   |                  ^^^^^^^^^^^^^^ S603
37 |
38 |         if result.returncode != 0:
   |

.github/tests/test_code_analyzer.py:20:1: W293 Blank line contains whitespace
   |
18 | class TestCodeAnalyzer:
19 |     """Test cases for CodeAnalyzer."""
20 |     
   | ^^^^ W293
21 |     @pytest.fixture
22 |     def mock_config(self):
   |
   = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:43:1: W293 Blank line contains whitespace
   |
41 |             'github_token': 'test-token'
42 |         }
43 |     
   | ^^^^ W293
44 |     @pytest.fixture
45 |     def code_analyzer(self, mock_config):
   |
   = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:48:1: W293 Blank line contains whitespace
   |
46 |         """Create a CodeAnalyzer instance for testing."""
47 |         return CodeAnalyzer(mock_config)
48 |     
   | ^^^^ W293
49 |     @pytest.fixture
50 |     def sample_python_code(self):
   |
   = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:72:1: W293 Blank line contains whitespace
   |
70 |     return False
71 | '''
72 |     
   | ^^^^ W293
73 |     @pytest.fixture
74 |     def sample_javascript_code(self):
   |
   = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:86:1: W293 Blank line contains whitespace
   |
84 |     // Security issue: logging sensitive data
85 |     console.log('Processing payment for card: ' + cardNumber);
86 |     
   | ^^^^ W293
87 |     // SQL injection vulnerability
88 |     const query = "SELECT * FROM payments WHERE card = '" + cardNumber + "'";
   |
   = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:97:1: W293 Blank line contains whitespace
   |
95 | };
96 | '''
97 |     
   | ^^^^ W293
98 |     @pytest.mark.asyncio
99 |     async def test_analyze_code_python(self, code_analyzer, sample_python_code):
   |
   = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:106:1: W293 Blank line contains whitespace
    |
104 |             'python'
105 |         )
106 |         
    | ^^^^^^^^ W293
107 |         assert isinstance(result, AnalysisResult)
108 |         assert result.file_path == 'example.py'
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:111:1: W293 Blank line contains whitespace
    |
109 |         assert result.language == 'python'
110 |         assert len(result.issues) > 0
111 |         
    | ^^^^^^^^ W293
112 |         # Check for security issue (eval usage)
113 |         security_issues = [i for i in result.issues if i.type == IssueType.SECURITY]
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:116:1: W293 Blank line contains whitespace
    |
114 |         assert len(security_issues) > 0
115 |         assert any('eval' in issue.message.lower() for issue in security_issues)
116 |     
    | ^^^^ W293
117 |     @pytest.mark.asyncio
118 |     async def test_analyze_code_javascript(self, code_analyzer, sample_javascript_code):
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:125:1: W293 Blank line contains whitespace
    |
123 |             'javascript'
124 |         )
125 |         
    | ^^^^^^^^ W293
126 |         assert isinstance(result, AnalysisResult)
127 |         assert result.file_path == 'example.js'
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:130:1: W293 Blank line contains whitespace
    |
128 |         assert result.language == 'javascript'
129 |         assert len(result.issues) > 0
130 |         
    | ^^^^^^^^ W293
131 |         # Check for various issue types
132 |         issue_types = {issue.type for issue in result.issues}
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:135:1: W293 Blank line contains whitespace
    |
133 |         assert IssueType.SECURITY in issue_types  # SQL injection, hardcoded credentials
134 |         assert IssueType.BUG in issue_types  # Missing error handling
135 |     
    | ^^^^ W293
136 |     @pytest.mark.asyncio
137 |     async def test_analyze_diff_added_lines(self, code_analyzer):
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:144:2: W291 Trailing whitespace
    |
142 |      for item in data:
143 |          result.append(item.upper())
144 | +    
    |  ^^^^ W291
145 | +    # New code with issue
146 | +    password = "hardcoded123"  # Security issue
    |
    = help: Remove trailing whitespace

.github/tests/test_code_analyzer.py:148:1: W293 Blank line contains whitespace
    |
146 | +    password = "hardcoded123"  # Security issue
147 | +    eval(user_input)  # Another security issue
148 |      
    | ^^^^^ W293
149 |      return result
150 | '''
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:151:1: W293 Blank line contains whitespace
    |
149 |      return result
150 | '''
151 |         
    | ^^^^^^^^ W293
152 |         with patch.object(code_analyzer, '_get_file_content', return_value='mock content'):
153 |             result = await code_analyzer.analyze_diff(
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:158:1: W293 Blank line contains whitespace
    |
156 |                 'python'
157 |             )
158 |         
    | ^^^^^^^^ W293
159 |         assert len(result.issues) > 0
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:160:1: W293 Blank line contains whitespace
    |
159 |         assert len(result.issues) > 0
160 |         
    | ^^^^^^^^ W293
161 |         # Check that issues are only for added lines
162 |         added_line_numbers = {15, 16}  # Based on the diff
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:166:1: W293 Blank line contains whitespace
    |
164 |             if issue.line:
165 |                 assert issue.line in added_line_numbers
166 |     
    | ^^^^ W293
167 |     def test_detect_style_issues_long_line(self, code_analyzer):
168 |         """Test detection of long lines."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:174:1: W293 Blank line contains whitespace
    |
172 |             "another short line"
173 |         ]
174 |         
    | ^^^^^^^^ W293
175 |         issues = code_analyzer._detect_style_issues(code_lines, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:176:1: W293 Blank line contains whitespace
    |
175 |         issues = code_analyzer._detect_style_issues(code_lines, 'python')
176 |         
    | ^^^^^^^^ W293
177 |         long_line_issues = [i for i in issues if 'long' in i.message.lower()]
178 |         assert len(long_line_issues) > 0
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:180:1: W293 Blank line contains whitespace
    |
178 |         assert len(long_line_issues) > 0
179 |         assert long_line_issues[0].line == 2
180 |     
    | ^^^^ W293
181 |     def test_detect_style_issues_trailing_whitespace(self, code_analyzer):
182 |         """Test detection of trailing whitespace."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:188:1: W293 Blank line contains whitespace
    |
186 |             "line with trailing tab\t"
187 |         ]
188 |         
    | ^^^^^^^^ W293
189 |         issues = code_analyzer._detect_style_issues(code_lines, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:190:1: W293 Blank line contains whitespace
    |
189 |         issues = code_analyzer._detect_style_issues(code_lines, 'python')
190 |         
    | ^^^^^^^^ W293
191 |         whitespace_issues = [i for i in issues if 'whitespace' in i.message.lower()]
192 |         assert len(whitespace_issues) >= 2
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:193:1: W293 Blank line contains whitespace
    |
191 |         whitespace_issues = [i for i in issues if 'whitespace' in i.message.lower()]
192 |         assert len(whitespace_issues) >= 2
193 |     
    | ^^^^ W293
194 |     def test_detect_security_issues_eval(self, code_analyzer):
195 |         """Test detection of eval usage."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:200:1: W293 Blank line contains whitespace
    |
198 | safe_result = int(user_input)
199 | '''
200 |         
    | ^^^^^^^^ W293
201 |         issues = code_analyzer._detect_security_issues(code, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:202:1: W293 Blank line contains whitespace
    |
201 |         issues = code_analyzer._detect_security_issues(code, 'python')
202 |         
    | ^^^^^^^^ W293
203 |         eval_issues = [i for i in issues if 'eval' in i.message]
204 |         assert len(eval_issues) > 0
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:206:1: W293 Blank line contains whitespace
    |
204 |         assert len(eval_issues) > 0
205 |         assert eval_issues[0].severity == IssueSeverity.CRITICAL
206 |     
    | ^^^^ W293
207 |     def test_detect_security_issues_sql_injection(self, code_analyzer):
208 |         """Test detection of SQL injection vulnerabilities."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:213:1: W293 Blank line contains whitespace
    |
211 | safe_query = "SELECT * FROM users WHERE id = ?"
212 | '''
213 |         
    | ^^^^^^^^ W293
214 |         issues = code_analyzer._detect_security_issues(code, 'javascript')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:215:1: W293 Blank line contains whitespace
    |
214 |         issues = code_analyzer._detect_security_issues(code, 'javascript')
215 |         
    | ^^^^^^^^ W293
216 |         sql_issues = [i for i in issues if 'SQL' in i.message]
217 |         assert len(sql_issues) > 0
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:219:1: W293 Blank line contains whitespace
    |
217 |         assert len(sql_issues) > 0
218 |         assert sql_issues[0].severity == IssueSeverity.CRITICAL
219 |     
    | ^^^^ W293
220 |     def test_detect_security_issues_hardcoded_secrets(self, code_analyzer):
221 |         """Test detection of hardcoded secrets."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:227:1: W293 Blank line contains whitespace
    |
225 | db_password = os.environ.get('DB_PASSWORD')
226 | '''
227 |         
    | ^^^^^^^^ W293
228 |         issues = code_analyzer._detect_security_issues(code, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:229:1: W293 Blank line contains whitespace
    |
228 |         issues = code_analyzer._detect_security_issues(code, 'python')
229 |         
    | ^^^^^^^^ W293
230 |         secret_issues = [i for i in issues if 'hardcoded' in i.message.lower() or 'password' in i.message.lower()]
231 |         assert len(secret_issues) >= 2
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:232:1: W293 Blank line contains whitespace
    |
230 |         secret_issues = [i for i in issues if 'hardcoded' in i.message.lower() or 'password' in i.message.lower()]
231 |         assert len(secret_issues) >= 2
232 |     
    | ^^^^ W293
233 |     def test_detect_bug_patterns_missing_error_handling(self, code_analyzer):
234 |         """Test detection of missing error handling."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:249:1: W293 Blank line contains whitespace
    |
247 |         return None
248 | '''
249 |         
    | ^^^^^^^^ W293
250 |         issues = code_analyzer._detect_bug_patterns(code, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:251:1: W293 Blank line contains whitespace
    |
250 |         issues = code_analyzer._detect_bug_patterns(code, 'python')
251 |         
    | ^^^^^^^^ W293
252 |         error_handling_issues = [i for i in issues if 'error handling' in i.message.lower() or 'exception' in i.message.lower()]
253 |         assert len(error_handling_issues) > 0
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:254:1: W293 Blank line contains whitespace
    |
252 |         error_handling_issues = [i for i in issues if 'error handling' in i.message.lower() or 'exception' in i.message.lower()]
253 |         assert len(error_handling_issues) > 0
254 |     
    | ^^^^ W293
255 |     def test_detect_performance_issues_inefficient_loops(self, code_analyzer):
256 |         """Test detection of inefficient loops."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:268:1: W293 Blank line contains whitespace
    |
266 | average = total / count
267 | '''
268 |         
    | ^^^^^^^^ W293
269 |         issues = code_analyzer._detect_performance_issues(code, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:270:1: W293 Blank line contains whitespace
    |
269 |         issues = code_analyzer._detect_performance_issues(code, 'python')
270 |         
    | ^^^^^^^^ W293
271 |         assert len(issues) > 0
272 |         performance_keywords = ['inefficient', 'performance', 'optimize']
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:277:1: W293 Blank line contains whitespace
    |
275 |             for issue in issues
276 |         )
277 |     
    | ^^^^ W293
278 |     def test_calculate_complexity_simple_function(self, code_analyzer):
279 |         """Test complexity calculation for simple function."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:284:1: W293 Blank line contains whitespace
    |
282 |     return x * 2
283 | '''
284 |         
    | ^^^^^^^^ W293
285 |         complexity = code_analyzer._calculate_complexity(code, 'python')
286 |         assert complexity == 1  # Simple function has complexity 1
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:287:1: W293 Blank line contains whitespace
    |
285 |         complexity = code_analyzer._calculate_complexity(code, 'python')
286 |         assert complexity == 1  # Simple function has complexity 1
287 |     
    | ^^^^ W293
288 |     def test_calculate_complexity_complex_function(self, code_analyzer):
289 |         """Test complexity calculation for complex function."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:307:1: W293 Blank line contains whitespace
    |
305 |     return result
306 | '''
307 |         
    | ^^^^^^^^ W293
308 |         complexity = code_analyzer._calculate_complexity(code, 'python')
309 |         assert complexity >= 6  # Multiple branches and loops
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:310:1: W293 Blank line contains whitespace
    |
308 |         complexity = code_analyzer._calculate_complexity(code, 'python')
309 |         assert complexity >= 6  # Multiple branches and loops
310 |     
    | ^^^^ W293
311 |     def test_suggest_fix_long_line(self, code_analyzer):
312 |         """Test fix suggestion for long lines."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:318:1: W293 Blank line contains whitespace
    |
316 |             'line': 1
317 |         })()
318 |         
    | ^^^^^^^^ W293
319 |         original_line = 'very_long_function_call(parameter1, parameter2, parameter3, parameter4, parameter5, parameter6)'
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:320:1: W293 Blank line contains whitespace
    |
319 |         original_line = 'very_long_function_call(parameter1, parameter2, parameter3, parameter4, parameter5, parameter6)'
320 |         
    | ^^^^^^^^ W293
321 |         fix = code_analyzer._suggest_fix(issue, original_line, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:322:1: W293 Blank line contains whitespace
    |
321 |         fix = code_analyzer._suggest_fix(issue, original_line, 'python')
322 |         
    | ^^^^^^^^ W293
323 |         assert fix is not None
324 |         assert 'very_long_function_call(\n' in fix
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:326:1: W293 Blank line contains whitespace
    |
324 |         assert 'very_long_function_call(\n' in fix
325 |         assert len(fix.split('\n')) > 1  # Should be multi-line
326 |     
    | ^^^^ W293
327 |     def test_suggest_fix_eval_usage(self, code_analyzer):
328 |         """Test fix suggestion for eval usage."""
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:334:1: W293 Blank line contains whitespace
    |
332 |             'line': 1
333 |         })()
334 |         
    | ^^^^^^^^ W293
335 |         original_line = 'result = eval(user_input)'
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:336:1: W293 Blank line contains whitespace
    |
335 |         original_line = 'result = eval(user_input)'
336 |         
    | ^^^^^^^^ W293
337 |         fix = code_analyzer._suggest_fix(issue, original_line, 'python')
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:338:1: W293 Blank line contains whitespace
    |
337 |         fix = code_analyzer._suggest_fix(issue, original_line, 'python')
338 |         
    | ^^^^^^^^ W293
339 |         assert fix is not None
340 |         assert 'eval' not in fix
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:342:1: W293 Blank line contains whitespace
    |
340 |         assert 'eval' not in fix
341 |         assert 'ast.literal_eval' in fix or 'json.loads' in fix
342 |     
    | ^^^^ W293
343 |     @pytest.mark.asyncio
344 |     async def test_get_file_content_from_github(self, code_analyzer):
    |
    = help: Remove whitespace from blank line

.github/tests/test_code_analyzer.py:349:24: SyntaxError: Got unexpected string
    |
347 |         mock_response.status = 200
348 |         mock_response.json = AsyncMock(return_value={
349 |             'content': 'ZG
    |                        ^
    |

.github/tests/test_code_analyzer.py:349:27: SyntaxError: unexpected EOF while parsing
    |
347 |         mock_response.status = 200
348 |         mock_response.json = AsyncMock(return_value={
349 |             'content': 'ZG
    |                           ^
    |

.github/tests/test_code_analyzer.py:349:27: W292 No newline at end of file
    |
347 |         mock_response.status = 200
348 |         mock_response.json = AsyncMock(return_value={
349 |             'content': 'ZG
    |                           ^ W292
    |
    = help: Add trailing newline

.github/tests/test_notification_service.py:13:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
12 | # Add parent directory to path for imports
13 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))
   |                    ^^^^^^^^^^^^ PTH118
14 |
15 | from notification_service import (
   |

.github/tests/test_notification_service.py:13:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
12 | # Add parent directory to path for imports
13 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))
   |                                 ^^^^^^^^^^^^^^^ PTH120
14 |
15 | from notification_service import (
   |

.github/tests/test_refactored_services.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | import pytest
12 |
13 | from ..scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
15 | from ..scripts.core.container import ServiceContainer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | import pytest
12 |
13 | from ..scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
15 | from ..scripts.core.container import ServiceContainer
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..scripts.core.container import ServiceContainer
16 | from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..scripts.core.container import ServiceContainer
16 | from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..scripts.analyzers.base_analyzer import AnalyzerContext, BaseAnalyzer
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
15 | from ..scripts.core.container import ServiceContainer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | from ..scripts.core.interfaces import (
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
15 | from ..scripts.core.container import ServiceContainer
16 | from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..scripts.core.interfaces import (
18 |     CacheInterface,
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..scripts.analyzers.security_analyzer import DependencySecurityStrategy, SecurityPatternStrategy
15 | from ..scripts.core.container import ServiceContainer
16 | from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..scripts.core.interfaces import (
18 |     CacheInterface,
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |   from ..scripts.core.container import ServiceContainer
16 |   from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | / from ..scripts.core.interfaces import (
18 | |     CacheInterface,
19 | |     DatabaseInterface,
20 | |     GitHubClientInterface,
21 | |     IssueLevel,
22 | |     MetricsInterface,
23 | |     QueueInterface,
24 | | )
   | |_^ TID252
25 |   from ..scripts.repositories.review_repository import Review, ReviewRepository
26 |   from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |   from ..scripts.core.container import ServiceContainer
16 |   from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | / from ..scripts.core.interfaces import (
18 | |     CacheInterface,
19 | |     DatabaseInterface,
20 | |     GitHubClientInterface,
21 | |     IssueLevel,
22 | |     MetricsInterface,
23 | |     QueueInterface,
24 | | )
   | |_^ TID252
25 |   from ..scripts.repositories.review_repository import Review, ReviewRepository
26 |   from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |   from ..scripts.core.container import ServiceContainer
16 |   from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | / from ..scripts.core.interfaces import (
18 | |     CacheInterface,
19 | |     DatabaseInterface,
20 | |     GitHubClientInterface,
21 | |     IssueLevel,
22 | |     MetricsInterface,
23 | |     QueueInterface,
24 | | )
   | |_^ TID252
25 |   from ..scripts.repositories.review_repository import Review, ReviewRepository
26 |   from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |   from ..scripts.core.container import ServiceContainer
16 |   from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | / from ..scripts.core.interfaces import (
18 | |     CacheInterface,
19 | |     DatabaseInterface,
20 | |     GitHubClientInterface,
21 | |     IssueLevel,
22 | |     MetricsInterface,
23 | |     QueueInterface,
24 | | )
   | |_^ TID252
25 |   from ..scripts.repositories.review_repository import Review, ReviewRepository
26 |   from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |   from ..scripts.core.container import ServiceContainer
16 |   from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | / from ..scripts.core.interfaces import (
18 | |     CacheInterface,
19 | |     DatabaseInterface,
20 | |     GitHubClientInterface,
21 | |     IssueLevel,
22 | |     MetricsInterface,
23 | |     QueueInterface,
24 | | )
   | |_^ TID252
25 |   from ..scripts.repositories.review_repository import Review, ReviewRepository
26 |   from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |   from ..scripts.core.container import ServiceContainer
16 |   from ..scripts.core.exceptions import AuthenticationError, WebhookValidationError
17 | / from ..scripts.core.interfaces import (
18 | |     CacheInterface,
19 | |     DatabaseInterface,
20 | |     GitHubClientInterface,
21 | |     IssueLevel,
22 | |     MetricsInterface,
23 | |     QueueInterface,
24 | | )
   | |_^ TID252
25 |   from ..scripts.repositories.review_repository import Review, ReviewRepository
26 |   from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |     QueueInterface,
24 | )
25 | from ..scripts.repositories.review_repository import Review, ReviewRepository
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
26 | from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
27 | from ..scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |     QueueInterface,
24 | )
25 | from ..scripts.repositories.review_repository import Review, ReviewRepository
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
26 | from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
27 | from ..scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:26:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
24 | )
25 | from ..scripts.repositories.review_repository import Review, ReviewRepository
26 | from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
27 | from ..scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:26:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
24 | )
25 | from ..scripts.repositories.review_repository import Review, ReviewRepository
26 | from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
27 | from ..scripts.services.webhook_service import WebhookService, WebhookValidator
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:27:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
25 | from ..scripts.repositories.review_repository import Review, ReviewRepository
26 | from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
27 | from ..scripts.services.webhook_service import WebhookService, WebhookValidator
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:27:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
25 | from ..scripts.repositories.review_repository import Review, ReviewRepository
26 | from ..scripts.services.authentication_service import AuthenticationService, JWTConfiguration
27 | from ..scripts.services.webhook_service import WebhookService, WebhookValidator
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

.github/tests/test_refactored_services.py:209:13: S106 Possible hardcoded password assigned to argument: "secret_key"
    |
207 |         """Create JWT configuration."""
208 |         return JWTConfiguration(
209 |             secret_key="test-secret-key-that-is-long-enough-32chars",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S106
210 |             access_token_expire_minutes=30,
211 |             refresh_token_expire_days=30,
    |

.github/tests/test_refactored_services.py:411:1: E402 Module level import not at top of file
    |
410 | # Import json for test data
411 | import json
    | ^^^^^^^^^^^ E402
    |

.github/tests/test_webhook_handler.py:15:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
14 | # Add parent directory to path for imports
15 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))
   |                    ^^^^^^^^^^^^ PTH118
16 |
17 | from webhook_handler import EventType, WebhookEvent, WebhookHandler
   |

.github/tests/test_webhook_handler.py:15:33: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
14 | # Add parent directory to path for imports
15 | sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))
   |                                 ^^^^^^^^^^^^^^^ PTH120
16 |
17 | from webhook_handler import EventType, WebhookEvent, WebhookHandler
   |

mcp-comprehensive-test.py:61:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
   |
59 |             execution_time = int((time.time() - start_time) * 1000)
60 |
61 |             if response.status_code == 200:
   |                                        ^^^ PLR2004
62 |                 server_info = response.json()
63 |                 return McpTestResult(
   |

mcp-comprehensive-test.py:86:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
   |
84 |             execution_time = int((time.time() - start_time) * 1000)
85 |
86 |             if response.status_code == 200:
   |                                        ^^^ PLR2004
87 |                 tools_data = response.json()
88 |                 tool_count = len(tools_data.get("tools", []))
   |

mcp-comprehensive-test.py:114:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
112 |             execution_time = int((time.time() - start_time) * 1000)
113 |
114 |             if response.status_code == 200:
    |                                        ^^^ PLR2004
115 |                 response_data = response.json()
116 |                 return McpTestResult(
    |

mcp-comprehensive-test.py:329:29: PLR2004 Magic value used in comparison, consider replacing `80` with a constant variable
    |
327 |             "performance",
328 |             "parallel_load",
329 |             success_rate >= 80,
    |                             ^^ PLR2004
330 |             total_time,
331 |             metadata={
    |

mcp-comprehensive-test.py:546:86: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
545 |         # Performance analysis
546 |         slow_tests = [r for r in analysis["all_results"] if r["execution_time_ms"] > 1000]
    |                                                                                      ^^^^ PLR2004
547 |         if slow_tests:
548 |             report += f"\nSLOW TESTS (>1000ms) ({len(slow_tests)})\n"
    |

mcp-comprehensive-test.py:558:28: PLR2004 Magic value used in comparison, consider replacing `95` with a constant variable
    |
557 |         success_rate = analysis["summary"]["success_rate"]
558 |         if success_rate >= 95:
    |                            ^^ PLR2004
559 |             report += "✅ Excellent success rate! System is performing optimally.\n"
560 |         elif success_rate >= 80:
    |

mcp-comprehensive-test.py:560:30: PLR2004 Magic value used in comparison, consider replacing `80` with a constant variable
    |
558 |         if success_rate >= 95:
559 |             report += "✅ Excellent success rate! System is performing optimally.\n"
560 |         elif success_rate >= 80:
    |                              ^^ PLR2004
561 |             report += "⚠️  Good success rate, but some issues detected. Review failed tests.\n"
562 |         else:
    |

mcp-comprehensive-test.py:586:14: PTH123 `open()` should be replaced by `Path.open()`
    |
584 |         report = self.generate_report(analysis)
585 |
586 |         with open(filename, "w") as f:
    |              ^^^^ PTH123
587 |             f.write(report)
    |

mcp-comprehensive-test.py:591:14: PTH123 `open()` should be replaced by `Path.open()`
    |
589 |         # Save JSON data
590 |         json_filename = filename.replace(".txt", ".json")
591 |         with open(json_filename, "w") as f:
    |              ^^^^ PTH123
592 |             json.dump(analysis, f, indent=2)
    |

mcp-comprehensive-test.py:612:28: PLR2004 Magic value used in comparison, consider replacing `95` with a constant variable
    |
610 |         # Exit with appropriate code
611 |         success_rate = analysis["summary"]["success_rate"]
612 |         if success_rate >= 95:
    |                            ^^ PLR2004
613 |             sys.exit(0)
614 |         elif success_rate >= 80:
    |

mcp-comprehensive-test.py:614:30: PLR2004 Magic value used in comparison, consider replacing `80` with a constant variable
    |
612 |         if success_rate >= 95:
613 |             sys.exit(0)
614 |         elif success_rate >= 80:
    |                              ^^ PLR2004
615 |             sys.exit(1)
616 |         else:
    |

mock-api-responses.py:181:38: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
179 |     debate = debates[debate_id]
180 |
181 |     if len(debate["participants"]) < 2:
    |                                      ^ PLR2004
182 |         return jsonify({"error": "Debate must have at least 2 participants"}), 400
    |

performance-testing/docker/docker_integration.py:60:26: S108 Probable insecure usage of temporary file or directory: "/tmp/performance-test-artifacts"
   |
59 |     # Artifacts
60 |     artifacts_dir: str = "/tmp/performance-test-artifacts"
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S108
61 |
62 |     # Custom settings
   |

performance-testing/docker/docker_integration.py:316:18: PTH123 `open()` should be replaced by `Path.open()`
    |
314 |             test_script_path = Path(temp_dir) / "run_tests.py"
315 |
316 |             with open(test_script_path, "w") as f:
    |                  ^^^^ PTH123
317 |                 f.write(test_script)
    |

performance-testing/docker/docker_integration.py:323:18: PTH123 `open()` should be replaced by `Path.open()`
    |
321 |             requirements_path = Path(temp_dir) / "requirements.txt"
322 |
323 |             with open(requirements_path, "w") as f:
    |                  ^^^^ PTH123
324 |                 f.write(requirements)
    |

performance-testing/docker/docker_integration.py:330:18: PTH123 `open()` should be replaced by `Path.open()`
    |
328 |             dockerfile_path = Path(temp_dir) / "Dockerfile"
329 |
330 |             with open(dockerfile_path, "w") as f:
    |                  ^^^^ PTH123
331 |                 f.write(dockerfile)
    |

performance-testing/docker/docker_integration.py:548:46: S108 Probable insecure usage of temporary file or directory: "/tmp/artifacts.tar.gz"
    |
547 |         # Copy artifacts
548 |         bits, _ = temp_container.get_archive("/tmp/artifacts.tar.gz")
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^ S108
549 |
550 |         with open(Path(temp_dir) / "artifacts.tar.gz", "wb") as f:
    |

performance-testing/docker/docker_integration.py:550:14: PTH123 `open()` should be replaced by `Path.open()`
    |
548 |         bits, _ = temp_container.get_archive("/tmp/artifacts.tar.gz")
549 |
550 |         with open(Path(temp_dir) / "artifacts.tar.gz", "wb") as f:
    |              ^^^^ PTH123
551 |             for chunk in bits:
552 |                 f.write(chunk)
    |

performance-testing/docker/docker_integration.py:555:9: S603 `subprocess` call: check for execution of untrusted input
    |
554 |         # Extract artifacts
555 |         subprocess.run(["tar", "-xzf", str(Path(temp_dir) / "artifacts.tar.gz"), "-C", temp_dir], check=True)
    |         ^^^^^^^^^^^^^^ S603
556 |
557 |         temp_container.remove()
    |

performance-testing/docker/docker_integration.py:555:24: S607 Starting a process with a partial executable path
    |
554 |         # Extract artifacts
555 |         subprocess.run(["tar", "-xzf", str(Path(temp_dir) / "artifacts.tar.gz"), "-C", temp_dir], check=True)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
556 |
557 |         temp_container.remove()
    |

performance-testing/docker/docker_integration.py:574:26: PTH123 `open()` should be replaced by `Path.open()`
    |
572 |                 results_file = Path(temp_dir) / "test_results.json"
573 |                 if results_file.exists():
574 |                     with open(results_file) as f:
    |                          ^^^^ PTH123
575 |                         return json.load(f)
    |

performance-testing/framework/base/performance_test_base.py:141:38: F821 Undefined name `threading`
    |
139 |         if self.config.enable_prometheus_metrics:
140 |             self.monitoring_active = True
141 |             self.monitoring_thread = threading.Thread(target=self._monitor_system)
    |                                      ^^^^^^^^^ F821
142 |             self.monitoring_thread.daemon = True
143 |             self.monitoring_thread.start()
    |

performance-testing/framework/base/performance_test_base.py:314:59: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
313 |             error_types[error_type]["count"] += 1
314 |             if len(error_types[error_type]["examples"]) < 3:
    |                                                           ^ PLR2004
315 |                 error_types[error_type]["examples"].append({"error": error["error"], "context": error["context"]})
    |

performance-testing/framework/base/performance_test_base.py:433:18: PTH123 `open()` should be replaced by `Path.open()`
    |
432 |         if isinstance(data, dict | list):
433 |             with open(filepath, "w") as f:
    |                  ^^^^ PTH123
434 |                 json.dump(data, f, indent=2, default=str)
435 |         else:
    |

performance-testing/framework/base/performance_test_base.py:436:18: PTH123 `open()` should be replaced by `Path.open()`
    |
434 |                 json.dump(data, f, indent=2, default=str)
435 |         else:
436 |             with open(filepath, "w") as f:
    |                  ^^^^ PTH123
437 |                 f.write(str(data))
    |

performance-testing/framework/base/performance_test_base.py:447:18: PTH123 `open()` should be replaced by `Path.open()`
    |
446 |         try:
447 |             with open(filepath) as f:
    |                  ^^^^ PTH123
448 |                 return json.load(f)
449 |         except json.JSONDecodeError:
    |

performance-testing/framework/base/performance_test_base.py:450:18: PTH123 `open()` should be replaced by `Path.open()`
    |
448 |                 return json.load(f)
449 |         except json.JSONDecodeError:
450 |             with open(filepath) as f:
    |                  ^^^^ PTH123
451 |                 return f.read()
    |

performance-testing/framework/base/performance_test_base.py:629:37: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
627 |                 {
628 |                     "id": i,
629 |                     "name": "".join(random.choices(string.ascii_letters, k=10)),
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
630 |                     "value": random.randint(1, 1000),
631 |                     "timestamp": datetime.now(UTC).isoformat(),
    |

performance-testing/framework/base/performance_test_base.py:630:30: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
628 |                     "id": i,
629 |                     "name": "".join(random.choices(string.ascii_letters, k=10)),
630 |                     "value": random.randint(1, 1000),
    |                              ^^^^^^^^^^^^^^^^^^^^^^^ S311
631 |                     "timestamp": datetime.now(UTC).isoformat(),
632 |                     "data": "".join(random.choices(string.ascii_letters + string.digits, k=100)),
    |

performance-testing/framework/base/performance_test_base.py:632:37: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
630 |                     "value": random.randint(1, 1000),
631 |                     "timestamp": datetime.now(UTC).isoformat(),
632 |                     "data": "".join(random.choices(string.ascii_letters + string.digits, k=100)),
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
633 |                 }
634 |             )
    |

performance-testing/framework/reporting/test_reporter.py:74:14: PTH123 `open()` should be replaced by `Path.open()`
   |
72 |         # Save report
73 |         html_path = self.output_dir / f"{report_name}.html"
74 |         with open(html_path, "w") as f:
   |              ^^^^ PTH123
75 |             f.write(html_content)
   |

performance-testing/framework/reporting/test_reporter.py:94:14: PTH123 `open()` should be replaced by `Path.open()`
   |
92 |         # Save JSON
93 |         json_path = self.output_dir / f"{report_name}.json"
94 |         with open(json_path, "w") as f:
   |              ^^^^ PTH123
95 |             json.dump(json_data, f, indent=2, default=str)
   |

performance-testing/framework/reporting/test_reporter.py:145:14: PTH123 `open()` should be replaced by `Path.open()`
    |
144 |         html_path = self.output_dir / f"{report_name}.html"
145 |         with open(html_path, "w") as f:
    |              ^^^^ PTH123
146 |             f.write(html_content)
    |

performance-testing/framework/reporting/test_reporter.py:170:14: PTH123 `open()` should be replaced by `Path.open()`
    |
169 |         html_path = self.output_dir / f"{report_name}.html"
170 |         with open(html_path, "w") as f:
    |              ^^^^ PTH123
171 |             f.write(html_content)
    |

performance-testing/framework/reporting/test_reporter.py:186:24: S113 Probable use of `requests` call without timeout
    |
184 |             headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
185 |
186 |             response = requests.post(
    |                        ^^^^^^^^^^^^^ S113
187 |                 f"{datasource_url}/api/datasources/proxy/1/write", headers=headers, json=grafana_data
188 |             )
    |

performance-testing/jmeter/jmeter_integration.py:382:15: S318 Using `xml` to parse untrusted data is known to be vulnerable to XML attacks; use `defusedxml` equivalents
    |
381 |         # Pretty print
382 |         dom = minidom.parseString(xml_str)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S318
383 |         pretty_xml = dom.toprettyxml(indent="  ")
    |

performance-testing/jmeter/jmeter_integration.py:389:14: PTH123 `open()` should be replaced by `Path.open()`
    |
388 |         # Write to file
389 |         with open(output_path, "w", encoding="utf-8") as f:
    |              ^^^^ PTH123
390 |             f.write(pretty_xml)
    |

performance-testing/jmeter/jmeter_integration.py:434:22: S603 `subprocess` call: check for execution of untrusted input
    |
433 |         try:
434 |             result = subprocess.run(cmd, capture_output=True, text=True, cwd=output_path, check=False)
    |                      ^^^^^^^^^^^^^^ S603
435 |
436 |             execution_time = time.time() - start_time
    |

performance-testing/jmeter/jmeter_integration.py:474:22: S603 `subprocess` call: check for execution of untrusted input
    |
472 |         # Check PATH
473 |         try:
474 |             result = subprocess.run(["which", "jmeter"], capture_output=True, text=True, check=False)
    |                      ^^^^^^^^^^^^^^ S603
475 |             if result.returncode == 0:
476 |                 return result.stdout.strip()
    |

performance-testing/jmeter/jmeter_integration.py:474:37: S607 Starting a process with a partial executable path
    |
472 |         # Check PATH
473 |         try:
474 |             result = subprocess.run(["which", "jmeter"], capture_output=True, text=True, check=False)
    |                                     ^^^^^^^^^^^^^^^^^^^ S607
475 |             if result.returncode == 0:
476 |                 return result.stdout.strip()
    |

performance-testing/jmeter/jmeter_integration.py:477:9: E722 Do not use bare `except`
    |
475 |             if result.returncode == 0:
476 |                 return result.stdout.strip()
477 |         except:
    |         ^^^^^^ E722
478 |             pass
    |

performance-testing/jmeter/jmeter_integration.py:477:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
475 |               if result.returncode == 0:
476 |                   return result.stdout.strip()
477 | /         except:
478 | |             pass
    | |________________^ S110
479 |
480 |           # Check common locations
    |

performance-testing/jmeter/jmeter_integration.py:482:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
480 |         # Check common locations
481 |         for path in possible_paths:
482 |             if os.path.exists(path):
    |                ^^^^^^^^^^^^^^ PTH110
483 |                 return path
    |

performance-testing/jmeter/jmeter_integration.py:616:9: PLR0915 Too many statements (54 > 50)
    |
614 |         return error_rates
615 |
616 |     def generate_charts(self, results_file: str, output_dir: str):
    |         ^^^^^^^^^^^^^^^ PLR0915
617 |         """Generate analysis charts."""
618 |         self.logger.info(f"Generating charts for: {results_file}")
    |

performance-testing/monitoring/resource_monitor.py:221:34: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
219 |         recent_samples = self.get_recent_samples(window_seconds)
220 |
221 |         if len(recent_samples) < 10:
    |                                  ^^ PLR2004
222 |             return {"insufficient_data": True}
    |

performance-testing/monitoring/resource_monitor.py:243:85: PLR2004 Magic value used in comparison, consider replacing `0.7` with a constant variable
    |
241 |         # Memory leak indicators
242 |         leak_detected = (
243 |             slope > self.thresholds.memory_growth_rate_mb_per_min and correlation > 0.7  # Strong positive correlation
    |                                                                                     ^^^ PLR2004
244 |         )
    |

performance-testing/monitoring/resource_monitor.py:261:34: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
259 |         recent_samples = self.get_recent_samples(window_seconds)
260 |
261 |         if len(recent_samples) < 5:
    |                                  ^ PLR2004
262 |             return {"insufficient_data": True}
    |

performance-testing/monitoring/resource_monitor.py:274:72: PLR2004 Magic value used in comparison, consider replacing `0.8` with a constant variable
    |
272 |         # Detect sustained high CPU usage
273 |         high_cpu_samples = [v for v in cpu_values if v > self.thresholds.cpu_warning_percent]
274 |         sustained_high_cpu = len(high_cpu_samples) / len(cpu_values) > 0.8
    |                                                                        ^^^ PLR2004
275 |
276 |         # Detect CPU spikes
    |

performance-testing/monitoring/resource_monitor.py:295:34: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
293 |         recent_samples = self.get_recent_samples(window_seconds)
294 |
295 |         if len(recent_samples) < 2:
    |                                  ^ PLR2004
296 |             return {"insufficient_data": True}
    |

performance-testing/monitoring/resource_monitor.py:374:14: PTH123 `open()` should be replaced by `Path.open()`
    |
372 |             }
373 |
374 |         with open(filepath, "w") as f:
    |              ^^^^ PTH123
375 |             json.dump(data, f, indent=2)
    |

performance-testing/monitoring/resource_monitor.py:401:14: PTH123 `open()` should be replaced by `Path.open()`
    |
400 |         # Save report
401 |         with open(output_path / "monitoring_report.json", "w") as f:
    |              ^^^^ PTH123
402 |             json.dump(report, f, indent=2)
    |

performance-testing/monitoring/resource_monitor.py:577:36: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
575 |         """Generate monitoring charts."""
576 |         with self.samples_lock:
577 |             if len(self.samples) < 2:
    |                                    ^ PLR2004
578 |                 return
    |

performance-testing/run_tests.py:90:18: PTH123 `open()` should be replaced by `Path.open()`
   |
89 |         if self.config_file and Path(self.config_file).exists():
90 |             with open(self.config_file) as f:
   |                  ^^^^ PTH123
91 |                 user_config = json.load(f)
92 |                 default_config.update(user_config)
   |

performance-testing/run_tests.py:513:14: PTH123 `open()` should be replaced by `Path.open()`
    |
512 |         # Save summary
513 |         with open(output_dir / "test_summary.json", "w") as f:
    |              ^^^^ PTH123
514 |             json.dump(summary, f, indent=2)
    |

performance-testing/run_tests.py:576:14: PTH123 `open()` should be replaced by `Path.open()`
    |
574 |         config_path = Path(args.output_dir) / "test_config.json"
575 |         config_path.parent.mkdir(exist_ok=True)
576 |         with open(config_path, "w") as f:
    |              ^^^^ PTH123
577 |             json.dump(config, f, indent=2)
    |

performance-testing/tests/component_benchmarks.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   from sqlalchemy.orm import sessionmaker
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | |     measure_async_time,
27 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/component_benchmarks.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   from sqlalchemy.orm import sessionmaker
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | |     measure_async_time,
27 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/component_benchmarks.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   from sqlalchemy.orm import sessionmaker
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | |     measure_async_time,
27 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/component_benchmarks.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   from sqlalchemy.orm import sessionmaker
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | |     measure_async_time,
27 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/component_benchmarks.py:348:42: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
346 |                     )
347 |                     result.fetchall()
348 |                 elif operation_id % 4 == 2:
    |                                          ^ PLR2004
349 |                     # Update
350 |                     conn.execute(
    |

performance-testing/tests/component_benchmarks.py:413:45: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
411 |             async with self.session.request(method, url, **kwargs) as response:
412 |                 data = await response.json()
413 |                 success = response.status < 400
    |                                             ^^^ PLR2004
414 |                 duration = (time.time() - start_time) * 1000
    |

performance-testing/tests/component_benchmarks.py:490:13: B007 Loop control variable `i` not used within loop body
    |
488 |         # List operations
489 |         time.time()
490 |         for i in range(50):
    |             ^ B007
491 |             result = await self.api_request("GET", "/organizations")
492 |             self.metrics.record_operation("list_organizations", result["duration_ms"], result["success"])
    |
    = help: Rename unused `i` to `_i`

performance-testing/tests/component_benchmarks.py:525:13: B007 Loop control variable `i` not used within loop body
    |
524 |         # List debates
525 |         for i in range(100):
    |             ^ B007
526 |             result = await self.api_request("GET", "/debates")
527 |             self.metrics.record_operation("list_debates", result["duration_ms"], result["success"])
    |
    = help: Rename unused `i` to `_i`

performance-testing/tests/component_benchmarks.py:665:54: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
663 |                     ) as response:
664 |                         data = await response.json()
665 |                         success = response.status == 200
    |                                                      ^^^ PLR2004
666 |                         duration = (time.time() - start_time) * 1000
    |

performance-testing/tests/component_benchmarks.py:704:50: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
702 |                 ) as response:
703 |                     data = await response.json()
704 |                     success = response.status == 200
    |                                                  ^^^ PLR2004
705 |                     duration = (time.time() - start_time) * 1000
    |

performance-testing/tests/component_benchmarks.py:749:50: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
747 |                         total_content_length += len(chunk)
748 |
749 |                     success = response.status == 200
    |                                                  ^^^ PLR2004
750 |                     duration = (time.time() - start_time) * 1000
    |

performance-testing/tests/component_benchmarks.py:780:54: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
778 |                     ) as response:
779 |                         data = await response.json()
780 |                         success = response.status == 200
    |                                                      ^^^ PLR2004
781 |                         duration = (time.time() - start_time) * 1000
    |

performance-testing/tests/component_benchmarks.py:845:92: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
844 |             # Filter high values
845 |             high_value_items = [item for item in processed_data if item["doubled_value"] > 1000]
    |                                                                                            ^^^^ PLR2004
846 |
847 |             duration = (time.time() - start_time) * 1000
    |

performance-testing/tests/database_load_tests.py:39:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
37 | from sqlalchemy.pool import QueuePool
38 |
39 | from ..framework.base import PerformanceTestBase, TestConfiguration, measure_async_time
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/database_load_tests.py:39:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
37 | from sqlalchemy.pool import QueuePool
38 |
39 | from ..framework.base import PerformanceTestBase, TestConfiguration, measure_async_time
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/database_load_tests.py:39:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
37 | from sqlalchemy.pool import QueuePool
38 |
39 | from ..framework.base import PerformanceTestBase, TestConfiguration, measure_async_time
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/database_load_tests.py:354:13: B007 Loop control variable `i` not used within loop body
    |
352 |         # Generate comments
353 |         comments_data = []
354 |         for i in range(min(self.db_config.initial_data_size, 100000)):
    |             ^ B007
355 |             post_id, post_user_id = secrets.choice(post_data)
356 |             comments_data.append(
    |
    = help: Rename unused `i` to `_i`

performance-testing/tests/database_load_tests.py:440:45: F821 Undefined name `random`
    |
438 |                         # Simulate work
439 |                         await conn.fetchval("SELECT 1")
440 |                         await asyncio.sleep(random.uniform(0.01, 0.1))
    |                                             ^^^^^^ F821
441 |                         operations += 1
442 |                 except Exception as e:
    |

performance-testing/tests/database_load_tests.py:672:15: PLR0915 Too many statements (64 > 50)
    |
671 |     @measure_async_time
672 |     async def _test_concurrent_reads_writes(self):
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
673 |         """Test concurrent read and write operations."""
674 |         self.logger.info("Testing concurrent reads and writes")
    |

performance-testing/tests/database_load_tests.py:813:9: ERA001 Found commented-out code
    |
811 |         workers = []
812 |
813 |         # 70% readers, 30% writers
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
814 |         reader_count = int(self.db_config.concurrent_users * 0.7)
815 |         writer_count = self.db_config.concurrent_users - reader_count
    |
    = help: Remove commented-out code

performance-testing/tests/database_load_tests.py:862:60: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
860 |                     async with self.connection_pool.acquire() as conn, conn.transaction():
861 |                         # Get two random posts
862 |                         if len(self.test_data["posts"]) >= 2:
    |                                                            ^ PLR2004
863 |                             post1_id, post2_id = random.sample([p[0] for p in self.test_data["posts"]], 2)
    |

performance-testing/tests/database_load_tests.py:863:50: F821 Undefined name `random`
    |
861 |                         # Get two random posts
862 |                         if len(self.test_data["posts"]) >= 2:
863 |                             post1_id, post2_id = random.sample([p[0] for p in self.test_data["posts"]], 2)
    |                                                  ^^^^^^ F821
864 |
865 |                             # Lock posts in different order to create deadlock potential
    |

performance-testing/tests/database_load_tests.py:1049:38: S608 Possible SQL injection vector through string-based query construction
     |
1048 |                 for table in tables:
1049 |                     await conn.fetch(f"SELECT * FROM {table}")
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ S608
1050 |                     await asyncio.sleep(0.1)  # Simulate backup processing
     |

performance-testing/tests/github_api_simulation.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from typing import Any
15 |
16 | from ..framework.base import PerformanceTestBase, TestConfiguration, measure_async_time
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/github_api_simulation.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from typing import Any
15 |
16 | from ..framework.base import PerformanceTestBase, TestConfiguration, measure_async_time
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/github_api_simulation.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from typing import Any
15 |
16 | from ..framework.base import PerformanceTestBase, TestConfiguration, measure_async_time
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/github_api_simulation.py:296:30: F821 Undefined name `random`
    |
295 |         # Add random variation
296 |         delay = base_delay * random.uniform(0.5, 1.5)
    |                              ^^^^^^ F821
297 |
298 |         await asyncio.sleep(delay)
    |

performance-testing/tests/github_api_simulation.py:300:9: PLR0911 Too many return statements (7 > 6)
    |
298 |         await asyncio.sleep(delay)
299 |
300 |     def _generate_response(self, endpoint: str, method: str, payload: dict[str, Any] | None = None) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^ PLR0911
301 |         """Generate response data for endpoint."""
302 |         # Determine response type based on endpoint
    |

performance-testing/tests/github_api_simulation.py:300:49: ARG002 Unused method argument: `method`
    |
298 |         await asyncio.sleep(delay)
299 |
300 |     def _generate_response(self, endpoint: str, method: str, payload: dict[str, Any] | None = None) -> dict[str, Any]:
    |                                                 ^^^^^^ ARG002
301 |         """Generate response data for endpoint."""
302 |         # Determine response type based on endpoint
    |

performance-testing/tests/github_api_simulation.py:563:41: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
562 |             # Safety check to prevent infinite loop
563 |             if len(recovery_attempts) > 100:
    |                                         ^^^ PLR2004
564 |                 self.logger.error("Rate limit recovery test timed out")
565 |                 break
    |

performance-testing/tests/load_tests.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   import aiohttp
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/load_tests.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   import aiohttp
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/load_tests.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |   import aiohttp
21 |
22 | / from ..framework.base import (
23 | |     PerformanceTestBase,
24 | |     TestConfiguration,
25 | |     generate_test_data,
26 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

performance-testing/tests/load_tests.py:284:26: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
282 |     async def think_time(self):
283 |         """Simulate user think time."""
284 |         think_duration = random.uniform(self.scenario.think_time_min, self.scenario.think_time_max)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
285 |         await asyncio.sleep(think_duration)
    |

performance-testing/tests/load_tests.py:319:24: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
318 |             # Select endpoint
319 |             endpoint = random.choice(self.endpoints)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
320 |
321 |             # Get test data
    |

performance-testing/tests/load_tests.py:338:42: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
336 |                     response_times.append(response_time)
337 |
338 |                     if response.status < 400:
    |                                          ^^^ PLR2004
339 |                         operations += 1
340 |                     else:
    |

performance-testing/tests/load_tests.py:347:43: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
345 |                         f"http_request_{endpoint['method'].lower()}",
346 |                         response_time,
347 |                         response.status < 400,
    |                                           ^^^ PLR2004
348 |                         {"user_id": user_id, "endpoint": endpoint["path"], "status_code": response.status},
349 |                     )
    |

performance-testing/tests/load_tests.py:406:29: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
405 |                 # Select operation
406 |                 operation = random.choice(self.operations)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
407 |
408 |                 # Get test data
    |

performance-testing/tests/load_tests.py:452:48: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
450 |         """Prepare parameters for insert operation."""
451 |         return [
452 |             test_data.get("name", f"user_data_{random.randint(1000, 9999)}"),
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
453 |             test_data.get("value", random.randint(1, 1000)),
454 |             test_data.get("data", f"test_data_{random.randint(1000, 9999)}"),
    |

performance-testing/tests/load_tests.py:453:36: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
451 |         return [
452 |             test_data.get("name", f"user_data_{random.randint(1000, 9999)}"),
453 |             test_data.get("value", random.randint(1, 1000)),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^ S311
454 |             test_data.get("data", f"test_data_{random.randint(1000, 9999)}"),
455 |         ]
    |

performance-testing/tests/load_tests.py:454:48: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
452 |             test_data.get("name", f"user_data_{random.randint(1000, 9999)}"),
453 |             test_data.get("value", random.randint(1, 1000)),
454 |             test_data.get("data", f"test_data_{random.randint(1000, 9999)}"),
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
455 |         ]
    |

performance-testing/tests/load_tests.py:459:40: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
457 |     def _prepare_update_params(self, test_data: dict[str, Any]) -> list[Any]:
458 |         """Prepare parameters for update operation."""
459 |         return [test_data.get("value", random.randint(1, 1000)), test_data.get("id", random.randint(1, 1000))]
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^ S311
    |

performance-testing/tests/load_tests.py:459:86: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
457 |     def _prepare_update_params(self, test_data: dict[str, Any]) -> list[Any]:
458 |         """Prepare parameters for update operation."""
459 |         return [test_data.get("value", random.randint(1, 1000)), test_data.get("id", random.randint(1, 1000))]
    |                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^ S311
    |

performance-testing/tests/load_tests.py:694:37: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
693 |                 # Variable think time to simulate realistic usage
694 |                 await asyncio.sleep(random.uniform(0.1, 2.0))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^ S311
695 |
696 |             except asyncio.CancelledError:
    |

performance-testing/tests/load_tests.py:720:47: PLR2004 Magic value used in comparison, consider replacing `60` with a constant variable
    |
719 |                 # Check for memory leaks (growing memory usage)
720 |                 if len(self.memory_samples) > 60:  # Check every minute
    |                                               ^^ PLR2004
721 |                     recent_memory = [s["memory_mb"] for s in self.memory_samples[-60:]]
722 |                     if self._detect_memory_leak(recent_memory):
    |

performance-testing/tests/load_tests.py:734:34: PLR2004 Magic value used in comparison, consider replacing `30` with a constant variable
    |
732 |     def _detect_memory_leak(self, memory_samples: list[float]) -> bool:
733 |         """Detect potential memory leak from samples."""
734 |         if len(memory_samples) < 30:
    |                                  ^^ PLR2004
735 |             return False
    |

scripts/generate-comprehensive-linting-report.py:47:20: PTH116 `os.stat()` should be replaced by `Path.stat()`, `Path.owner()`, or `Path.group()`
   |
45 |         """Get detailed file metadata."""
46 |         try:
47 |             stat = os.stat(file_path)
   |                    ^^^^^^^ PTH116
48 |             with open(file_path, encoding="utf-8", errors="ignore") as f:
49 |                 content = f.read()
   |

scripts/generate-comprehensive-linting-report.py:48:18: PTH123 `open()` should be replaced by `Path.open()`
   |
46 |         try:
47 |             stat = os.stat(file_path)
48 |             with open(file_path, encoding="utf-8", errors="ignore") as f:
   |                  ^^^^ PTH123
49 |                 content = f.read()
50 |                 lines = content.split("\n")
   |

scripts/generate-comprehensive-linting-report.py:58:43: E741 Ambiguous variable name: `l`
   |
56 |                 "last_modified": datetime.fromtimestamp(stat.st_mtime).isoformat(),
57 |                 "encoding": "utf-8",
58 |                 "empty_lines": len([l for l in lines if not l.strip()]),
   |                                           ^ E741
59 |                 "comment_lines": self._count_comment_lines(content, file_path),
60 |             }
   |

scripts/generate-comprehensive-linting-report.py:86:9: PLR0912 Too many branches (21 > 12)
   |
84 |         return count
85 |
86 |     def extract_python_context_detailed(self, file_path: str, line_number: int) -> dict[str, Any]:
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
87 |         """Extract comprehensive context for Python issues."""
88 |         try:
   |

scripts/generate-comprehensive-linting-report.py:89:18: PTH123 `open()` should be replaced by `Path.open()`
   |
87 |         """Extract comprehensive context for Python issues."""
88 |         try:
89 |             with open(file_path, encoding="utf-8") as f:
   |                  ^^^^ PTH123
90 |                 content = f.read()
   |

scripts/generate-comprehensive-linting-report.py:206:57: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
204 |             patterns[pattern_key]["count"] += 1
205 |             patterns[pattern_key]["files"].add(issue["file"])
206 |             if len(patterns[pattern_key]["examples"]) < 3:
    |                                                         ^ PLR2004
207 |                 patterns[pattern_key]["examples"].append(
208 |                     {"file": issue["file"], "line": issue["line"], "content": issue["line_content"]}
    |

scripts/generate-comprehensive-linting-report.py:221:18: S603 `subprocess` call: check for execution of untrusted input
    |
220 |         # Run ruff with JSON output
221 |         result = subprocess.run(
    |                  ^^^^^^^^^^^^^^ S603
222 |             ["ruff", "check", ".", "--output-format=json"], capture_output=True, text=True, check=False
223 |         )
    |

scripts/generate-comprehensive-linting-report.py:222:13: S607 Starting a process with a partial executable path
    |
220 |         # Run ruff with JSON output
221 |         result = subprocess.run(
222 |             ["ruff", "check", ".", "--output-format=json"], capture_output=True, text=True, check=False
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
223 |         )
    |

scripts/generate-comprehensive-linting-report.py:229:31: S603 `subprocess` call: check for execution of untrusted input
    |
228 |             # Also get security-specific issues
229 |             security_result = subprocess.run(
    |                               ^^^^^^^^^^^^^^ S603
230 |                 ["ruff", "check", ".", "--select=S", "--output-format=json"],
231 |                 capture_output=True,
    |

scripts/generate-comprehensive-linting-report.py:230:17: S607 Starting a process with a partial executable path
    |
228 |             # Also get security-specific issues
229 |             security_result = subprocess.run(
230 |                 ["ruff", "check", ".", "--select=S", "--output-format=json"],
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
231 |                 capture_output=True,
232 |                 text=True,
    |

scripts/generate-comprehensive-linting-report.py:491:43: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
489 |             return "high"
490 |
491 |         if context.get("complexity", 0) > 10:
    |                                           ^^ PLR2004
492 |             return "high"
    |

scripts/generate-comprehensive-linting-report.py:539:22: S603 `subprocess` call: check for execution of untrusted input
    |
538 |             # Run shellcheck with different formats for more info
539 |             result = subprocess.run(
    |                      ^^^^^^^^^^^^^^ S603
540 |                 ["shellcheck", "--format=json", "--severity=style", "--external-sources", str(file_path)],
541 |                 capture_output=True,
    |

scripts/generate-comprehensive-linting-report.py:540:17: S607 Starting a process with a partial executable path
    |
538 |             # Run shellcheck with different formats for more info
539 |             result = subprocess.run(
540 |                 ["shellcheck", "--format=json", "--severity=style", "--external-sources", str(file_path)],
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
541 |                 capture_output=True,
542 |                 text=True,
    |

scripts/generate-comprehensive-linting-report.py:551:26: PTH123 `open()` should be replaced by `Path.open()`
    |
549 |                     file_meta = self.get_file_metadata(str(file_path))
550 |
551 |                     with open(file_path, encoding="utf-8", errors="ignore") as f:
    |                          ^^^^ PTH123
552 |                         lines = f.readlines()
    |

scripts/generate-comprehensive-linting-report.py:571:63: E741 Ambiguous variable name: `l`
    |
569 | …                     "message": issue["message"],
570 | …                     "line_content": lines[line_num - 1].strip() if line_num <= len(lines) else "",
571 | …                     "context_before": [l.rstrip() for l in lines[start_context : line_num - 1]],
    |                                                         ^ E741
572 | …                     "context_after": [l.rstrip() for l in lines[line_num:end_context]],
573 | …                     # Additional context
    |

scripts/generate-comprehensive-linting-report.py:572:62: E741 Ambiguous variable name: `l`
    |
570 | …                     "line_content": lines[line_num - 1].strip() if line_num <= len(lines) else "",
571 | …                     "context_before": [l.rstrip() for l in lines[start_context : line_num - 1]],
572 | …                     "context_after": [l.rstrip() for l in lines[line_num:end_context]],
    |                                                        ^ E741
573 | …                     # Additional context
574 | …                     "function_context": self._extract_shell_function_context(lines, line_num),
    |

scripts/generate-comprehensive-linting-report.py:649:12: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
647 |         code_num = int(code)
648 |
649 |         if 1000 <= code_num < 2000:
    |            ^^^^ PLR2004
650 |             return "syntax"
651 |         elif 2000 <= code_num < 2100:
    |

scripts/generate-comprehensive-linting-report.py:649:31: PLR2004 Magic value used in comparison, consider replacing `2000` with a constant variable
    |
647 |         code_num = int(code)
648 |
649 |         if 1000 <= code_num < 2000:
    |                               ^^^^ PLR2004
650 |             return "syntax"
651 |         elif 2000 <= code_num < 2100:
    |

scripts/generate-comprehensive-linting-report.py:651:14: PLR2004 Magic value used in comparison, consider replacing `2000` with a constant variable
    |
649 |         if 1000 <= code_num < 2000:
650 |             return "syntax"
651 |         elif 2000 <= code_num < 2100:
    |              ^^^^ PLR2004
652 |             return "security"
653 |         elif 2100 <= code_num < 2200:
    |

scripts/generate-comprehensive-linting-report.py:651:33: PLR2004 Magic value used in comparison, consider replacing `2100` with a constant variable
    |
649 |         if 1000 <= code_num < 2000:
650 |             return "syntax"
651 |         elif 2000 <= code_num < 2100:
    |                                 ^^^^ PLR2004
652 |             return "security"
653 |         elif 2100 <= code_num < 2200:
    |

scripts/generate-comprehensive-linting-report.py:653:14: PLR2004 Magic value used in comparison, consider replacing `2100` with a constant variable
    |
651 |         elif 2000 <= code_num < 2100:
652 |             return "security"
653 |         elif 2100 <= code_num < 2200:
    |              ^^^^ PLR2004
654 |             return "warning"
655 |         elif 2200 <= code_num < 2300:
    |

scripts/generate-comprehensive-linting-report.py:653:33: PLR2004 Magic value used in comparison, consider replacing `2200` with a constant variable
    |
651 |         elif 2000 <= code_num < 2100:
652 |             return "security"
653 |         elif 2100 <= code_num < 2200:
    |                                 ^^^^ PLR2004
654 |             return "warning"
655 |         elif 2200 <= code_num < 2300:
    |

scripts/generate-comprehensive-linting-report.py:655:14: PLR2004 Magic value used in comparison, consider replacing `2200` with a constant variable
    |
653 |         elif 2100 <= code_num < 2200:
654 |             return "warning"
655 |         elif 2200 <= code_num < 2300:
    |              ^^^^ PLR2004
656 |             return "info"
657 |         else:
    |

scripts/generate-comprehensive-linting-report.py:655:33: PLR2004 Magic value used in comparison, consider replacing `2300` with a constant variable
    |
653 |         elif 2100 <= code_num < 2200:
654 |             return "warning"
655 |         elif 2200 <= code_num < 2300:
    |                                 ^^^^ PLR2004
656 |             return "info"
657 |         else:
    |

scripts/generate-comprehensive-linting-report.py:664:50: PLR2004 Magic value used in comparison, consider replacing `2000` with a constant variable
    |
662 |         if level == "error":
663 |             return "critical"
664 |         elif level == "warning" and int(code) >= 2000 and int(code) < 2100:
    |                                                  ^^^^ PLR2004
665 |             return "high"  # Security warnings
666 |         elif level == "warning":
    |

scripts/generate-comprehensive-linting-report.py:664:71: PLR2004 Magic value used in comparison, consider replacing `2100` with a constant variable
    |
662 |         if level == "error":
663 |             return "critical"
664 |         elif level == "warning" and int(code) >= 2000 and int(code) < 2100:
    |                                                                       ^^^^ PLR2004
665 |             return "high"  # Security warnings
666 |         elif level == "warning":
    |

scripts/generate-comprehensive-linting-report.py:677:14: PLR2004 Magic value used in comparison, consider replacing `2000` with a constant variable
    |
675 |         if issue["level"] == "error":
676 |             return 10
677 |         elif 2000 <= code_num < 2100:  # Security
    |              ^^^^ PLR2004
678 |             return 9
679 |         elif issue["level"] == "warning":
    |

scripts/generate-comprehensive-linting-report.py:677:33: PLR2004 Magic value used in comparison, consider replacing `2100` with a constant variable
    |
675 |         if issue["level"] == "error":
676 |             return 10
677 |         elif 2000 <= code_num < 2100:  # Security
    |                                 ^^^^ PLR2004
678 |             return 9
679 |         elif issue["level"] == "warning":
    |

scripts/generate-comprehensive-linting-report.py:697:18: S603 `subprocess` call: check for execution of untrusted input
    |
696 |         # Run ESLint
697 |         result = subprocess.run(
    |                  ^^^^^^^^^^^^^^ S603
698 |             ["npx", "eslint", "src", "--ext", ".ts,.tsx,.js,.jsx", "--format=json"],
699 |             cwd=debate_ui_path,
    |

scripts/generate-comprehensive-linting-report.py:698:13: S607 Starting a process with a partial executable path
    |
696 |         # Run ESLint
697 |         result = subprocess.run(
698 |             ["npx", "eslint", "src", "--ext", ".ts,.tsx,.js,.jsx", "--format=json"],
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
699 |             cwd=debate_ui_path,
700 |             capture_output=True,
    |

scripts/generate-comprehensive-linting-report.py:716:26: PTH123 `open()` should be replaced by `Path.open()`
    |
714 |                     file_meta = self.get_file_metadata(file_path)
715 |
716 |                     with open(file_path, encoding="utf-8") as f:
    |                          ^^^^ PTH123
717 |                         lines = f.readlines()
    |

scripts/generate-comprehensive-linting-report.py:731:75: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
729 | …                     "column": message["column"],
730 | …                     "endColumn": message.get("endColumn", message["column"]),
731 | …                     "severity": "error" if message["severity"] == 2 else "warning",
    |                                                                     ^ PLR2004
732 | …                     "message": message["message"],
733 | …                     "ruleId": message["ruleId"],
    |

scripts/generate-comprehensive-linting-report.py:792:53: E741 Ambiguous variable name: `l`
    |
790 |         start_context = max(0, line_num - 4)
791 |         end_context = min(len(lines), line_num + 3)
792 |         context["context_before"] = [l.rstrip() for l in lines[start_context : line_num - 1]]
    |                                                     ^ E741
793 |         context["context_after"] = [l.rstrip() for l in lines[line_num:end_context]]
    |

scripts/generate-comprehensive-linting-report.py:793:52: E741 Ambiguous variable name: `l`
    |
791 |         end_context = min(len(lines), line_num + 3)
792 |         context["context_before"] = [l.rstrip() for l in lines[start_context : line_num - 1]]
793 |         context["context_after"] = [l.rstrip() for l in lines[line_num:end_context]]
    |                                                    ^ E741
794 |
795 |         # Extract imports and exports
    |

scripts/generate-comprehensive-linting-report.py:796:13: B007 Loop control variable `i` not used within loop body
    |
795 |         # Extract imports and exports
796 |         for i, line in enumerate(lines):
    |             ^ B007
797 |             if line.strip().startswith("import"):
798 |                 context["imports"].append(line.strip())
    |
    = help: Rename unused `i` to `_i`

scripts/generate-comprehensive-linting-report.py:863:35: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
861 |     def _calculate_eslint_fix_priority(self, message: dict) -> int:
862 |         """Calculate ESLint fix priority."""
863 |         if message["severity"] == 2:  # Error
    |                                   ^ PLR2004
864 |             return 8
    |

scripts/generate-comprehensive-linting-report.py:884:29: S603 `subprocess` call: check for execution of untrusted input
    |
883 |         # Run Maven checkstyle
884 |         checkstyle_result = subprocess.run(
    |                             ^^^^^^^^^^^^^^ S603
885 |             ["mvn", "checkstyle:check", "-Dcheckstyle.consoleOutput=true", "-Dcheckstyle.failOnViolation=false"],
886 |             capture_output=True,
    |

scripts/generate-comprehensive-linting-report.py:885:13: S607 Starting a process with a partial executable path
    |
883 |         # Run Maven checkstyle
884 |         checkstyle_result = subprocess.run(
885 |             ["mvn", "checkstyle:check", "-Dcheckstyle.consoleOutput=true", "-Dcheckstyle.failOnViolation=false"],
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
886 |             capture_output=True,
887 |             text=True,
    |

scripts/generate-comprehensive-linting-report.py:911:22: PTH123 `open()` should be replaced by `Path.open()`
    |
909 |             # Get file context
910 |             try:
911 |                 with open(file_path, encoding="utf-8") as f:
    |                      ^^^^ PTH123
912 |                     lines = f.readlines()
    |

scripts/generate-comprehensive-linting-report.py:941:13: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
939 |                   self.issues_by_file[file_path].append(detailed_issue)
940 |
941 | /             except Exception:
942 | |                 pass
    | |____________________^ S110
943 |
944 |       def _extract_java_context(self, lines: list[str], line_num: int) -> dict[str, Any]:
    |

scripts/generate-comprehensive-linting-report.py:951:53: E741 Ambiguous variable name: `l`
    |
949 |         start_context = max(0, line_num - 4)
950 |         end_context = min(len(lines), line_num + 3)
951 |         context["context_before"] = [l.rstrip() for l in lines[start_context : line_num - 1]]
    |                                                     ^ E741
952 |         context["context_after"] = [l.rstrip() for l in lines[line_num:end_context]]
    |

scripts/generate-comprehensive-linting-report.py:952:52: E741 Ambiguous variable name: `l`
    |
950 |         end_context = min(len(lines), line_num + 3)
951 |         context["context_before"] = [l.rstrip() for l in lines[start_context : line_num - 1]]
952 |         context["context_after"] = [l.rstrip() for l in lines[line_num:end_context]]
    |                                                    ^ E741
953 |
954 |         # Look for class and method
    |

scripts/generate-comprehensive-linting-report.py:1038:9: PLR0915 Too many statements (53 > 50)
     |
1036 |             )
1037 |
1038 |     def generate_comprehensive_report(self, output_file: str = "COMPREHENSIVE_LINTING_REPORT.md"):
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
1039 |         """Generate the comprehensive markdown report."""
1040 |         with open(output_file, "w", encoding="utf-8") as f:
     |

scripts/generate-comprehensive-linting-report.py:1040:14: PTH123 `open()` should be replaced by `Path.open()`
     |
1038 |     def generate_comprehensive_report(self, output_file: str = "COMPREHENSIVE_LINTING_REPORT.md"):
1039 |         """Generate the comprehensive markdown report."""
1040 |         with open(output_file, "w", encoding="utf-8") as f:
     |              ^^^^ PTH123
1041 |             # Header
1042 |             f.write("# Comprehensive Linting Report\n\n")
     |

scripts/generate-comprehensive-linting-report.py:1161:42: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
     |
1159 |                 if issue["decorators"]:
1160 |                     f.write(f"- **Decorators**: {', '.join(issue['decorators'])}\n")
1161 |                 if issue["complexity"] > 5:
     |                                          ^ PLR2004
1162 |                     f.write(f"- **Complexity**: {issue['complexity']} (high)\n")
     |

scripts/generate-comprehensive-linting-report.py:1181:30: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
     |
1179 |                 f.write("\n---\n\n")
1180 |
1181 |             if len(issues) > 5:
     |                              ^ PLR2004
1182 |                 f.write(f"\n*... and {len(issues) - 5} more {category} issues*\n\n")
     |

scripts/generate-comprehensive-linting-report.py:1229:30: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
     |
1227 |                 f.write("\n---\n\n")
1228 |
1229 |             if len(issues) > 5:
     |                              ^ PLR2004
1230 |                 f.write(f"\n*... and {len(issues) - 5} more {severity} issues*\n\n")
     |

scripts/generate-comprehensive-linting-report.py:1318:14: PTH123 `open()` should be replaced by `Path.open()`
     |
1316 |         }
1317 |
1318 |         with open(output_file, "w", encoding="utf-8") as f:
     |              ^^^^ PTH123
1319 |             json.dump(report, f, indent=2, default=str)
     |

scripts/generate-detailed-linting-report.py:24:18: PTH123 `open()` should be replaced by `Path.open()`
   |
22 |         """Extract class and method context for a Python file at a specific line."""
23 |         try:
24 |             with open(file_path) as f:
   |                  ^^^^ PTH123
25 |                 content = f.read()
   |

scripts/generate-detailed-linting-report.py:59:18: S603 `subprocess` call: check for execution of untrusted input
   |
58 |         # Run ruff and get JSON output
59 |         result = subprocess.run(
   |                  ^^^^^^^^^^^^^^ S603
60 |             ["ruff", "check", ".", "--output-format=json"], capture_output=True, text=True, check=False
61 |         )
   |

scripts/generate-detailed-linting-report.py:60:13: S607 Starting a process with a partial executable path
   |
58 |         # Run ruff and get JSON output
59 |         result = subprocess.run(
60 |             ["ruff", "check", ".", "--output-format=json"], capture_output=True, text=True, check=False
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
61 |         )
   |

scripts/generate-detailed-linting-report.py:100:22: S603 `subprocess` call: check for execution of untrusted input
    |
 98 |                 continue
 99 |
100 |             result = subprocess.run(
    |                      ^^^^^^^^^^^^^^ S603
101 |                 ["shellcheck", "--format=json", str(file_path)], capture_output=True, text=True, check=False
102 |             )
    |

scripts/generate-detailed-linting-report.py:101:17: S607 Starting a process with a partial executable path
    |
100 |             result = subprocess.run(
101 |                 ["shellcheck", "--format=json", str(file_path)], capture_output=True, text=True, check=False
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
102 |             )
    |

scripts/generate-detailed-linting-report.py:109:30: PTH123 `open()` should be replaced by `Path.open()`
    |
108 |                     for issue in issues:
109 |                         with open(file_path) as f:
    |                              ^^^^ PTH123
110 |                             lines = f.readlines()
111 |                             line_content = lines[issue["line"] - 1].strip() if issue["line"] <= len(lines) else ""
    |

scripts/generate-detailed-linting-report.py:140:22: S603 `subprocess` call: check for execution of untrusted input
    |
138 |         debate_ui_path = Path("debate-ui")
139 |         if debate_ui_path.exists():
140 |             result = subprocess.run(
    |                      ^^^^^^^^^^^^^^ S603
141 |                 ["npx", "eslint", "src", "--ext", ".ts,.tsx,.js,.jsx", "--format=json"],
142 |                 cwd=debate_ui_path,
    |

scripts/generate-detailed-linting-report.py:141:17: S607 Starting a process with a partial executable path
    |
139 |         if debate_ui_path.exists():
140 |             result = subprocess.run(
141 |                 ["npx", "eslint", "src", "--ext", ".ts,.tsx,.js,.jsx", "--format=json"],
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
142 |                 cwd=debate_ui_path,
143 |                 capture_output=True,
    |

scripts/generate-detailed-linting-report.py:156:34: PTH123 `open()` should be replaced by `Path.open()`
    |
155 |                         for message in file_result["messages"]:
156 |                             with open(file_path) as f:
    |                                  ^^^^ PTH123
157 |                                 lines = f.readlines()
158 |                                 line_content = (
    |

scripts/generate-detailed-linting-report.py:204:9: PLR0912 Too many branches (20 > 12)
    |
202 |         return self.typescript_issues
203 |
204 |     def generate_markdown_report(self, output_file: str = "DETAILED_LINTING_REPORT.md"):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
205 |         """Generate a detailed markdown report."""
206 |         with open(output_file, "w") as f:
    |

scripts/generate-detailed-linting-report.py:204:9: PLR0915 Too many statements (68 > 50)
    |
202 |         return self.typescript_issues
203 |
204 |     def generate_markdown_report(self, output_file: str = "DETAILED_LINTING_REPORT.md"):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
205 |         """Generate a detailed markdown report."""
206 |         with open(output_file, "w") as f:
    |

scripts/generate-detailed-linting-report.py:206:14: PTH123 `open()` should be replaced by `Path.open()`
    |
204 |     def generate_markdown_report(self, output_file: str = "DETAILED_LINTING_REPORT.md"):
205 |         """Generate a detailed markdown report."""
206 |         with open(output_file, "w") as f:
    |              ^^^^ PTH123
207 |             f.write("# Detailed Linting Report\n\n")
208 |             f.write(f"**Generated**: {Path.cwd()}\n")
    |

scripts/generate-detailed-linting-report.py:241:34: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
239 |                     f.write("\n")
240 |
241 |                 if len(issues) > 5:
    |                                  ^ PLR2004
242 |                     f.write(f"*... and {len(issues) - 5} more {code} issues*\n\n")
    |

scripts/generate-detailed-linting-report.py:269:34: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
267 |                     f.write("\n")
268 |
269 |                 if len(issues) > 5:
    |                                  ^ PLR2004
270 |                     f.write(f"*... and {len(issues) - 5} more {level} issues*\n\n")
    |

scripts/generate-detailed-linting-report.py:280:76: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
278 |                 f.write(f"- **Line**: {issue['line']}, Column: {issue['column']}\n")
279 |                 f.write(f"- **Rule**: {issue['ruleId']}\n")
280 |                 f.write(f"- **Severity**: {'Error' if issue['severity'] == 2 else 'Warning'}\n")
    |                                                                            ^ PLR2004
281 |                 f.write(f"- **Message**: {issue['message']}\n")
282 |                 f.write(f"- **Code**: `{issue['line_content']}`\n")
    |

scripts/generate-detailed-linting-report.py:325:14: PTH123 `open()` should be replaced by `Path.open()`
    |
323 |         }
324 |
325 |         with open(output_file, "w") as f:
    |              ^^^^ PTH123
326 |             json.dump(report, f, indent=2)
    |

scripts/generate-simple-linting-report.py:14:18: S602 `subprocess` call with `shell=True` identified, security issue
   |
12 |     """Run shell command and return output."""
13 |     if capture:
14 |         result = subprocess.run(cmd, shell=True, capture_output=True, text=True, cwd=cwd, check=False)
   |                  ^^^^^^^^^^^^^^ S602
15 |         return result.stdout, result.stderr, result.returncode
16 |     else:
   |

scripts/generate-simple-linting-report.py:17:16: S602 `subprocess` call with `shell=True` identified, security issue
   |
15 |         return result.stdout, result.stderr, result.returncode
16 |     else:
17 |         return subprocess.run(cmd, shell=True, cwd=cwd, check=False).returncode
   |                ^^^^^^^^^^^^^^ S602
   |

scripts/generate-simple-linting-report.py:34:26: PTH123 `open()` should be replaced by `Path.open()`
   |
32 |             for issue in raw_issues:
33 |                 try:
34 |                     with open(issue["filename"]) as f:
   |                          ^^^^ PTH123
35 |                         lines = f.readlines()
   |

scripts/generate-simple-linting-report.py:39:62: E741 Ambiguous variable name: `l`
   |
37 |                     line_num = issue["location"]["row"]
38 |                     issue["line_content"] = lines[line_num - 1].strip() if line_num <= len(lines) else ""
39 |                     issue["context_before"] = [l.strip() for l in lines[max(0, line_num - 3) : line_num - 1]]
   |                                                              ^ E741
40 |                     issue["context_after"] = [l.strip() for l in lines[line_num : min(len(lines), line_num + 2)]]
41 |                 except:
   |

scripts/generate-simple-linting-report.py:40:61: E741 Ambiguous variable name: `l`
   |
38 |                     issue["line_content"] = lines[line_num - 1].strip() if line_num <= len(lines) else ""
39 |                     issue["context_before"] = [l.strip() for l in lines[max(0, line_num - 3) : line_num - 1]]
40 |                     issue["context_after"] = [l.strip() for l in lines[line_num : min(len(lines), line_num + 2)]]
   |                                                             ^ E741
41 |                 except:
42 |                     issue["line_content"] = ""
   |

scripts/generate-simple-linting-report.py:41:17: E722 Do not use bare `except`
   |
39 |                     issue["context_before"] = [l.strip() for l in lines[max(0, line_num - 3) : line_num - 1]]
40 |                     issue["context_after"] = [l.strip() for l in lines[line_num : min(len(lines), line_num + 2)]]
41 |                 except:
   |                 ^^^^^^ E722
42 |                     issue["line_content"] = ""
43 |                     issue["context_before"] = []
   |

scripts/generate-simple-linting-report.py:75:13: E722 Do not use bare `except`
   |
73 |                     issue["filename"] = str(file)
74 |                     issues.append(issue)
75 |             except:
   |             ^^^^^^ E722
76 |                 pass
   |

scripts/generate-simple-linting-report.py:75:13: S110 `try`-`except`-`pass` detected, consider logging the exception
   |
73 |                       issue["filename"] = str(file)
74 |                       issues.append(issue)
75 | /             except:
76 | |                 pass
   | |____________________^ S110
77 |
78 |       return issues
   |

scripts/generate-simple-linting-report.py:97:9: E722 Do not use bare `except`
   |
95 |                     msg["filename"] = file_result["filePath"]
96 |                     issues.append(msg)
97 |         except:
   |         ^^^^^^ E722
98 |             pass
   |

scripts/generate-simple-linting-report.py:97:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
 95 |                       msg["filename"] = file_result["filePath"]
 96 |                       issues.append(msg)
 97 | /         except:
 98 | |             pass
    | |________________^ S110
 99 |
100 |       return issues
    |

scripts/generate-simple-linting-report.py:125:22: PTH123 `open()` should be replaced by `Path.open()`
    |
123 |             for file in files_to_fix:
124 |                 # Check if it's actually security-sensitive
125 |                 with open(file) as f:
    |                      ^^^^ PTH123
126 |                     content = f.read()
    |

scripts/generate-simple-linting-report.py:138:26: PTH123 `open()` should be replaced by `Path.open()`
    |
136 |                     content = content.replace("random.random()", "secrets.randbits(64) / (2**64)")
137 |
138 |                     with open(file, "w") as f:
    |                          ^^^^ PTH123
139 |                         f.write(content)
140 |         except:
    |

scripts/generate-simple-linting-report.py:140:9: E722 Do not use bare `except`
    |
138 |                     with open(file, "w") as f:
139 |                         f.write(content)
140 |         except:
    |         ^^^^^^ E722
141 |             pass
    |

scripts/generate-simple-linting-report.py:140:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
138 |                       with open(file, "w") as f:
139 |                           f.write(content)
140 | /         except:
141 | |             pass
    | |________________^ S110
142 |
143 |       # Fix S113 - Add timeouts to requests
    |

scripts/generate-simple-linting-report.py:151:22: PTH123 `open()` should be replaced by `Path.open()`
    |
150 |             for file in files_to_fix:
151 |                 with open(file) as f:
    |                      ^^^^ PTH123
152 |                     lines = f.readlines()
    |

scripts/generate-simple-linting-report.py:163:22: PTH123 `open()` should be replaced by `Path.open()`
    |
161 |                             lines[i] = line.replace("requests.post(", "requests.post(").replace(")", ", timeout=30)")
162 |
163 |                 with open(file, "w") as f:
    |                      ^^^^ PTH123
164 |                     f.writelines(lines)
165 |         except:
    |

scripts/generate-simple-linting-report.py:165:9: E722 Do not use bare `except`
    |
163 |                 with open(file, "w") as f:
164 |                     f.writelines(lines)
165 |         except:
    |         ^^^^^^ E722
166 |             pass
    |

scripts/generate-simple-linting-report.py:165:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
163 |                   with open(file, "w") as f:
164 |                       f.writelines(lines)
165 | /         except:
166 | |             pass
    | |________________^ S110
    |

scripts/generate-simple-linting-report.py:178:14: PTH123 `open()` should be replaced by `Path.open()`
    |
176 |             continue
177 |
178 |         with open(file) as f:
    |              ^^^^ PTH123
179 |             content = f.read()
180 |             lines = content.split("\n")
    |

scripts/generate-simple-linting-report.py:196:14: PTH123 `open()` should be replaced by `Path.open()`
    |
194 |                 lines[i] = line.replace("`", "$(...)")
195 |
196 |         with open(file, "w") as f:
    |              ^^^^ PTH123
197 |             f.write("\n".join(lines))
    |

scripts/generate-simple-linting-report.py:242:10: PTH123 `open()` should be replaced by `Path.open()`
    |
240 |     # Save report
241 |     report_file = f"linting_report_iteration_{iteration}.json"
242 |     with open(report_file, "w") as f:
    |          ^^^^ PTH123
243 |         json.dump(report, f, indent=2)
    |

scripts/generate-simple-linting-report.py:248:13: B007 Loop control variable `code` not used within loop body
    |
247 |     if python_by_type:
248 |         for code, _issues in sorted(python_by_type.items(), key=lambda x: len(x[1]), reverse=True)[:5]:
    |             ^^^^ B007
249 |             pass
    |
    = help: Rename unused `code` to `_code`

scripts/sonarqube/automated-report-generator.py:94:18: PTH123 `open()` should be replaced by `Path.open()`
   |
92 |         """Load configuration from YAML file"""
93 |         try:
94 |             with open(config_file) as f:
   |                  ^^^^ PTH123
95 |                 return yaml.safe_load(f)
96 |         except FileNotFoundError:
   |

scripts/sonarqube/automated-report-generator.py:134:22: PTH123 `open()` should be replaced by `Path.open()`
    |
132 |         if self.historical_data_file.exists():
133 |             try:
134 |                 with open(self.historical_data_file) as f:
    |                      ^^^^ PTH123
135 |                     return json.load(f)
136 |             except Exception as e:
    |

scripts/sonarqube/automated-report-generator.py:146:14: PTH123 `open()` should be replaced by `Path.open()`
    |
144 |         self.historical_data["reports"] = self.historical_data["reports"][-100:]
145 |
146 |         with open(self.historical_data_file, "w") as f:
    |              ^^^^ PTH123
147 |             json.dump(self.historical_data, f, indent=2)
    |

scripts/sonarqube/automated-report-generator.py:313:9: E722 Do not use bare `except`
    |
311 |             else:
312 |                 return f"{total_minutes}m"
313 |         except:
    |         ^^^^^^ E722
314 |             return minutes
    |

scripts/sonarqube/automated-report-generator.py:351:53: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
349 |                     result.append("")
350 |
351 |                 if len(severity_groups[severity]) > 10:
    |                                                     ^^ PLR2004
352 |                     result.append(f"... and {len(severity_groups[severity]) - 10} more issues")
    |

scripts/sonarqube/automated-report-generator.py:408:36: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
406 |                 result.append("")
407 |
408 |             if len(hotspot_list) > 5:
    |                                    ^ PLR2004
409 |                 result.append(f"... and {len(hotspot_list) - 5} more hotspots")
    |

scripts/sonarqube/automated-report-generator.py:437:51: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
435 |     def _generate_trends_analysis(self, current_data: dict[str, Any]) -> str:
436 |         """Generate trends analysis"""
437 |         if len(self.historical_data["reports"]) < 2:
    |                                                   ^ PLR2004
438 |             return "Not enough historical data for trend analysis"
    |

scripts/sonarqube/automated-report-generator.py:474:13: E722 Do not use bare `except`
    |
473 |                 trends.append(f"- **{metric}**: {curr} {trend}")
474 |             except:
    |             ^^^^^^ E722
475 |                 trends.append(f"- **{metric}**: {current_val} (no comparison available)")
    |

scripts/sonarqube/automated-report-generator.py:541:9: ERA001 Found commented-out code
    |
539 |         html = re.sub(r"(<li>.*</li>)", r"<ul>\\1</ul>", html, flags=re.DOTALL)
540 |
541 |         # Tables (simplified)
    |         ^^^^^^^^^^^^^^^^^^^^^ ERA001
542 |         lines = html.split("\n")
543 |         in_table = False
    |
    = help: Remove commented-out code

scripts/sonarqube/automated-report-generator.py:609:51: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
607 |     def _calculate_trends(self, current_data: dict[str, Any]) -> dict[str, Any]:
608 |         """Calculate trends for JSON report"""
609 |         if len(self.historical_data["reports"]) < 2:
    |                                                   ^ PLR2004
610 |             return {"available": False, "reason": "Not enough historical data"}
    |

scripts/sonarqube/automated-report-generator.py:644:13: E722 Do not use bare `except`
    |
642 |                     "direction": "up" if change > 0 else "down" if change < 0 else "stable",
643 |                 }
644 |             except:
    |             ^^^^^^ E722
645 |                 trends["metrics"][metric] = {
646 |                     "current": current_val,
    |

scripts/sonarqube/automated-report-generator.py:663:14: PTH123 `open()` should be replaced by `Path.open()`
    |
661 |         filepath = Path(self.report_config.output_dir) / filename
662 |
663 |         with open(filepath, "w", encoding="utf-8") as f:
    |              ^^^^ PTH123
664 |             f.write(content)
    |

scripts/sonarqube/automated-report-generator.py:698:22: PTH123 `open()` should be replaced by `Path.open()`
    |
696 |             # Attach report files
697 |             for file_path in report_files:
698 |                 with open(file_path, "rb") as attachment:
    |                      ^^^^ PTH123
699 |                     part = MIMEBase("application", "octet-stream")
700 |                     part.set_payload(attachment.read())
    |

scripts/sonarqube/issue-resolver.py:94:9: PLR0911 Too many return statements (12 > 6)
   |
92 |         return results
93 |
94 |     def _resolve_single_issue(self, issue: Issue) -> bool:
   |         ^^^^^^^^^^^^^^^^^^^^^ PLR0911
95 |         """Resolve a single issue based on its rule"""
96 |         file_path = self.project_root / issue.file_path
   |

scripts/sonarqube/issue-resolver.py:130:18: PTH123 `open()` should be replaced by `Path.open()`
    |
128 |         """Fix cognitive complexity issues by extracting functions"""
129 |         try:
130 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
131 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:150:22: PTH123 `open()` should be replaced by `Path.open()`
    |
148 |                 new_lines = lines[:function_start] + refactored_content.split("\n") + lines[function_end + 1 :]
149 |
150 |                 with open(file_path, "w", encoding="utf-8") as f:
    |                      ^^^^ PTH123
151 |                     f.write("\n".join(new_lines))
    |

scripts/sonarqube/issue-resolver.py:165:18: PTH123 `open()` should be replaced by `Path.open()`
    |
163 |         """Fix function nesting depth issues"""
164 |         try:
165 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
166 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:183:30: PTH123 `open()` should be replaced by `Path.open()`
    |
182 |                     if refactored_content != content:
183 |                         with open(file_path, "w", encoding="utf-8") as f:
    |                              ^^^^ PTH123
184 |                             f.write(refactored_content)
    |

scripts/sonarqube/issue-resolver.py:198:18: PTH123 `open()` should be replaced by `Path.open()`
    |
196 |         """Fix unnecessary await on non-Promise values"""
197 |         try:
198 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
199 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:216:30: PTH123 `open()` should be replaced by `Path.open()`
    |
214 |                         lines[issue.line - 1] = new_line
215 |
216 |                         with open(file_path, "w", encoding="utf-8") as f:
    |                              ^^^^ PTH123
217 |                             f.write("\n".join(lines))
    |

scripts/sonarqube/issue-resolver.py:231:18: PTH123 `open()` should be replaced by `Path.open()`
    |
229 |         """Fix array sort without comparator"""
230 |         try:
231 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
232 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:247:30: PTH123 `open()` should be replaced by `Path.open()`
    |
245 |                         lines[issue.line - 1] = new_line
246 |
247 |                         with open(file_path, "w", encoding="utf-8") as f:
    |                              ^^^^ PTH123
248 |                             f.write("\n".join(lines))
    |

scripts/sonarqube/issue-resolver.py:262:18: PTH123 `open()` should be replaced by `Path.open()`
    |
260 |         """Fix hardcoded secrets by replacing with environment variables"""
261 |         try:
262 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
263 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:291:30: PTH123 `open()` should be replaced by `Path.open()`
    |
289 |                         lines[issue.line - 1] = new_line
290 |
291 |                         with open(file_path, "w", encoding="utf-8") as f:
    |                              ^^^^ PTH123
292 |                             f.write("\n".join(lines))
    |

scripts/sonarqube/issue-resolver.py:303:58: ARG002 Unused method argument: `issue`
    |
301 |             return False
302 |
303 |     def _fix_compromised_password(self, file_path: Path, issue: Issue) -> bool:
    |                                                          ^^^^^ ARG002
304 |         """Fix compromised passwords in configuration files"""
305 |         try:
    |

scripts/sonarqube/issue-resolver.py:306:18: PTH123 `open()` should be replaced by `Path.open()`
    |
304 |         """Fix compromised passwords in configuration files"""
305 |         try:
306 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
307 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:330:22: PTH123 `open()` should be replaced by `Path.open()`
    |
329 |             if modified:
330 |                 with open(file_path, "w", encoding="utf-8") as f:
    |                      ^^^^ PTH123
331 |                     f.write(content)
    |

scripts/sonarqube/issue-resolver.py:346:53: ARG002 Unused method argument: `issue`
    |
344 |         return self._fix_hardcoded_secret(file_path, issue)
345 |
346 |     def _fix_sonarqube_token(self, file_path: Path, issue: Issue) -> bool:
    |                                                     ^^^^^ ARG002
347 |         """Fix SonarQube token exposure"""
348 |         try:
    |

scripts/sonarqube/issue-resolver.py:349:18: PTH123 `open()` should be replaced by `Path.open()`
    |
347 |         """Fix SonarQube token exposure"""
348 |         try:
349 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
350 |                 content = f.read()
    |

scripts/sonarqube/issue-resolver.py:370:22: PTH123 `open()` should be replaced by `Path.open()`
    |
369 |             if modified:
370 |                 with open(file_path, "w", encoding="utf-8") as f:
    |                      ^^^^ PTH123
371 |                     f.write(content)
    |

scripts/sonarqube/issue-resolver.py:409:65: ARG002 Unused method argument: `file_extension`
    |
407 |         return "\n".join(function_lines), end_line
408 |
409 |     def _refactor_complex_function(self, function_content: str, file_extension: str) -> str:
    |                                                                 ^^^^^^^^^^^^^^ ARG002
410 |         """Refactor complex function by extracting helper functions"""
411 |         # This is a simplified refactoring - in practice, you'd need more sophisticated analysis
    |

scripts/sonarqube/issue-resolver.py:416:25: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
    |
414 |         # Look for common patterns that can be extracted
415 |         # For now, just add a comment suggesting manual refactoring
416 |         if len(lines) > 50:
    |                         ^^ PLR2004
417 |             comment = "  // TODO: Consider breaking this function into smaller functions to reduce complexity"
418 |             lines.insert(1, comment)
    |

scripts/sonarqube/run-sonar-analysis.py:208:14: PTH123 `open()` should be replaced by `Path.open()`
    |
206 |         output_path = Path(self.report_generator.report_config.output_dir) / output_file
207 |
208 |         with open(output_path, "w") as f:
    |              ^^^^ PTH123
209 |             json.dump(results, f, indent=2, default=str)
    |

scripts/sonarqube/run-sonar-analysis.py:263:18: PTH123 `open()` should be replaced by `Path.open()`
    |
261 |             output_path = Path(runner.report_generator.report_config.output_dir) / output_file
262 |
263 |             with open(output_path, "w") as f:
    |                  ^^^^ PTH123
264 |                 f.write(report)
    |

simple-mcp-test-runner.py:25:5: S110 `try`-`except`-`pass` detected, consider logging the exception
   |
23 |       except requests.exceptions.Timeout:
24 |           pass
25 | /     except Exception:
26 | |         pass
   | |____________^ S110
27 |
28 |       # Test 2: Framework can generate proper test data
   |

simple-mcp-test-runner.py:65:9: S110 `try`-`except`-`pass` detected, consider logging the exception
   |
63 |               else:
64 |                   pass
65 | /         except Exception:
66 | |             pass
   | |________________^ S110
67 |
68 |       return True
   |

simple-mcp-test-runner.py:129:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
127 |     for _component_name, file_path in components:
128 |         full_path = f"/Users/lsendel/IdeaProjects/zamaz-debate-mcp/{file_path}"
129 |         if os.path.exists(full_path):
    |            ^^^^^^^^^^^^^^ PTH110
130 |             available_components += 1
131 |         else:
    |

Found 860 errors.
error: Failed to parse .github/scripts/context_manager.py:416:23: unexpected EOF while parsing
error: Failed to parse .github/tests/test_code_analyzer.py:349:24: Got unexpected string
81 files left unchanged

/Users/lsendel/IdeaProjects/zamaz-debate-mcp/debate-ui/src/api/debateClient.ts
  256:1  warning  Assign instance to a variable before exporting as module default  import/no-anonymous-default-export

/Users/lsendel/IdeaProjects/zamaz-debate-mcp/debate-ui/src/api/llmClient.ts
  247:1  warning  Assign instance to a variable before exporting as module default  import/no-anonymous-default-export

/Users/lsendel/IdeaProjects/zamaz-debate-mcp/debate-ui/src/api/organizationClient.ts
  139:1  warning  Assign instance to a variable before exporting as module default  import/no-anonymous-default-export

/Users/lsendel/IdeaProjects/zamaz-debate-mcp/debate-ui/src/components/SettingsDialog.jsx
  55:6  warning  React Hook useEffect has a missing dependency: 'loadCacheInfo'. Either include it or remove the dependency array  react-hooks/exhaustive-deps

✖ 4 problems (0 errors, 4 warnings)

src/api/baseClient.ts 40ms (unchanged)
src/api/debateClient.ts 17ms (unchanged)
src/api/llmClient.ts 10ms (unchanged)
src/api/mockAuth.ts 2ms (unchanged)
src/api/mockLLMData.ts 4ms (unchanged)
src/api/organizationClient.ts 4ms (unchanged)
src/App.tsx 6ms (unchanged)
src/components/AnalyticsPage.tsx 12ms (unchanged)
src/components/CreateDebateDialog.tsx 11ms (unchanged)
src/components/DebateDetailPage.tsx 12ms (unchanged)
src/components/DebatesPage.tsx 5ms (unchanged)
src/components/Layout.tsx 4ms (unchanged)
src/components/LoginPage.tsx 7ms (unchanged)
src/components/NotificationSnackbar.tsx 2ms (unchanged)
src/components/OrganizationSwitcher.tsx 2ms (unchanged)
src/components/PWAPrompt.jsx 17ms (unchanged)
src/components/SettingsDialog.jsx 8ms (unchanged)
src/components/SettingsPage.tsx 7ms (unchanged)
src/hooks/usePWA.js 7ms (unchanged)
src/index.css 11ms (unchanged)
src/index.tsx 1ms (unchanged)
src/react-app-env.d.ts 1ms (unchanged)
src/store/index.ts 1ms (unchanged)
src/store/slices/authSlice.ts 5ms (unchanged)
src/store/slices/debateSlice.ts 7ms (unchanged)
src/store/slices/organizationSlice.ts 4ms (unchanged)
src/store/slices/uiSlice.ts 2ms (unchanged)
src/test/e2e/E2EScenarios.js 16ms (unchanged)
src/test/utils/ComponentTestUtils.js 10ms (unchanged)
🚀 Starting iterative linting fix process
==================================================


==================================================
📍 ITERATION 1
==================================================

📊 Generating report for iteration 1...
🐍 Analyzing Python issues...
🐚 Analyzing Shell script issues...
📦 Analyzing TypeScript/JavaScript issues...

📈 Iteration 1 Summary:
   Total issues: 8604
   Python: 2340
   Shell: 6260
   TypeScript: 4

   Top Python issues:
     Q000: 1018 issues
     W293: 418 issues
     PLR2004: 117 issues
     TID252: 109 issues
     PTH123: 105 issues

🔧 Fixing 8604 issues...

🔧 Auto-fixing Python issues...

🔒 Fixing Python security issues...
  Fixing random usage in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/context_manager.py
  Fixing random usage in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/performance-testing/framework/base/performance_test_base.py
  Fixing random usage in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/performance-testing/tests/load_tests.py
  Fixing random usage in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/tests/test_code_analyzer.py
  Fixing random usage in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/performance-testing/tests/github_api_simulation.py
  Adding timeouts to requests in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/pr_processor.py
  Adding timeouts to requests in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/context_manager.py
  Adding timeouts to requests in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/config_cli.py
  Adding timeouts to requests in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/tests/test_code_analyzer.py
  Adding timeouts to requests in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/github_event_handlers.py
  Adding timeouts to requests in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/performance-testing/framework/reporting/test_reporter.py

🐚 Fixing Shell script issues...
  Fixing quick-login-test.sh
  Fixing stop-mcp-services.sh
  Fixing start-all-mcp-services.sh
  Fixing performance-tests/run-performance-tests.sh
  Fixing e2e-tests/run-tests-and-collect-evidence.sh
  Fixing scripts/fix-linting-issues.sh
  Fixing scripts/test-runner.sh
  Fixing scripts/metrics-dashboard.sh
  Fixing scripts/e2e-validation.sh
  Fixing scripts/stop-backend-services.sh
  Fixing scripts/start-services-docker.sh
  Fixing scripts/claude-lint-setup.sh
  Fixing scripts/stop-services-docker.sh
  Fixing scripts/deploy-istio.sh
  Fixing scripts/start-backend-services.sh
  Fixing scripts/chaos-testing.sh
  Fixing scripts/set-java-21.sh
  Fixing scripts/dev-setup.sh
  Fixing scripts/contract-testing.sh
  Fixing github-integration/run-e2e-tests.sh
  Fixing mock-server/start.sh
  Fixing .linting/scripts/incremental-lint.sh
  Fixing .linting/scripts/check-commit-message.sh
  Fixing .linting/scripts/e2e-test.sh
  Fixing mcp-llm/scripts/test-llm.sh
  Fixing mcp-llm/scripts/sky-color-mcp.sh
  Fixing mcp-llm/scripts/llm-demo-curl.sh
  Fixing mcp-llm/scripts/sky-color-example.sh
  Fixing mcp-llm/scripts/curl-sky-example.sh
  Fixing mcp-llm/scripts/simple-llm-example.sh
  Fixing k8s/service-mesh/scripts/deploy-service-mesh.sh
  Fixing mcp-controller/scripts/test-debate-flow.sh
  Fixing mcp-controller/scripts/mcp-debate-client.sh
  Fixing mcp-controller/scripts/debate-demo-curl.sh
  Fixing mcp-controller/scripts/complete-debate-demo.sh
  Fixing scripts/security/security-penetration-test.sh
  Fixing scripts/security/security-scan.sh
  Fixing scripts/security/owasp-zap-security-test.sh
  Fixing scripts/security/iac-security-scan.sh
  Fixing scripts/security/security-monitoring.sh
  Fixing scripts/security/rotate-tokens.sh
  Fixing scripts/security/security-benchmark.sh
  Fixing scripts/security/check-hardcoded-values.sh
  Fixing scripts/security/api-security-scan.sh
  Fixing scripts/security/security-test-suite.sh
  Fixing scripts/development/validate-build.sh
  Fixing scripts/development/start-services.sh
  Fixing scripts/development/run-mock-servers.sh
  Fixing scripts/development/setjava21.sh
  Fixing scripts/development/quick-start.sh
  Fixing scripts/development/fix-docker.sh
  Fixing scripts/development/setup-pre-commit.sh
  Fixing scripts/development/setup-sonar-cron.sh
  Fixing scripts/development/check-env-vars.sh
  Fixing scripts/development/validate-setup.sh
  Fixing scripts/development/run-with-env.sh
  Fixing scripts/development/fix-lombok.sh
  Fixing scripts/development/fix-git-history.sh
  Fixing scripts/recovery/restore-database.sh
  Fixing scripts/setup/install-maintenance.sh
  Fixing scripts/setup/setup-pre-commit.sh
  Fixing scripts/testing/smoke-tests.sh
  Fixing scripts/testing/test-redis.sh
  Fixing scripts/testing/wait-for-services.sh
  Fixing scripts/testing/run-all-tests.sh
  Fixing scripts/testing/test-apis.sh
  Fixing scripts/testing/run-comprehensive-security-tests.sh
  Fixing scripts/testing/test-mcp-basic.sh
  Fixing scripts/testing/validate-linting-implementation.sh
  Fixing scripts/testing/test-mcp-services.sh
  Fixing scripts/testing/test-incremental-linting.sh
  Fixing scripts/testing/wait-for-docker.sh
  Fixing scripts/testing/test-incremental-linting-comprehensive.sh
  Fixing scripts/testing/test-databases.sh
  Fixing scripts/testing/run-ui-tests.sh
  Fixing scripts/deployment/docker-registry-manager.sh
  Fixing scripts/deployment/docker-cleanup-force.sh
  Fixing scripts/deployment/docker-cleanup.sh
  Fixing scripts/deployment/docker-image-scan.sh
  Fixing scripts/deployment/start-mcp-services.sh
  Fixing scripts/maintenance/mcp-full-client.sh
  Fixing scripts/maintenance/add-to-claude-code.sh
  Fixing scripts/maintenance/fix-blocker-issues.sh
  Fixing scripts/maintenance/health-check.sh
  Fixing scripts/maintenance/cleanup.sh
  Fixing scripts/monitoring/generate-actionable-sonarcloud-report.sh
  Fixing scripts/monitoring/generate-sonarcloud-report.sh
  Fixing scripts/monitoring/generate-full-sonarcloud-report.sh
  Fixing scripts/monitoring/sonarcloud-simple-report.sh
  Fixing scripts/monitoring/generate-sonar-report.sh
  Fixing scripts/monitoring/generate-detailed-issues-report.sh
  Fixing scripts/monitoring/sonar-quality-check.sh
  Fixing scripts/monitoring/generate-security-report.sh
  Fixing scripts/monitoring/sonarcloud-env-exports.sh
  Fixing scripts/sonarqube/run-analysis.sh
  Fixing scripts/backup/backup-database.sh
  Fixing scripts/testing/integration/test-mcp-controller.sh
  Fixing scripts/testing/integration/test-mcp-rag.sh
  Fixing scripts/testing/integration/test-all-mcp-detailed.sh
  Fixing scripts/testing/integration/test-mcp-organization.sh
  Fixing scripts/testing/integration/test-java-services.sh
  Fixing scripts/testing/integration/test-available-services.sh
  Fixing scripts/testing/integration/quick-test-enhanced.sh
  Fixing scripts/testing/integration/test-mcp-template.sh
  Fixing scripts/testing/integration/test-mcp-llm.sh
  Fixing scripts/testing/integration/quick-test.sh
  Fixing scripts/testing/performance/run-load-test.sh
  Fixing infrastructure/docker-compose/test-mcp-endpoints.sh

📦 Fixing TypeScript/JavaScript issues...

📊 Generating report for iteration 1_post...
🐍 Analyzing Python issues...
🐚 Analyzing Shell script issues...
📦 Analyzing TypeScript/JavaScript issues...

📈 Iteration 1_post Summary:
   Total issues: 7124
   Python: 860
   Shell: 6260
   TypeScript: 4

   Top Python issues:
     PLR2004: 117 issues
     W293: 116 issues
     TID252: 109 issues
     PTH123: 105 issues
     ARG002: 66 issues

✅ Fixed 1480 issues in this iteration

💾 Committing iteration 1 fixes...


==================================================
📍 ITERATION 2
==================================================

📊 Generating report for iteration 2...
🐍 Analyzing Python issues...
🐚 Analyzing Shell script issues...
📦 Analyzing TypeScript/JavaScript issues...

📈 Iteration 2 Summary:
   Total issues: 7124
   Python: 860
   Shell: 6260
   TypeScript: 4

   Top Python issues:
     PLR2004: 117 issues
     W293: 116 issues
     TID252: 109 issues
     PTH123: 105 issues
     ARG002: 66 issues

🔧 Fixing 7124 issues...

🔧 Auto-fixing Python issues...

🔒 Fixing Python security issues...
  Fixing random usage in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/performance-testing/framework/base/performance_test_base.py
  Fixing random usage in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/performance-testing/tests/load_tests.py
  Fixing random usage in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/tests/test_code_analyzer.py
  Fixing random usage in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/context_manager.py
  Adding timeouts to requests in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/context_manager.py
  Adding timeouts to requests in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/config_cli.py
  Adding timeouts to requests in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/tests/test_code_analyzer.py
  Adding timeouts to requests in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/github_event_handlers.py
  Adding timeouts to requests in /Users/lsendel/IdeaProjects/zamaz-debate-mcp/performance-testing/framework/reporting/test_reporter.py

🐚 Fixing Shell script issues...
  Fixing quick-login-test.sh
  Fixing stop-mcp-services.sh
  Fixing start-all-mcp-services.sh
  Fixing performance-tests/run-performance-tests.sh
  Fixing e2e-tests/run-tests-and-collect-evidence.sh
  Fixing scripts/fix-linting-issues.sh
  Fixing scripts/test-runner.sh
  Fixing scripts/metrics-dashboard.sh
  Fixing scripts/e2e-validation.sh
  Fixing scripts/stop-backend-services.sh
  Fixing scripts/start-services-docker.sh
  Fixing scripts/claude-lint-setup.sh
  Fixing scripts/stop-services-docker.sh
  Fixing scripts/deploy-istio.sh
  Fixing scripts/start-backend-services.sh
  Fixing scripts/chaos-testing.sh
  Fixing scripts/set-java-21.sh
  Fixing scripts/dev-setup.sh
  Fixing scripts/contract-testing.sh
  Fixing github-integration/run-e2e-tests.sh
  Fixing mock-server/start.sh
  Fixing .linting/scripts/incremental-lint.sh
  Fixing .linting/scripts/check-commit-message.sh
  Fixing .linting/scripts/e2e-test.sh
  Fixing mcp-llm/scripts/test-llm.sh
  Fixing mcp-llm/scripts/sky-color-mcp.sh
  Fixing mcp-llm/scripts/llm-demo-curl.sh
  Fixing mcp-llm/scripts/sky-color-example.sh
  Fixing mcp-llm/scripts/curl-sky-example.sh
  Fixing mcp-llm/scripts/simple-llm-example.sh
  Fixing k8s/service-mesh/scripts/deploy-service-mesh.sh
  Fixing mcp-controller/scripts/test-debate-flow.sh
  Fixing mcp-controller/scripts/mcp-debate-client.sh
  Fixing mcp-controller/scripts/debate-demo-curl.sh
  Fixing mcp-controller/scripts/complete-debate-demo.sh
  Fixing scripts/security/security-penetration-test.sh
  Fixing scripts/security/security-scan.sh
  Fixing scripts/security/owasp-zap-security-test.sh
  Fixing scripts/security/iac-security-scan.sh
  Fixing scripts/security/security-monitoring.sh
  Fixing scripts/security/rotate-tokens.sh
  Fixing scripts/security/security-benchmark.sh
  Fixing scripts/security/check-hardcoded-values.sh
  Fixing scripts/security/api-security-scan.sh
  Fixing scripts/security/security-test-suite.sh
  Fixing scripts/development/validate-build.sh
  Fixing scripts/development/start-services.sh
  Fixing scripts/development/run-mock-servers.sh
  Fixing scripts/development/setjava21.sh
  Fixing scripts/development/quick-start.sh
  Fixing scripts/development/fix-docker.sh
  Fixing scripts/development/setup-pre-commit.sh
  Fixing scripts/development/setup-sonar-cron.sh
  Fixing scripts/development/check-env-vars.sh
  Fixing scripts/development/validate-setup.sh
  Fixing scripts/development/run-with-env.sh
  Fixing scripts/development/fix-lombok.sh
  Fixing scripts/development/fix-git-history.sh
  Fixing scripts/recovery/restore-database.sh
  Fixing scripts/setup/install-maintenance.sh
  Fixing scripts/setup/setup-pre-commit.sh
  Fixing scripts/testing/smoke-tests.sh
  Fixing scripts/testing/test-redis.sh
  Fixing scripts/testing/wait-for-services.sh
  Fixing scripts/testing/run-all-tests.sh
  Fixing scripts/testing/test-apis.sh
  Fixing scripts/testing/run-comprehensive-security-tests.sh
  Fixing scripts/testing/test-mcp-basic.sh
  Fixing scripts/testing/validate-linting-implementation.sh
  Fixing scripts/testing/test-mcp-services.sh
  Fixing scripts/testing/test-incremental-linting.sh
  Fixing scripts/testing/wait-for-docker.sh
  Fixing scripts/testing/test-incremental-linting-comprehensive.sh
  Fixing scripts/testing/test-databases.sh
  Fixing scripts/testing/run-ui-tests.sh
  Fixing scripts/deployment/docker-registry-manager.sh
  Fixing scripts/deployment/docker-cleanup-force.sh
  Fixing scripts/deployment/docker-cleanup.sh
  Fixing scripts/deployment/docker-image-scan.sh
  Fixing scripts/deployment/start-mcp-services.sh
  Fixing scripts/maintenance/mcp-full-client.sh
  Fixing scripts/maintenance/add-to-claude-code.sh
  Fixing scripts/maintenance/fix-blocker-issues.sh
  Fixing scripts/maintenance/health-check.sh
  Fixing scripts/maintenance/cleanup.sh
  Fixing scripts/monitoring/generate-actionable-sonarcloud-report.sh
  Fixing scripts/monitoring/generate-sonarcloud-report.sh
  Fixing scripts/monitoring/generate-full-sonarcloud-report.sh
  Fixing scripts/monitoring/sonarcloud-simple-report.sh
  Fixing scripts/monitoring/generate-sonar-report.sh
  Fixing scripts/monitoring/generate-detailed-issues-report.sh
  Fixing scripts/monitoring/sonar-quality-check.sh
  Fixing scripts/monitoring/generate-security-report.sh
  Fixing scripts/monitoring/sonarcloud-env-exports.sh
  Fixing scripts/sonarqube/run-analysis.sh
  Fixing scripts/backup/backup-database.sh
  Fixing scripts/testing/integration/test-mcp-controller.sh
  Fixing scripts/testing/integration/test-mcp-rag.sh
  Fixing scripts/testing/integration/test-all-mcp-detailed.sh
  Fixing scripts/testing/integration/test-mcp-organization.sh
  Fixing scripts/testing/integration/test-java-services.sh
  Fixing scripts/testing/integration/test-available-services.sh
  Fixing scripts/testing/integration/quick-test-enhanced.sh
  Fixing scripts/testing/integration/test-mcp-template.sh
  Fixing scripts/testing/integration/test-mcp-llm.sh
  Fixing scripts/testing/integration/quick-test.sh
  Fixing scripts/testing/performance/run-load-test.sh
  Fixing infrastructure/docker-compose/test-mcp-endpoints.sh

📦 Fixing TypeScript/JavaScript issues...

📊 Generating report for iteration 2_post...
🐍 Analyzing Python issues...
🐚 Analyzing Shell script issues...
📦 Analyzing TypeScript/JavaScript issues...

📈 Iteration 2_post Summary:
   Total issues: 7124
   Python: 860
   Shell: 6260
   TypeScript: 4

   Top Python issues:
     PLR2004: 117 issues
     W293: 116 issues
     TID252: 109 issues
     PTH123: 105 issues
     ARG002: 66 issues

✅ Fixed 0 issues in this iteration

⚠️  No issues were fixed in this iteration.
Manual intervention may be required for remaining issues.

==================================================
📊 FINAL REPORT
==================================================

📊 Generating report for iteration final...
🐍 Analyzing Python issues...
🐚 Analyzing Shell script issues...
📦 Analyzing TypeScript/JavaScript issues...

📈 Iteration final Summary:
   Total issues: 7124
   Python: 860
   Shell: 6260
   TypeScript: 4

   Top Python issues:
     PLR2004: 117 issues
     W293: 116 issues
     TID252: 109 issues
     PTH123: 105 issues
     ARG002: 66 issues

⚠️  7124 issues remain and require manual fixing

🚨 Remaining critical issues:
   /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/analytics_dashboard.py:540 - S104: Possible binding to all interfaces
   /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/analytics_dashboard.py:540 - S201: Use of `debug=True` in Flask app detected
   /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/analyzers/documentation_analyzer.py:1003 - S110: `try`-`except`-`pass` detected, consider logging the exception
   /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/analyzers/documentation_analyzer.py:1225 - SIM105: Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
   /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/analyzers/documentation_analyzer.py:1229 - S110: `try`-`except`-`pass` detected, consider logging the exception
   /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/analyzers/documentation_analyzer.py:1323 - S603: `subprocess` call: check for execution of untrusted input
   /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/analyzers/documentation_analyzer.py:1324 - S607: Starting a process with a partial executable path
   /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/code_analyzer.py:228 - S603: `subprocess` call: check for execution of untrusted input
   /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/code_analyzer.py:228 - S607: Starting a process with a partial executable path
   /Users/lsendel/IdeaProjects/zamaz-debate-mcp/.github/scripts/code_analyzer.py:260 - S603: `subprocess` call: check for execution of untrusted input
