FROM maven:3.9-eclipse-temurin-21-alpine AS builder

# Set working directory
WORKDIR /build

# Copy Maven configuration files first for better layer caching
COPY pom.xml .
COPY .mvn/ .mvn/
COPY */pom.xml ./
RUN mkdir -p mcp-common/src/main/java mcp-security/src/main/java

# Download dependencies (this layer will be cached if pom files don't change)
RUN mvn dependency:go-offline -B

# Copy only necessary source code (exclude sensitive files)
# Note: Use .dockerignore to exclude files like .env, .git, etc.
COPY src/ src/
COPY */src/ */src/

# Build the specific module (ARG will be passed during build)
ARG MODULE_NAME
ARG VERSION=1.0.0

# Build with specified version and skip tests (tests run in CI pipeline)
RUN mvn clean package -pl ${MODULE_NAME} -am -DskipTests -Drevision=${VERSION}

# Security: Verify JAR file exists
RUN test -f ${MODULE_NAME}/target/${MODULE_NAME}-*.jar || (echo "JAR file not found" && exit 1)

# Second stage: Runtime
FROM eclipse-temurin:21-jre-alpine

# Add metadata labels
ARG MODULE_NAME
ARG VERSION
ARG BUILD_DATE
ARG VCS_REF
ARG VCS_URL

LABEL org.opencontainers.image.title="${MODULE_NAME}" \
      org.opencontainers.image.description="Zamaz MCP ${MODULE_NAME} Service" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.source="${VCS_URL}" \
      org.opencontainers.image.vendor="Zamaz" \
      org.opencontainers.image.licenses="Proprietary"

# Set working directory
WORKDIR /app

# Install curl for health checks and security updates
RUN apk add --no-cache curl tzdata && \
    apk upgrade --no-cache

# Create non-root user
RUN addgroup -g 1000 spring && \
    adduser -u 1000 -G spring -s /bin/sh -D spring

# Copy JAR from builder
COPY --from=builder /build/${MODULE_NAME}/target/${MODULE_NAME}-*.jar app.jar

# Create config directory with proper permissions
RUN mkdir -p /app/config /app/logs && \
    chown -R spring:spring /app

# Switch to non-root user
USER spring

# Expose port (will be overridden by docker-compose)
ARG PORT=8080
HEALTHCHECK --interval=30s --timeout=3s CMD curl -f http://localhost/ || exit 1
EXPOSE ${PORT}

# Set healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:${PORT}/actuator/health || exit 1

# Set entrypoint with JVM tuning
ENTRYPOINT ["java", "-XX:+UseContainerSupport", "-XX:MaxRAMPercentage=75.0", "-jar", "app.jar"]