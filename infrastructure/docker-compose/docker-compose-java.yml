version: '3.8'

services:
  # Java version of MCP Organization Service
  mcp-organization:
    build: ./mcp-organization
    environment:
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=organization_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:?Database password must be provided}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - JWT_SECRET
      - SERVER_PORT=${MCP_ORGANIZATION_PORT:-5005}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
      - API_DOCS_PATH=${API_DOCS_PATH:-/api-docs}
      - SWAGGER_UI_PATH=${SWAGGER_UI_PATH:-/swagger-ui.html}
    ports:
      - "${MCP_ORGANIZATION_PORT:-5005}:5005"  # HTTP API
      - "${MCP_ORGANIZATION_STDIO_PORT:-5105}:5105"  # MCP STDIO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./mcp-organization/config:/app/config
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Java version of MCP LLM Service
  mcp-llm:
    build: ./mcp-llm
    environment:
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - CLAUDE_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - GEMINI_API_KEY=${GOOGLE_API_KEY:-}
      - OLLAMA_BASE_URL=${OLLAMA_ENDPOINT:-http://ollama:11434}
      - OLLAMA_ENABLED=${USE_LOCAL_LLM:-false}
      - SERVER_PORT=${MCP_LLM_PORT:-5002}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_DOCS_PATH=${API_DOCS_PATH:-/api-docs}
      - SWAGGER_UI_PATH=${SWAGGER_UI_PATH:-/swagger-ui.html}
    ports:
      - "${MCP_LLM_PORT:-5002}:5002"  # HTTP API
      - "${MCP_LLM_STDIO_PORT:-5102}:5102"  # MCP STDIO
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./mcp-llm/config:/app/config
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Java version of MCP Context Service
  mcp-context:
    build: ./mcp-context
    environment:
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=context_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:?Database password must be provided}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - JWT_SECRET
      - SERVER_PORT=${MCP_CONTEXT_PORT:-5007}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:5005,http://localhost:5006,http://localhost:5013
      - API_DOCS_PATH=${API_DOCS_PATH:-/api-docs}
      - SWAGGER_UI_PATH=${SWAGGER_UI_PATH:-/swagger-ui.html}
      - CONTEXT_CACHE_TTL=${CONTEXT_CACHE_TTL:-3600}
      - CONTEXT_WINDOW_SIZE=${CONTEXT_WINDOW_SIZE:-4096}
      - CONTEXT_MAX_WINDOW_SIZE=${CONTEXT_MAX_WINDOW_SIZE:-32768}
      - CONTEXT_VERSION_RETENTION=${CONTEXT_VERSION_RETENTION:-30}
      - TOKEN_COUNT_MODEL=${TOKEN_COUNT_MODEL:-gpt-4}
    ports:
      - "${MCP_CONTEXT_PORT:-5007}:5007"  # HTTP API
      - "${MCP_CONTEXT_STDIO_PORT:-5107}:5107"  # MCP STDIO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./mcp-context/config:/app/config
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5007/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Java version of MCP Controller Service
  mcp-controller:
    build: ./mcp-controller
    environment:
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-debate_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:?Database password must be provided}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - ORGANIZATION_SERVICE_URL=${ORGANIZATION_SERVICE_URL:-http://mcp-organization:5005}
      - CONTEXT_SERVICE_URL=${CONTEXT_SERVICE_URL:-http://mcp-context:5007}
      - LLM_SERVICE_URL=${LLM_SERVICE_URL:-http://mcp-llm:5002}
      - SERVER_PORT=${MCP_CONTROLLER_PORT:-5013}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_DOCS_PATH=${API_DOCS_PATH:-/api-docs}
      - SWAGGER_UI_PATH=${SWAGGER_UI_PATH:-/swagger-ui.html}
    ports:
      - "${MCP_CONTROLLER_PORT:-5013}:5013"  # HTTP API
      - "${MCP_CONTROLLER_STDIO_PORT:-5113}:5113"  # MCP STDIO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mcp-organization:
        condition: service_healthy
      mcp-llm:
        condition: service_healthy
    volumes:
      - ./mcp-controller/config:/app/config
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5013/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # PostgreSQL extended configuration for Java services
  postgres-init:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password must be provided}
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
    command: |
      bash -c "
        echo 'CREATE DATABASE organization_db;' > /docker-entrypoint-initdb.d/01-create-dbs.sql
        echo 'CREATE DATABASE context_db;' >> /docker-entrypoint-initdb.d/01-create-dbs.sql
        echo 'CREATE DATABASE debate_db;' >> /docker-entrypoint-initdb.d/01-create-dbs.sql
        echo 'GRANT ALL PRIVILEGES ON DATABASE organization_db TO ${POSTGRES_USER:-postgres};' >> /docker-entrypoint-initdb.d/01-create-dbs.sql
        echo 'GRANT ALL PRIVILEGES ON DATABASE context_db TO ${POSTGRES_USER:-postgres};' >> /docker-entrypoint-initdb.d/01-create-dbs.sql
        echo 'GRANT ALL PRIVILEGES ON DATABASE debate_db TO ${POSTGRES_USER:-postgres};' >> /docker-entrypoint-initdb.d/01-create-dbs.sql
      "
    networks:
      - mcp-network
    profiles:
      - setup

# The networks and volumes are defined in the main docker-compose.yml
# This file should be used with: docker-compose -f docker-compose.yml -f docker-compose-java.yml up