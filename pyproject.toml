[tool.ruff]
# Enable modern Python linting with Ruff
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "S",    # flake8-bandit (security)
    "T20",  # flake8-print
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "RUF",  # ruff-specific rules
    "PL",   # pylint
    "Q",    # flake8-quotes
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate (commented-out code)
    "ARG",  # flake8-unused-arguments
]
ignore = [
    "E501",  # line too long (covered by line-length)
    "S101",  # use of assert (common in tests)
    "PLR0913", # too many arguments
]
exclude = [
    ".git",
    "__pycache__",
    "node_modules",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    ".tox",
    ".mypy_cache",
    ".ruff_cache",
    "debate-ui/node_modules",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"tests/*.py" = ["S101", "PLR2004"]  # allow assert and magic values in tests
"test_*.py" = ["S101", "PLR2004"]
"*_test.py" = ["S101", "PLR2004"]
"scripts/sonarqube/*.py" = ["T201"]  # allow print statements in scripts

[tool.ruff.lint.isort]
known-first-party = ["mcp", "zamaz"]
combine-as-imports = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
ignore_missing_imports = true
pretty = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "scripts.*"
disallow_untyped_defs = false

[tool.bandit]
exclude_dirs = ["tests", "test_*", ".venv", "venv", "node_modules"]
skips = ["B101", "B601"]  # skip assert_used and paramiko_calls
severity = "medium"
confidence = "medium"

[tool.black]
# Configuration for Black formatter (if we decide to use it alongside Ruff)
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | build
  | dist
  | node_modules
)/
'''

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "zamaz-debate-mcp"
version = "1.0.0"
description = "Zamaz Debate MCP System"
readme = "README.md"
requires-python = ">=3.11"
dependencies = []

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "bandit[toml]>=1.7.5",
    "black>=24.0.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
]

[tool.coverage.run]
source = ["src", "scripts", "performance-testing"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]
precision = 2
show_missing = true